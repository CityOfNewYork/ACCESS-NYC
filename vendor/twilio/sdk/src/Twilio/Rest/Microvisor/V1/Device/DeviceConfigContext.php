<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Microvisor\V1\Device;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\Values;
use Twilio\Version;

/**
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 */
class DeviceConfigContext extends InstanceContext {
    /**
     * Initialize the DeviceConfigContext
     *
     * @param Version $version Version that contains the resource
     * @param string $deviceSid A string that uniquely identifies the Device.
     * @param string $key The config key.
     */
    public function __construct(Version $version, $deviceSid, $key) {
        parent::__construct($version);

        // Path Solution
        $this->solution = ['deviceSid' => $deviceSid, 'key' => $key, ];

        $this->uri = '/Devices/' . \rawurlencode($deviceSid) . '/Configs/' . \rawurlencode($key) . '';
    }

    /**
     * Fetch the DeviceConfigInstance
     *
     * @return DeviceConfigInstance Fetched DeviceConfigInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch(): DeviceConfigInstance {
        $payload = $this->version->fetch('GET', $this->uri);

        return new DeviceConfigInstance(
            $this->version,
            $payload,
            $this->solution['deviceSid'],
            $this->solution['key']
        );
    }

    /**
     * Update the DeviceConfigInstance
     *
     * @param string $value The config value.
     * @return DeviceConfigInstance Updated DeviceConfigInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update(string $value): DeviceConfigInstance {
        $data = Values::of(['Value' => $value, ]);

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new DeviceConfigInstance(
            $this->version,
            $payload,
            $this->solution['deviceSid'],
            $this->solution['key']
        );
    }

    /**
     * Delete the DeviceConfigInstance
     *
     * @return bool True if delete succeeds, false otherwise
     * @throws TwilioException When an HTTP error occurs.
     */
    public function delete(): bool {
        return $this->version->delete('DELETE', $this->uri);
    }

    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Microvisor.V1.DeviceConfigContext ' . \implode(' ', $context) . ']';
    }
}