{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","views/app/menuItem.js","views/app/menu.js","views/app/menuButtons.js","views/app/mobileMenuButton.js","views/app/header.js","views/app/subHeader.js","views/app/builderHeader.js","views/app/main.js","views/app/mobileMenuItem.js","views/app/mobileMenu.js","views/app/drawer/contentEmpty.js","views/app/drawer.js","views/app/drawer/mergeTagItem.js","views/app/drawer/mergeTagsSection.js","models/app/mergeTagModel.js","models/app/mergeTagCollection.js","views/app/drawer/mergeTagsContent.js","views/app/builder.js","controllers/app/remote.js","controllers/app/drawer.js","views/app/drawer/headerDefault.js","views/app/drawer/footerDefault.js","models/app/drawerModel.js","models/app/drawerCollection.js","views/fields/drawer/stagedField.js","views/fields/drawer/stagingEmpty.js","views/fields/drawer/stagingCollection.js","models/fields/stagingModel.js","models/fields/stagingCollection.js","views/fields/drawer/typeSection.js","views/fields/drawer/typeSectionCollection.js","views/fields/drawer/addField.js","views/app/drawer/itemSettingCollection.js","views/app/drawer/itemSettingGroup.js","views/app/drawer/itemSettingGroupCollection.js","views/app/drawer/editSettings.js","views/app/drawer/headerEditSettings.js","views/actions/drawer/typeButton.js","views/actions/drawer/typeCollection.js","views/actions/drawer/addAction.js","views/app/drawer/contentViewChangesItem.js","views/app/drawer/contentViewChanges.js","views/app/drawer/headerViewChanges.js","views/app/drawer/settingError.js","views/app/drawer/itemSetting.js","views/app/drawer/contentNewForm.js","views/app/drawer/headerNewForm.js","controllers/app/drawerConfig.js","views/app/drawer/defaultSettingsTitle.js","views/app/empty.js","models/app/domainModel.js","models/app/domainCollection.js","views/fields/subHeader.js","views/fields/mainContentFieldCollection.js","views/fields/drawer/addSavedField.js","views/fields/drawer/settingsTitle.js","views/actions/mainHeader.js","views/actions/subHeader.js","views/app/itemControls.js","views/actions/actionItem.js","views/actions/mainContentEmpty.js","views/actions/mainContent.js","views/advanced/mainHeader.js","views/advanced/subHeader.js","views/advanced/settingItem.js","views/advanced/mainContent.js","models/fields/fieldModel.js","models/fields/fieldCollection.js","controllers/app/domainConfig.js","models/app/appModel.js","controllers/app/data.js","controllers/app/drawerToggleSettingGroup.js","controllers/app/updateDB.js","models/app/formModel.js","controllers/app/formData.js","controllers/app/previewLink.js","controllers/app/menuButtons.js","models/app/changeModel.js","models/app/changeCollection.js","controllers/app/trackChanges.js","controllers/app/undoChanges.js","controllers/app/publishResponse.js","controllers/app/changeDomain.js","controllers/app/pushstate.js","controllers/app/hotkeys.js","controllers/app/cleanState.js","controllers/app/coreUndo.js","controllers/app/cloneModelDeep.js","controllers/app/getSettingChildView.js","controllers/app/changeSettingDefault.js","views/app/drawer/typeSettingFieldset.js","models/app/settingModel.js","models/app/settingCollection.js","controllers/app/fieldset.js","controllers/app/toggleSetting.js","controllers/app/itemControls.js","controllers/app/mergeTags.js","controllers/app/itemSettingFill.js","controllers/app/confirmPublish.js","controllers/app/rte.js","controllers/app/settingFieldSelect.js","controllers/app/settingFieldList.js","controllers/app/settingHTML.js","controllers/app/settingColor.js","controllers/app/changeMenu.js","controllers/app/mobile.js","controllers/app/notices.js","controllers/app/unloadCheck.js","controllers/app/formContentFilters.js","controllers/app/formContentGutterFilters.js","controllers/app/cloneCollectionDeep.js","controllers/app/trackKeyDown.js","controllers/app/perfectScroll.js","models/app/settingGroupModel.js","models/app/settingGroupCollection.js","controllers/app/getNewSettingGroupCollection.js","models/app/typeModel.js","models/app/typeCollection.js","models/fields/typeSectionModel.js","models/fields/typeSectionCollection.js","controllers/fields/types.js","controllers/fields/fieldTypeDrag.js","controllers/fields/stagingDrag.js","controllers/fields/staging.js","controllers/fields/stagingSortable.js","controllers/fields/filterTypes.js","controllers/fields/sortable.js","controllers/fields/data.js","models/app/optionRepeaterModel.js","models/app/optionRepeaterCollection.js","views/app/drawer/optionRepeaterError.js","views/app/drawer/optionRepeaterOption.js","views/app/drawer/optionRepeaterEmpty.js","views/app/drawer/optionRepeaterComposite.js","controllers/app/optionRepeater.js","controllers/fields/editActive.js","controllers/fields/fieldSettings.js","controllers/fields/fieldCreditCard.js","controllers/fields/fieldList.js","controllers/fields/fieldPassword.js","controllers/fields/fieldQuantity.js","controllers/fields/fieldShipping.js","controllers/fields/key.js","controllers/fields/notices.js","controllers/fields/mobile.js","controllers/fields/savedFields.js","controllers/fields/fieldDatepicker.js","controllers/fields/fieldDisplayCalc.js","controllers/actions/types.js","models/actions/actionModel.js","models/actions/actionCollection.js","controllers/actions/data.js","controllers/actions/actionSettings.js","controllers/actions/editActive.js","controllers/actions/addActionTypes.js","controllers/actions/typeDrag.js","controllers/actions/droppable.js","models/actions/typeModel.js","models/actions/typeCollection.js","controllers/actions/filterTypes.js","controllers/actions/newsletterList.js","controllers/advanced/types.js","models/advanced/settingsModel.js","controllers/advanced/data.js","controllers/advanced/formSettings.js","controllers/advanced/editActive.js","controllers/advanced/clickEdit.js","controllers/advanced/calculations.js","controllers/loadControllers.js","views/fields/fieldItem.js","views/fields/mainContentEmpty.js","views/app/formTitle.js","views/loadViews.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","view","Marionette","ItemView","extend","tagName","template","initialize","this","listenTo","nfRadio","channel","render","model","on","onRender","$el","children","unwrap","setElement","events","click a","clickAppMenu","trigger","templateHelpers","renderDashicons","dashicons","renderClasses","classes","currentDomain","request","get","renderUrl","url","formModel","renderTarget","renderDisabled","disabled","appMenuItemView","CollectionView","childView","onShow","el","find","bounceIcon","that","renderPublish","publishWidth","maybeDisabled","maybeRenderCancel","viewChanges","click .publish","click .viewChanges","clickPublish","clickViewChanges","changeModel","effect","times","click .nf-mobile-menu","clickMobileMenu","builderEl","toggleClass","appMenuCollectionView","appMenuButtonsView","mobileMenuButtonView","LayoutView","regions","menu","buttons","mobileMenuButton","appDomainCollection","show","collection","click #nf-logo","clickLogo","appHeaderView","appSubHeaderView","app","formTitle","appSub","changeSubHeader","formData","formSettings","formTitleView","subHeaderView","className","maybeDone","offsetRight","offsetLeft","gutterLeft","body","gutterRight","reply","getMainEl","window","context","resizeBothGutters","setBothGuttersAbsolute","setBothGuttersFixed","updateGutters","bodyView","gutterLeftView","gutterRightView","parent","onAttach","initialGutterResize","onBeforeDestroy","off","resize","resizeGutter","data","leftEl","rightEl","clearTimeout","top","offset","viewHeight","height","topLeft","leftLeft","left","css","position","topRight","leftRight","scrollTop","right","mobileDashicon","mobileMenuItemView","CompositeView","attachHtml","collectionView","append","click .nf-publish","drawerEmptyView","header","content","footer","getEl","loadContent","emptyContent","perfectScrollbar","drawerID","console","log","drawer","contentView","headerView","footerView","empty","click .nf-toggle-drawer","clickToggleDrawer","clickTag","active","mergeTagItemView","fieldCollection","updateFields","set","Backbone","Model","defaults","exclude","mergeTagModel","Collection","mergeTagsSectionView","MergeTagCollection","getMergeTagsView","reRender","settingModel","mergeTagCollection","defaultGroups","where","default_group","useMergeTags","_","each","remove","include","models","sectionModel","add","mainView","mobileMenuView","drawerView","mergeTagsContentView","menuDrawer","mergeTagsContent","getBuilderEl","getBuilderView","mergeTags","mergeTagsClone","clone","click .nf-open-drawer","click .nf-change-domain","click .nf-close-drawer","openDrawer","closeDrawer","changeDomain","addListener","dataModel","listen","updateSetting","clickExtra","getRemote","settingView","srcElement","addClass","remote","parentValue","action","security","nfAdmin","ajaxNonce","post","ajaxurl","response","JSON","parse","options","controller","clickOpenDrawer","toggleDrawerSize","getClosedDrawerPos","preventClose","enableClose","maybePreventClose","objPreventClose","filterFocused","currentDrawer","removeClass","rightClosed","drawerEl","checkCloseDrawerPos","setInterval","clearInterval","target","currentDomainID","hasFocus","checkOpenDrawerPos","focusFilter","filterEl","focus","closedPos","width","keys","key","getPreventClose","clearFilter","blurFilter","keyup .nf-filter","input .nf-filter","focus input","changeFilter","maybeChangeFilter","keyCode","addObject","trim","val","blur","getFocus","drawerDisabled","defaultHeaderView","defaultFooterView","getHeaderView","getFooterView","drawerModel","click .dashicons-dismiss","removeStagedField","stagedFieldView","stagedFieldsEmptyView","emptyView","activeClass","getStagedFieldsEl","sortable","placeholder","helper","tolerance","over","ui","out","receive","update","start","stop","draggable","opacity","connectToSortable","appendTo","refreshPositions","grid","element","zIndex","onAddChild","onRemoveChild","hasStagedFields","stagingModel","comparator","bindAll","getTypeSection","dragging","drag","disableSelection","click .nf-item","keydown .nf-item","mousedown .nf-item","clickFieldType","mousedownFieldType","maybeClickFieldType","renderFieldTypes","html","fieldTypes","type","nicename","icon","renderType","savedField","fieldTypeSectionView","drawerStagingView","StagingCollection","fieldTypeSectionCollectionView","staging","primary","secondary","filterFieldTypes","removeFieldTypeFilter","savedCollection","primaryCollection","fieldTypeSectionCollection","secondaryCollection","stagingCollection","filteredSectionCollection","reset","childViewOptions","getChildView","itemSettingCollectionView","settings","click .toggle","clickToggleGroup","renderLabel","label","groupLabel","renderArrowDir","display","itemSettingGroupView","itemSettingGroupCollectionView","settingTitle","settingGroups","groupCollection","titleView","maybeRenderTitle","title","renderTypeNicename","domainID","scroll","clickAddAction","open","image","section","renderStyle","actionTypeButtonView","renderNicename","slug","actionTypeCollectionView","filteractionTypes","removeactionTypeFilter","installedActions","availableActions","filteredInstalled","filteredAvailable","click .undoSingle","undoSingle","viewChangesItem","click .undoChanges","clickUndoChanges","settingErrorView","error","renderOnChange","renderError","refresh","drawerOpened","drawerClosed","setting","unescape","silent","onBeforeRender","escape","next","jBox","maxWidth","theme","closeOnClick","mask","input","autoNumeric","aSep","thousandsSeparator","aDec","decimalPoint","currency","currencySymbol","currencySymbols","aSign","text","format","renderVisible","renderSetting","renderLabelClasses","use_merge_tags","renderTooltip","help","renderMergeTags","hide_merge_tags","renderPlaceholder","change .setting","keyup .setting","click .setting","click .extra","changeSetting","keyUpSetting","clickSetting","itemSettingView","formName","formSubmit","titleSettingModel","addSubmitSettingModel","submitButtons","findWhere","drawerCollection","addFieldView","editSettingsView","editSettingsHeaderView","addActionView","viewChangesView","viewChangesHeaderView","newFormView","newFormHeaderView","mobileItemControlsView","getContentView","typeModel","getDrawerCollection","getDrawer","DefaultSettingsTitleView","EmptyView","hotkeys","getSettingsTitleView","getDefaultSettingsTitleView","getGutterLeftView","getGutterRightView","domainModel","reorderOnSort","getEmptyView","getSortableEl","initSortable","destroySortable","cancel","scrollSensitivity","item","dropping","hide","renderAddButton","button","click .nf-button","clickAddSavedField","addSavedFieldView","renderjBoxContent","addSaved","addSavedjBox","destroy","unset","x","y","outside","onCreated","setContent","attach","displayName","saved","realType","renderSavedStar","star","actionCollection","mouseover .nf-item-control","click .nf-edit-settings","singletap .nf-edit-settings","click .nf-delete","click .nf-duplicate","clickEdit","singleTapEdit","clickDelete","clickDuplicateField","mouseoverItemControl","itemControlsView","itemControls","maybeDeactivate","change input","click","maybeClickEdit","changeToggle","renderToggle","actionLabel","actionView","droppable","accept","hoverClass","drop","updateActiveClass","editActive","settingItem","objectType","objectDomain","order","fieldType","parentType","updateFieldKey","changedAttributes","keyModel","fieldModel","tmpNum","addField","removeField","addNewField","appendNewField","removeFieldResponse","newIDs","removedIDs","at","fieldExists","fieldsSubHeaderView","FieldsMainContentFieldCollectionView","fieldsSettingsTitleView","actionsMainHeaderView","actionsSubHeaderView","actionsMainContentView","settingsMainHeaderView","settingsSubHeaderView","settingsMainContentView","FieldCollection","defaultFormContentView","defaultFormContentLoad","defaultFormContentGutterView","nfi18n","domainFormFields","Esc","Ctrl+Shift+n","Ctrl+Shift+a","Ctrl+Shift+s","Alt+Ctrl+t","up","down","Shift+return","getSubHeaderView","getMainContentView","formContentData","formContentLoadFilters","sortedArray","without","first","formContentViewFilters","formContentView","gutterFilters","gutterView","domainActions","Ctrl+Shift+f","domainAdvanced","previewurl","getDomainCollection","getDomainModel","fieldModels","loading","changeStatus","appModel","clean","mobile","isMobile","getData","getSetting","getCurrentDomain","getCurrentDrawer","updateCurrentDomain","updateCurrentDrawer","currentDrawerID","toggleSettingGroup","errors","updateDB","defaultSaveFilter","jsAction","formContentSaveDataFilters","stringify","fields","field","parent_id","deleted_fields","actions","deleted_actions","autoClose","form","exception","pluck","isNumeric","preloadedFormData","getFormModel","disablePreview","enablePreview","changePreviewNicename","appDomains","preview","publish","changeCollection","parseInt","cid","ChangeModel","registerChange","getCollection","maybeResetCollection","changes","dashicon","undoChanges","sort","change","undoAll","publishResponse","new_ids","newID","oldID","forms","history","replaceState","changeAppDomain","preventChange","enableChange","objPreventChange","maybePreventChange","mainEl","changePushState","pushState","location","href","reExp","toString","newUrl","changeHotkeys","addNewAction","changeDomainFields","changeDomainActions","changeDomainSettings","document","hotkey","msg","fieldsDomain","actionsDomain","settingsDomain","ignoreAttributes","setAppClean","attr","changedAttr","after","undoChangeSetting","undoAddObject","undoRemoveObject","undoDuplicateObject","undoSortFields","undoAddListOption","undoRemoveListOption","undoSortListOptions","before","maybeRemoveChange","objectModel","results","objectCollection","objModels","optionModel","cloneModelDeep","attributes","clonedCollection","newModel","getSettingChildView","settingChildView","object","maybePreventUI","updateKey","fieldsetView","settingCollection","createSettingsCollection","settingTypeModel","clickDuplicate","tmpID","tagSectionCollection","tagSection","tags","fieldTags","tag","getFieldKeyFormat","calcTags","calcCollection","calcModel","currentElement","initMergeTags","clickMergeTag","addFieldTags","deleteFieldTags","updateCalcTags","updateCurrentElement","updateCurrentSetting","getSectionModel","replaceFieldKey","mergeTagsView","jBoxes","closeOnEsc","maxHeight","onOpen","prev","onClose","tagModel","currentValue","currentPos","caret","newPos","substr","summernote","calcTag","getFieldKeyFormatCalc","fieldID","calc","openMergeTags","returnMergeTags","preventDefault","currentModel","upMergeTags","changeActiveTag","downMergeTags","dir","inc","currentIndex","nextModel","userInfo","system","updateOpen","newKey","oldTag","oldKey","_previousAttributes","settingName","oldVal","re","RegExp","newVal","beforeRenderSetting","confirmPublish","initSettingModel","destroySetting","meta_image_frame","icons","align","alignCenter","alignJustify","alignLeft","alignRight","indent","outdent","bold","close","code","eraser","italic","link","unlink","magic","minus","orderedlist","redo","square","table","underline","undo","unorderedlist","currentContext","initRTE","linkButton","mediaButton","toolbar","codemirror","lineNumbers","callbacks","onBlur","editor","getValue","updateDataModel","prettifyHtml","linkMenu","replaceWith","class","innerHTML","removeRTE","linkDropdown","buttonGroup","contents","tooltip","clickLinkButton","toggle","dropdown","mergeTagsButton","openMediaManager","invoke","wp","media","frames","media_attachment","state","toJSON","insertMedia","range","closest","textEl","urlEl","isNewWindowEl","hasClass","isNewWindow","filename","trackKeyChanges","beforeRender","maybeSwitchToFieldsDomain","autoOpenDrawer","filterDrawerContents","SwitchToFieldsDomain","updateFieldMap","contains","fieldFilter","bail","fieldTypeModel","rubble","filterDrawer","switchDomain","fieldDomainModel","fieldListSettings","registerFieldListSettings","updateFieldListSettingKeys","changed","Radio","actionModel","lastChanged","oldValue","filter","init","changedSettingValue","setRenderFalse","closeColorPickers","initColorPicker","wpColorPicker","event","color","editFormText","changeMenu","formPublish","isNewForm","highlightAddNew","appendEditForm","form_id","isNaN","closeMobileMenu","addNotice","closeNotice","notices","appDefaults","constructOnInit","stack","animation","mobileDefaults","desktopDefaults","openNotice","bind","maybePrompt","viewFilters","saveFilters","loadFilters","addViewFilter","addSaveFilter","addLoadFilter","getViewFilters","getSaveFilters","getLoadFilters","priority","leftFilters","rightFilters","addLeftFilter","addRightFilter","getLeftFilters","getRightFilters","cloneCollectionDeep","constructor","keyDown","keyUp","getKeyDown","movedPos","initPerfectScroll","moveRail","resetRail","suppressScrollX","outerWidth","SettingCollection","settingGroupModel","SettingGroupCollection","getNewSettingGroupCollection","option","typeSectionModel","TypeCollection","SectionCollection","sections","fieldTypeSections","registerSection","fieldTypeData","getFieldType","getTypeCollection","getTypeSections","getSavedFields","shiftKey","startDrag","stopDrag","getCurrentDraggableHelperClone","style","setProperty","draggableHelperClone","stagedFields","num","addStagedField","getStagingCollection","sortStagedFields","clearStagedFields","beforeCloseDrawer","now","tmpField","sortableEl","search","pos","receiveStagedFields","overStagedFields","outStagedFields","startStagedFields","stopStagedFields","addActiveClass","stagedFieldsEl","removeActiveClass","currentHelper","helperClone","filtered","filterCollection","toLowerCase","found","alias","receiveFieldsSortable","overfieldsSortable","outFieldsSortable","stopFieldsSortable","startFieldsSortable","updateFieldsSortable","insertedAt","fieldWidth","dragFieldID","dragModel","oldPos","adding","removing","getFieldCollection","getField","redrawFieldCollection","getTmpFieldID","deleteField","sortFields","getAdding","setAdding","getRemoving","setRemoving","renderTrigger","savedType","updateFieldSetting","changeErrors","size","errorsFound","opt","listOptionModel","addOption","ErrorView","columns","renderErrors","hasErrors","keyup","changeOption","deleteOption","keyupOption","maybeAddOption","getColumns","renderOptions","column","selected","listOptionView","listEmptyView","listOptionCollection","optionCollection","handle","forcePlaceholderSize","renderHeaders","col","renderFieldsetClasses","currency_symbol","click .nf-add-new","clickAddOption","listCompositeView","updateOptionSortable","stopOptionSortable","startOptionSortable","convertSettings","triggerDataModel","modelData","new","default","newOrder","clearEditActive","fieldSettings","getSettingModel","getSettingCollection","dropCreditCardField","newField","stageCreditCardField","ListOptionCollection","updateOptionLabel","updateOptionValue","convertOptions","slugify","separator","dropField","stageField","field_slug","productFields","getProductFields","addMask","newFieldKey","updateLabel","d","Date","valueOf","keyExists","setError","testKey","startWiggle","stopWiggle","initWiggle","ClassyWiggle","degrees","delay","updateField","modified","modelClone","fieldData","created_at","formID","newType","newTypeDefaults","settingDefaults","typeCollection","typeSections","addDatepicker","pikadayResponsive","actionTypeData","installed","available","getType","getInstalledActions","getAvailableActions","actionType","addAction","removeAction","getAction","getTmpID","deleteAction","actionSettings","dropActionType","type_slug","actionTypeModel","filterActionTypes","newInstalled","newAvailable","defaultFields","clickListUpdate","maybeRenderFields","maybeRenderGroups","registerFieldsListener","registerGroupsListener","updateFieldMapping","updateInterestGroups","updateLists","lists","always","selectedList","list","groups","group","formSettingTypeData","settingsModel","getSettings","updateCalc","sortCalc","checkName","checkEQ","checkAllCalcs","nameExists","eq","errorSelfRef","errorFutureCalc","calcs","match","calculations","targetCalc","selfRef","futureCalc","Remote","Drawer","DrawerConfig","DomainConfig","AppData","DrawerToggleSettingGroup","UpdateDB","FormData","PreviewLink","AppMenuButtons","AppTrackChanges","AppUndoChanges","AppPublishResponse","AppChangeDomain","Pushstate","Hotkeys","CleanState","CoreUndo","CloneModelDeep","DrawerSettingChildView","ChangeSettingDefault","Fieldset","ToggleSetting","ItemControls","MergeTags","ItemSettingFill","ConfirmPublish","RTE","SettingFieldSelect","SettingFieldList","SettingHTML","SettingColor","ChangeMenu","AppMobile","AppNotices","AppUnloadCheck","FormContentFilters","FormContentGutterFilters","CloneCollectionDeep","TrackKeyDown","PerfectScroll","GetNewSettingGroupCollection","FieldTypes","FieldTypeDrag","FieldStagingDrag","StagedFieldsData","StagedFieldsSortable","DrawerFilterFieldTypes","MainContentFieldsSortable","FieldData","OptionRepeater","FieldsEditActive","FieldSettings","FieldCreditCard","FieldList","FieldPassword","FieldQuantity","FieldShipping","FieldKey","Notices","FieldsMobile","SavedFields","FieldDatepicker","FieldDisplayCalc","ActionTypes","ActionData","ActionSettings","ActionEditActive","ActionAddTypes","ActionTypeDrag","ActionDroppable","ActionFilterTypes","ActionNewsletterList","SettingTypes","SettingData","FormSettings","SettingsEditActive","SettingsClickEdit","AdvancedCalculations","doingShortcut","touch","renderRequired","required","getFieldID","renderIcon","mousedown","singletap","swipeleft","swiperight","tapend","maybeShortcut","maybeTapEdit","swipeLeft","startEvnt","swipeRight","renderTitle","fieldItemView","mainContentEmptyView","FormTitleView","getFieldItem","getMainContentEmpty","getFormTitle","ready","$","BuilderView","LoadControllers","LoadViews","NinjaForms","Application","Renderer","onStart","evaluate","interpolate","variable","ninjaForms"],"mappings":"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b,cAAA,SAAAtgC,GACA,GAAA3B,GAAArC,IACAgE,GAAA0G,OAAArP,IAAA,SAAAohC,GACAp6B,EAAA+hC,UAAA3H,EAAAl7B,IAAA,QAAAk7B,GACAp6B,EAAAgiC,QAAA5H,EAAAl7B,IAAA,MAAAk7B,OAMA,OAAAtvB,KCpJArT,EACA,+BAIA,yBACA,yBACA,+BACA,+BACA,uBACA,2CACA,2BACA,2BACA,8BACA,8BACA,+BACA,8BACA,kCACA,+BACA,4BACA,0BACA,6BACA,2BACA,iCACA,sCACA,uCACA,2BACA,gCACA,+BACA,4BACA,kCACA,iCACA,sBACA,qCACA,mCACA,8BACA,+BACA,6BACA,yBACA,0BACA,8BACA,qCACA,2CACA,sCACA,+BACA,gCACA,+CAIA,2BACA,mCACA,iCACA,6BACA,qCACA,iCACA,8BACA,0BACA,iCACA,gCACA,mCACA,qCACA,+BACA,mCACA,mCACA,mCACA,yBACA,6BACA,4BACA,iCACA,qCACA,sCAKA,4BACA,2BACA,qCACA,iCACA,qCACA,+BACA,gCACA,kCACA,qCAKA,6BACA,4BACA,oCACA,kCACA,iCACA,qCAEA,SAIAmrC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAIAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAIAC,GACAC,GACAC,GACAC,GACAC,GACAC,IAGA,GAAA58B,IAAAzN,WAAA7B,OAAA+B,QACAG,WAAA,WAIA,GAAAsnC,GACA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","file":"builder.js","sourcesContent":["(function () {\n","/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../lib/almond\", function(){});\n\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menuItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-app-menu-item',\n\n\t\tinitialize: function() {\n\t\t\t// Listen for domain changes and re-render when we detect one.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t\t// When we change the model (to disable it, for example), re-render.\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\t// Listen for clicks on our app menu.\n\t\tevents: {\n\t\t\t'click a': 'clickAppMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click on a menu item, fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * We pass this.model so that we know what item was clicked.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\te event\n\t\t * @return return\n\t\t */\n\t\tclickAppMenu: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * If we have any dashicons in our model, render them.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDashicons: function() {\n\t\t\t\t\tif ( this.dashicons ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons ' + this.dashicons + '\"></span>'\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Render classes for our menu item, including active.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its url.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderUrl: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its target.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderTarget: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\treturn '_blank';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '_self';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * If our menu item is disabled, output 'disabled'\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\tif ( this.disabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Collection view that takes our app menu items and renders an individual view for each.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menu',['views/app/menuItem'], function( appMenuItemView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: appMenuItemView,\n\n\t\t/**\n\t\t * When we show this view, get rid of the extra <div> tag added by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).find( 'li:last' ).unwrap();\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Renders the action buttons to the right of the app menu. i.e. Publish\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menuButtons',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'span',\n\t\ttemplate: '#tmpl-nf-app-header-action-button',\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:loading', this.render, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.bounceIcon, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t    \t\t/**\n\t    \t\t * Render our Publish button. If we're loading, render the loading version.\n\t    \t\t *\n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\trenderPublish: function() {\n\t    \t\t\tif ( that.publishWidth ) {\n\t    \t\t\t\tthis.publishWidth = 'style=\"width:' + that.publishWidth + 'px !important\"';\n\t    \t\t\t} else {\n\t    \t\t\t\tthis.publishWidth = '';\n\t    \t\t\t}\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'loading' ) ) {\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-header-publish-loading' );\n\t    \t\t\t} else {\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-publish-button' );\n\t    \t\t\t}\n\t    \t\t\treturn template( this );\n\t    \t\t},\n\n\t    \t\t/**\n\t    \t\t * If our app state is clean, disable publish.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\n\t    \t\t/**\n\t    \t\t * If our app isn't clean, render our 'viewChanges' button.\n\t    \t\t * @since  version\n\t    \t\t * @return {[type]} [description]\n\t    \t\t */\n\t    \t\tmaybeRenderCancel: function() {\n\t    \t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\tvar viewChanges = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-view-changes' );\n\t    \t\t\t\treturn viewChanges( this );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar publishEL = jQuery( this.el ).find( '.publish' );\n\t\t\t// this.publishWidth = jQuery( publishEL ).outerWidth( true );\n\t\t},\n\n\t\t/**\n\t\t * Listen for clicks on the Publish or view changes button.\n\t\t * @type {Object}\n\t\t */\n\t\tevents: {\n\t\t\t'click .publish': 'clickPublish',\n\t\t\t'click .viewChanges': 'clickViewChanges'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\n\t\t},\n\n\t\t/**\n\t\t * When we click view changes, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickViewChanges: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:viewChanges', e );\n\t\t},\n\n\t\tbounceIcon: function( changeModel ) {\n\t\t\tjQuery( this.el ).find( '.dashicons-backup' ).effect( 'bounce', { times: 3 }, 600 );\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders the action buttons to the right of the app menu. i.e. Publish\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenuButton',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'span',\n\t\ttemplate: '#tmpl-nf-mobile-menu-button',\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\t/**\n\t    \t\t * If our app state is clean, disable button.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t}\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Listen for clicks on the mobile menu button.\n\t\t * @type {Object}\n\t\t */\n\t\tevents: {\n\t\t\t'click .nf-mobile-menu': 'clickMobileMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickMobileMenu: function( e) {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main application header. Includes links to all of our domains.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/header',['views/app/menu', 'views/app/menuButtons', 'views/app/mobileMenuButton'], function( appMenuCollectionView, appMenuButtonsView, mobileMenuButtonView ) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-app-header',\n\n\t\tregions: {\n\t\t\t// Menu is our main app menu.\n\t\t\tmenu: '.nf-app-menu',\n\t\t\t// Buttons represents the 'view changes' and 'Publish' buttons.\n\t\t\tbuttons: '.nf-app-buttons',\n\t\t\tmobileMenuButton: '.nf-mobile-menu-button'\n\t\t},\n\n\t\t/**\n\t\t * Since this is a layout region, we need to fill the two areas: menu and buttons whenever we show this view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// Get our domains\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\t// show the menu area using the appropriate view, passing our domain collection.\n\t\t\tthis.menu.show( new appMenuCollectionView( { collection: appDomainCollection } ) );\n\t\t\tthis.buttons.show( new appMenuButtonsView() );\n\t\t\tthis.mobileMenuButton.show( new mobileMenuButtonView() );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click #nf-logo': 'clickLogo'\n\t\t},\n\n\t\tclickLogo: function( e ) {\n\t\t\t\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Renders our sub-header. i.e. add new field, add new action, etc.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our builder header.\n *\n * This is a layout view and handles two regions:\n * app - menu/buttons\n * subapp - title, add new field, etc.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/builderHeader',[ 'views/app/header', 'views/app/subHeader' ], function( appHeaderView, appSubHeaderView ) {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: \"div\",\n\t\ttemplate: \"#tmpl-nf-header\",\n\n\t\tregions: {\n\t\t\tapp: \"#nf-app-header\",\n\t\t\tformTitle: \"#nf-app-form-title\",\n\t\t\tappSub: \"#nf-app-sub-header\"\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changeSubHeader );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.app.show( new appHeaderView() );\n\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar formSettings = formData.get( 'settings' );\n\n\t\t\tvar formTitleView = nfRadio.channel( 'views' ).request( 'get:formTitle' );\n\t\t\tthis.formTitle.show( new formTitleView( { model: formSettings } ) );\n\n\t\t\tthis.changeSubHeader();\n\t\t},\n\n\t\tchangeSubHeader: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar subHeaderView = currentDomain.get( 'getSubHeaderView' ).call( currentDomain );\n\t\t\tthis.appSub.show( subHeaderView );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our builder.\n *\n * This is a layout view and handles three regions:\n * gutterLeft - gutter to the left of our main content area\n * body - main content area\n * gutterRight - gutter to the right of our main content area\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/main',[], function() {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main',\n\t\tclassName: 'nf-main-test',\n\t\tmaybeDone: false,\n\n\t\toffsetRight: false,\n\t\toffsetLeft: false,\n\n\t\tregions: {\n\t\t\tgutterLeft: '#nf-main-gutter-left',\n\t\t\tbody: '#nf-main-body',\n\t\t\tgutterRight: '#nf-main-gutter-right'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:mainEl', this.getMainEl, this );\n\n\t\t\t/*\n\t\t\t * Make sure that our gutters resize to match our screen upon resize or drawer open/close.\n\t\t\t */\n\t\t\tjQuery( window ).on( 'resize', { context: this }, this.resizeBothGutters );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:open', this.setBothGuttersAbsolute );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.setBothGuttersFixed );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.setBothGuttersAbsolute );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.setBothGuttersFixed );\n\n\t\t\t/*\n\t\t\t * Reply to messages requesting that we resize our gutters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:gutters', this.updateGutters, this );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tnfRadio.channel( 'main' ).trigger( 'show:main', this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar bodyView = currentDomain.get( 'getMainContentView' ).call( currentDomain );\n\t\t\tthis.body.show( bodyView );\n\n\t\t\tvar gutterLeftView = currentDomain.get( 'getGutterLeftView' ).call( currentDomain );\n\t\t\tthis.gutterLeft.show( gutterLeftView );\n\n\t\t\tvar gutterRightView = currentDomain.get( 'getGutterRightView' ).call( currentDomain );\n\t\t\tthis.gutterRight.show( gutterRightView );\n\t\t\t\n\t\t\tnfRadio.channel( 'main' ).trigger( 'render:main' );\n\t\t},\n\n\t\tgetMainEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tonAttach: function() {\n\t\t\tthis.initialGutterResize();\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( window ).off( 'resize', this.resize );\n\t\t},\n\n\t\tinitialGutterResize: function() {\n\t\t\tthis.resizeGutter( this.gutterLeft.el );\n\t\t\tthis.resizeGutter( this.gutterRight.el );\n\t\t\tthis.setBothGuttersFixed( this );\n\t\t},\n\n\t\tresizeBothGutters: function( e ) {\n\t\t\tvar context = ( e ) ? e.data.context : this;\n\n\t\t\tvar leftEl = context.gutterLeft.el;\n\t\t\tvar rightEl = context.gutterRight.el;\n\t\t\t\n\t\t\tcontext.resizeGutter( leftEl, context );\n\t\t\tcontext.resizeGutter( rightEl, context );\n\n\t\t\tcontext.setBothGuttersAbsolute( context );\n\n\t\t\t/*\n\t\t\t * Clear our timeout. If the timeout runs, it means we've stopped resizing.\n\t\t\t */\t\n\t\t\tclearTimeout( context.maybeDone );\n\t\t\t/*\n\t\t\t * Add our timeout.\n\t\t\t */\n\t\t\tcontext.maybeDone = setTimeout( context.setBothGuttersFixed, 100, context );\n\t\t},\n\n\t\tresizeGutter: function( el, context ) {\n\t\t\tvar top = jQuery( el ).offset().top;\n\t\t\tvar viewHeight = jQuery( window ).height();\n\t\t\tvar height = viewHeight - top;\n\t\t\tjQuery( el ).height( height );\n\t\t},\n\n\t\tsetBothGuttersFixed: function( context ) {\n\t\t\tcontext = context || this;\n\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\tvar topLeft = offsetLeft.top;\n\t\t\tvar leftLeft = offsetLeft.left;\n\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'fixed', left: leftLeft, top: topLeft } );\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\t\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\n\t\t\tvar topRight = offsetRight.top;\n\t\t\tvar leftRight = offsetRight.left;\n\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'fixed', left: leftRight, top: topRight } );\n\t\t},\n\n\t\tsetBothGuttersAbsolute: function( context ) {\n\t\t\tcontext = context || this;\n\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\n\n\t\t\tvar scrollTop = jQuery( '#nf-main' ).scrollTop();\n\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'absolute', left: 0, top: scrollTop } );\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'absolute', top: scrollTop, right: 0, left: 'auto' } );\n\t\t},\n\n\t\tupdateGutters: function() {\n\t\t\tthis.resizeBothGutters();\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenuItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-mobile-menu-item',\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\t// Listen for clicks on our app menu.\n\t\tevents: {\n\t\t\t'click a': 'clickAppMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click on a menu item, fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * We pass this.model so that we know what item was clicked.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\te event\n\t\t * @return return\n\t\t */\n\t\tclickAppMenu: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * If we have any dashicons in our model, render them.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDashicons: function() {\n\t\t\t\t\tif ( this.mobileDashicon ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons ' + this.mobileDashicon + '\"></span>'\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Render classes for our menu item, including active.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its url.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderUrl: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its target.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderTarget: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\treturn '_blank';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '_self';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * If our menu item is disabled, output 'disabled'\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\tif ( this.disabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Single item view used for the menu drawer.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenu',['views/app/mobileMenuItem'], function( mobileMenuItemView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-mobile-menu',\n\t\tchildView: mobileMenuItemView,\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.secondary' ).append( childView.el );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t    \t\t * If our app state is clean, disable button.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-publish': 'clickPublish'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Empty drawer content view.\n * Called before we close the drawer.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our drawer region\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer',['views/app/drawer/contentEmpty'], function( drawerEmptyView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer',\n\n\t\tregions: {\n\t\t\theader: '#nf-drawer-header',\n\t\t\tcontent: '#nf-drawer-content',\n\t\t\tfooter: '#nf-drawer-footer'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerEl', this.getEl, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'load:drawerContent', this.loadContent, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'empty:drawerContent', this.emptyContent, this );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).parent().perfectScrollbar();\n\t\t\t}\n\t\t},\n\n\t\tloadContent: function( drawerID, data ) {\n\t\t\tconsole.log( data );\n\t\t\tvar drawer = nfRadio.channel( 'app' ).request( 'get:drawer', drawerID );\n\t\t\tvar contentView = drawer.get( 'getContentView' ).call( drawer, data );\n\t\t\tvar headerView = drawer.get( 'getHeaderView' ).call( drawer, data );\n\t\t\tvar footerView = drawer.get( 'getFooterView' ).call( drawer, data );\n\n\t\t\tthis.header.show( headerView );\n\t\t\tthis.content.show( contentView );\n\t\t\tthis.footer.show( footerView );\n\n\t\t},\n\n\t\temptyContent: function() {\n\t\t\tthis.header.empty();\n\t\t\tthis.content.empty();\n\t\t\tthis.footer.empty();\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-toggle-drawer': 'clickToggleDrawer'\n\t\t},\n\n\t\tclickToggleDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:toggleDrawerSize' );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Single item view used for merge tags.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'li',\n\n\t\ttemplate: '#tmpl-nf-merge-tags-item',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:active', this.render );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:active', this.render, this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click a': 'clickTag'\n\t\t},\n\n\t\tclickTag: function( e ) {\n\t\t\tnfRadio.channel( 'mergeTags' ).trigger( 'click:mergeTag', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tif ( this.active ) {\n\t\t\t\t\t\treturn 'active';\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Merge tags popup section\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagsSection',['views/app/drawer/mergeTagItem'], function( mergeTagItemView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttagName: 'div',\n\t\tchildView: mergeTagItemView,\n\t\ttemplate: '#tmpl-nf-merge-tags-section',\n\n\t\tinitialize: function() {\n\t\t\tthis.collection = this.model.get( 'tags' );\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\n\t\t\t\t// var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t// fieldCollection.on( 'all', this.updateFields, this );\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change', this.render );\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\tfieldCollection.off( 'all', this.updateFields, this );\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.merge-tags' ).append( childView.el );\n\t\t},\n\n\t\tupdateFields: function() {\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tthis.model.set( 'tags', fieldCollection );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Model that represents our merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tactive: false,\n\t\t\texclude: false\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collections of merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: mergeTagModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Merge tags popup\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagsContent',['views/app/drawer/mergeTagsSection', 'models/app/mergeTagCollection'], function( mergeTagsSectionView, MergeTagCollection ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-merge-tags-content',\n\t\tchildView: mergeTagsSectionView,\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:view', this.getMergeTagsView, this );\n\t\t},\n\n\t\treRender: function( settingModel ) {\n\t\t\tvar mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n\t\t\tvar defaultGroups = mergeTagCollection.where( { default_group: true } );\n\t\t\tthis.collection = new MergeTagCollection( defaultGroups );\n\t\t\tvar that = this;\n\t\t\tvar useMergeTags = settingModel.get( 'use_merge_tags' );\n\t\t\tif ( 'object' == typeof useMergeTags ) {\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.exclude ) {\n\t\t\t\t\t_.each( useMergeTags.exclude, function( exclude ) {\n\t\t\t\t\t\tthat.collection.remove( exclude );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.include ) {\n\t\t\t\t\t_.each( mergeTagCollection.models, function( sectionModel ) {\n\t\t\t\t\t\tif ( -1 != useMergeTags.include.indexOf( sectionModel.get( 'id' ) ) ) {\n\t\t\t\t\t\t\t// console.log( sectionModel );\n\t\t\t\t\t\t\tthat.collection.add( sectionModel );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\n\t\tgetMergeTagsView: function() {\n\t\t\treturn this;\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Builder view.\n *\n * This layout view has regions that represent our application areas:\n * header\n * main\n * menuDrawer - Mobile side-menu\n * drawer\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/builder',['views/app/builderHeader', 'views/app/main', 'views/app/mobileMenu', 'views/app/drawer', 'views/app/drawer/mergeTagsContent'], function( headerView, mainView, mobileMenuView, drawerView, mergeTagsContentView ) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: \"#tmpl-nf-builder\",\n\t\tel: '#nf-builder',\n\n\t\tregions: {\n\t\t\theader: \"#nf-header\",\n\t\t\tmain: \"#nf-main\",\n\t\t\tmenuDrawer: \"#nf-menu-drawer\",\n\t\t\tdrawer: \"#nf-drawer\",\n\t\t\tmergeTagsContent: '.merge-tags-content'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Respond to requests asking for the builder dom element.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderEl', this.getBuilderEl, this );\n\t\t\t// Respond to requests asking for the builder view\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderView', this.getBuilderView, this );\n\t\t\t// Layout views aren't self-rendering.\n\t\t\tthis.render();\n\t\t\tvar mergeTags = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n\t\t\tvar mergeTagsClone = mergeTags.clone();\n\t\t\tthis.mergeTagsContent.show( new mergeTagsContentView( { collection: mergeTagsClone } ) );\n\t\t\t// Show our header.\n\t\t\tthis.header.show( new headerView() );\n\t\t\t// Show our main content.\n\t\t\tthis.main.show( new mainView() );\n\t\t\t// Show our mobile menu\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tthis.menuDrawer.show( new mobileMenuView( { collection: appDomainCollection } ) );\n\t\t\t// Show our drawer.\n\t\t\tthis.drawer.show( new drawerView() );\n\n\n\t\t},\n\n\t\tonRender: function() {\n\n\t\t},\n\n\t\tgetBuilderEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\tgetBuilderView: function() {\n\t\t\treturn this;\n\t\t},\n\n\t\t// Listen for clicks\n\t\tevents: {\n\t\t\t'click .nf-open-drawer': 'openDrawer',\n\t\t\t'click .nf-change-domain': 'changeDomain',\n\t\t\t'click .nf-close-drawer': 'closeDrawer'\n\t\t},\n\n\t\t/**\n\t\t * Someone clicked to open a drawer, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \te \tevent\n\t\t * @return void\n\t\t */\n\t\topenDrawer: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:openDrawer', e );\n\t\t},\n\t\t/**\n\t\t * Someone clicked to close a drawer, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tcloseDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:closeDrawer' );\n\t\t},\n\t\t/**\n\t\t * Someone clicked to change the domain, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \te \tevent\n\t\t * @return void\n\t\t */\n\t\tchangeDomain: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n\n","\ndefine( 'controllers/app/remote',[], function() {\n    return Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'setting' ), 'remote', this.addListener );\n        },\n\n        addListener: function( model, dataModel ) {\n\n            var listenTo = model.get( 'remote' ).listen;\n\n            // TODO: Change seems to be triggering twice on each update.\n            this.listenTo( nfRadio.channel( 'fieldSetting-' + listenTo ), 'update:setting', this.updateSetting );\n            this.listenTo( nfRadio.channel( 'actionSetting-' + listenTo ), 'update:setting', this.updateSetting );\n\n            this.listenTo( nfRadio.channel( 'setting-type-' + model.get( 'type' ) ), 'click:extra', this.clickExtra );\n\n            model.listenTo( nfRadio.channel( 'setting-remote' ), 'get:remote', this.getRemote, model );\n\n            // Auto-trigger get:remote on drawer load.\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\n            jQuery( e.srcElement ).addClass( 'spin' );\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        updateSetting: function( dataModel, settingModel ) {\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        getRemote: function( dataModel ) {\n\n            var remote = this.get( 'remote' );\n\n            var data = {\n                parentValue: dataModel.get( remote.listen ),\n                action: remote.action,\n                security: ( remote.security ) ? remote.security : nfAdmin.ajaxNonce\n            };\n\n            // TODO: Disable setting and lock drawer while updating.\n            var that = this;\n            jQuery.post( ajaxurl, data, function( response ){\n                var response = JSON.parse( response );\n\n                if( 'textbox' == that.get( 'type' ) ) {\n                    dataModel.set( that.get('name'), response.value );\n                }\n\n                if( 'select' == that.get( 'type' ) ) {\n                    that.set( 'options', response.options );\n                    that.trigger( 'rerender' );\n                }\n            });\n        },\n\n    });\n} );\n","/**\n * Handles opening and closing our drawer. This is where we display settings for fields, actions, and settings.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawer',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our drawer-related click events.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:openDrawer', this.clickOpenDrawer );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:closeDrawer', this.closeDrawer );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:toggleDrawerSize', this.toggleDrawerSize );\n\n\t\t\t// Reply to direct requests to open or close the drawer.\n\t\t\tnfRadio.channel( 'app' ).reply( 'open:drawer', this.openDrawer, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'close:drawer', this.closeDrawer, this );\n\n\t\t\t/*\n\t\t\t * When we close the drawer, we have to figure out what the right position should be.\n\t\t\t * This listens to requests from other parts of our app asking what the closed right position is.\n\t\t\t */\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:closedRightPos', this.getClosedDrawerPos, this );\n\t\t\t\n\t\t\t// Reply to requests to prevent our drawer from closing\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'prevent:close', this.preventClose, this );\n\t\t\t// Reply to requests to enable drawer closing\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'enable:close', this.enableClose, this );\n\t\t\t// Reply to requests for our disabled/enabled state.\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:preventClose', this.maybePreventClose, this );\n\n\t\t\t/*\n\t\t\t * Object that holds our array of 'prevent close' values.\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\n\t\t\t */\n\t\t\tthis.objPreventClose = {};\n\n\t\t\t/*\n\t\t\t *  Listen to focus events on the filter and stop our interval when it happens.\n\t\t\t *  This is to fix a bug that can cause the filter to gain focus every few seconds.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:focused', this.filterFocused );\n\t\t},\n\n\t\t/**\n\t\t * Handles closing our drawer\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tcloseDrawer: function() {\n\t\t\t// Get our current domain.\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n\t\t\tif ( ! currentDrawer || this.maybePreventClose() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Triggers the before close drawer action on our current domain's drawer channel.\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'before:closeDrawer' );\n\t\t\t/*\n\t\t\t * The 'before:closeDrawer' message is deprecated as of version 3.0 in favour of 'before:close'.\n\t\t\t * TODO: Remove this radio message in the future.\n\t\t\t */\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:closeDrawer' );\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:close' );\n\t\t\t\n\t\t\t// Send a message to our drawer to empty its contents.\n\t\t\tnfRadio.channel( 'drawer' ).request( 'empty:drawerContent' );\n\n\t\t\t// To close our drawer, we have to add our closed class to the builder and remove the opened class.\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-closed' ).removeClass( 'nf-drawer-opened' );\n\t\t\tjQuery( builderEl ).removeClass( 'disable-main' );\n\n\t\t\t// Get the right position of our closed drawer. Should be container size in -px.\n\t\t\tvar rightClosed = this.getClosedDrawerPos();\n\n\t\t\t// Get our drawer element and give change the 'right' property to our closed position.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tjQuery( drawerEl ).css( { 'right': rightClosed } );\n\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've closed the drawer.\n\t\t\t *\n\t\t\t * Once our drawer is closed, we:\n\t\t\t * clear our interval\n\t\t\t * request that the app change it's current drawer to false\n\t\t\t * trigger a drawer closed message\n\t\t\t */\n\t\t\tthis.checkCloseDrawerPos = setInterval( function() {\n\t        \tif ( rightClosed == jQuery( drawerEl ).css( 'right' ) ) {\n\t        \t\tclearInterval( that.checkCloseDrawerPos );\n\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', false );\n\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'closed' );\n\t\t    \t\t// jQuery( drawerEl ).scrollTop( 0 );\n\t        \t}\n\t\t\t}, 150 );\n\t\t},\n\n\t\t/**\n\t\t * Click handler for our 'open drawer' event.\n\t\t * @since  3.0\n\t\t * @param  e jQuery event\n\t\t * @return void\n\t\t */\n\t\tclickOpenDrawer: function( e ) {\n\t\t\tvar drawerID = jQuery( e.target ).data( 'drawerid' );\n\t\t\tthis.openDrawer( drawerID );\n\t\t},\n\n\t\t/**\n\t\t * Open our drawer.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string drawerID \tID of the drawer we want to open.\n\t\t * @param  object data     \tOptional data that we want to pass to the drawer.\n\t\t * @return void\n\t\t */\n\t\topenDrawer: function( drawerID, data ) {\n\t\t\tif ( this.maybePreventClose() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If we haven't sent a data object, set the variable to an empty object.\n\t\t\tdata = data || {};\n\n\t\t\t/*\n\t\t\t * If we're dealing with something that has a model, set the proper active state.\n\t\t\t *\n\t\t\t * TODO: Make this more dynamic. I'm not sure that it fits in the drawer controller.\n\t\t\t */\n\t\t\tif ( 'undefined' != typeof data.model ) {\n\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\t\tnfRadio.channel( currentDomainID ).request( 'clear:editActive' );\n\t\t\t\tdata.model.set( 'editActive', true );\n\t\t\t\tthis.dataModel = data.model;\n\t\t\t}\n\n\t\t\t// Send out a message requesting our drawer view to load the content for our drawer ID.\n\t\t\tnfRadio.channel( 'drawer' ).request( 'load:drawerContent', drawerID, data );\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:open' );\n\t\t\t\n\t\t\t// To open our drawer, we have to add our opened class to our builder element and remove the closed class.\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-opened' ).removeClass( 'nf-drawer-closed' );\n\t\t\t\n\t\t\t// To open our drawer, we have to set the right position of our drawer to 0px.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tjQuery( drawerEl ).css( { 'right': '0px' } );\n\t\t\t\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've opened the drawer.\n\t\t\t *\n\t\t\t * Once our drawer is opened, we:\n\t\t\t * clear our interval\n\t\t\t * focus our filter\n\t\t\t * request that the app update its current drawer to the one we opened\n\t\t\t * trigger a drawer opened message\n\t\t\t */\n\t\t\tthis.hasFocus = false;\n\n\t\t\tthis.checkOpenDrawerPos = setInterval( function() {\n\t        \tif ( '0px' == jQuery( drawerEl ).css( 'right' ) ) {\n\t        \t\tclearInterval( that.checkOpenDrawerPos );\n\t\t\t\t\tif ( ! that.hasFocus ) {\n\t\t        \t\tthat.focusFilter();\n\t\t\t\t\t\tthat.hasFocus = true;\n\t\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', drawerID );\n\t\t\t    \t\tjQuery( drawerEl ).scrollTop( 0 );\n\t\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'opened' );\n\t\t\t\t\t}   \t\t\n\t        \t}\n\t\t\t}, 150 );\n\t\t},\n\n\t\t/**\n\t\t * Toggle the drawer from half to full screen and vise-versa\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\ttoggleDrawerSize: function() {\n\t\t\t// Get our drawer element.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\t// toggle our drawer size class.\n\t\t\tjQuery( drawerEl ).toggleClass( 'nf-drawer-expand' );\n\t\t},\n\n\t\t/**\n\t\t * Focus our filter\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        focusFilter: function() {\n        \t// Get our filter element\n        \tvar filterEl = nfRadio.channel( 'drawer' ).request( 'get:filterEl' );\n        \t// Focus\n        \tjQuery( filterEl ).focus();\n        },\n\n        /**\n         * Get the CSS right position (in px) of the closed drawer element.\n         * This is calculated by:\n         * getting the width of the builder element\n         * add 300 pixels\n         * make it negative\n         * \n         * @since  3.0\n         * @return void\n         */\n        getClosedDrawerPos: function() {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tvar closedPos = jQuery( builderEl ).width() + 300;\n\t\t\treturn '-' + closedPos + 'px';\n        },\n\n        /**\n         * Check to see if anything has registered a prevent close key.\n         * \n         * @since  3.0\n         * @return boolean\n         */\n        maybePreventClose: function() {\n        \tif ( 0 == Object.keys( this.objPreventClose ).length ) {\n        \t\treturn false;\n        \t} else {\n        \t\treturn true;\n        \t}\n        },\n\n        /**\n         * Register a prevent close key.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent close' setting.\n         * @return void\n         */\n        preventClose: function( key ) {\n        \tthis.objPreventClose[ key ] = true;\n        \t/*\n        \t * When we disable closing the drawer, add the disable class.\n        \t */\n        \t// Get our current drawer.\n\t\t\tthis.dataModel.set( 'drawerDisabled', true );\n        },\n\n        /**\n         * Remove a previously registered prevent close key.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent close' setting.\n         * @return void\n         */\n        enableClose: function( key ) {\n        \tdelete this.objPreventClose[ key ];\n        \t /*\n        \t * When we remove all of our disables preventing closing the drawer, remove the disable class.\n        \t */\n        \tif ( ! this.maybePreventClose() ) {\n\t        \t// Get our current drawer.\n\t\t\t\tthis.dataModel.set( 'drawerDisabled', false );        \t\t\n        \t}\n        },\n\n        /**\n         * When we focus our filter, make sure that our open drawer interval is cleared.\n         * \n         * @since  3.0\n         * @return void\n         */\n        filterFocused: function() {\n        \tclearInterval( this.checkOpenDrawerPos );\n        },\n\n        getPreventClose: function() {\n        \treturn this.objPreventClose;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * Default drawer header.\n *\n * Includes our filter/search and 'Done' button.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerDefault',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-default',\n\n\t\tinitialize: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\t// Listen for our drawer being disabled.\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we render, remove the extra div added by backbone and add listeners related to our filter.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// Remove extra wrapping div.\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t\t// Respond to requests related to our filter.\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'clear:filter', this.clearFilter, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'blur:filter', this.blurFilter, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:filterEl', this.getEl, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'keyup .nf-filter'\t: 'maybeChangeFilter',\n\t\t\t'input .nf-filter'\t: 'changeFilter',\n\t\t\t'focus input'\t\t: 'getFocus'\n\t\t},\n\n\t\t/**\n\t\t * When the filter text is changed, trigger an event on our current drawer.\n\t\t * This lets us keep the logic separate from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tchangeFilter: function( e ) {\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'change:filter', e.target.value, e );\n\t\t},\n\n\t\t/**\n\t\t * The user pressed a key. If it's the enter key, then run the change filter function.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tmaybeChangeFilter: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\te.addObject = true;\n\t\t\t\tthis.changeFilter( e );\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Clear our filter.\n\t\t *\n\t\t * This triggers 'input' on the field, which will trigger a change if necessary.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tclearFilter: function() {\n\t\t\tvar filterEl =  jQuery( this.el ).find( '.nf-filter' );\n\t\t\tif ( '' != jQuery.trim( filterEl.val() ) ) {\n\t\t\t\tfilterEl.val('');\n\t\t\t\tfilterEl.trigger( 'input' );\n\t\t\t\tfilterEl.focus();\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Fire the 'blur' event on our filter. Used to force a change event when the user tabs.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tblurFilter: function() {\n\t\t\tjQuery( this.el ).find( '.nf-filter' ).blur();\n\t\t},\n\n\t\t/**\n\t\t * Return our filter dom element.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).find( '.nf-filter' );\n\t\t},\n\n\t\tgetFocus: function() {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'filter:focused' );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\t// Get our current domain.\n\t\t\t\t\tif ( this.drawerDisabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Default drawer footer\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/footerDefault',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","define( 'models/app/drawerModel',['views/app/drawer/headerDefault', 'views/app/drawer/footerDefault'], function( defaultHeaderView, defaultFooterView ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tgetHeaderView: function( data ) {\n\t\t\t\treturn new defaultHeaderView( data );\n\t\t\t},\n\n\t\t\tgetFooterView: function( data ) {\n\t\t\t\treturn new defaultFooterView( data );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds all of our drawer models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/drawerCollection',['models/app/drawerModel'], function( drawerModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: drawerModel\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/drawer/stagedField',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-staged-field',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .dashicons-dismiss': 'removeStagedField'\n\t\t},\n\n\t\tremoveStagedField: function( el ) {\n\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'click:removeStagedField', el, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/stagingEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-staged-fields-empty',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/drawer/stagingCollection',['views/fields/drawer/stagedField', 'views/fields/drawer/stagingEmpty'], function( stagedFieldView, stagedFieldsEmptyView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: stagedFieldView,\n\t\temptyView: stagedFieldsEmptyView,\n\n\t\tactiveClass: 'nf-staged-fields-active', // CSS Class for showing the reservoir.\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:stagedFieldsEl', this.getStagedFieldsEl, this );\n\t\t},\n\n\t\tonShow: function() {\n\n\t\t\tthis.$el = jQuery( this.el ).parent();\n\t\t\tjQuery( this.$el ).find( 'span:first' ).unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tvar that = this;\n\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\tplaceholder: 'nf-staged-fields-sortable-placeholder',\n\t\t\t\thelper: 'clone',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'over:stagedFields', e, ui );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'out:stagedFields', ui );\n\t\t\t\t},\n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'receive:stagedFields', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'start:stagedFields', ui );\n\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stop:stagedFields', ui );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tjQuery( this.el ).parent().draggable( {\n\t\t\t\topacity: 0.9,\n\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\n\t\t\t\tappendTo: '#nf-main',\n\t\t\t\trefreshPositions: true,\n\t\t\t\tgrid: [ 3, 3 ],\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\thelper: function( e ) {\n\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\n\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\n\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\n\t\t\t\t\tvar left = width / 4;\n\t\t\t\t\tvar top = height / 2;\n\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\n\t\t\t\t\tjQuery( element ).zIndex( 1000 );\n\t\t\t\t\treturn element;\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:fieldStaging', this, ui );\n\t\t\t\t},\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:fieldStaging', this, ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tgetStagedFieldsEl: function() {\n\t\t\treturn jQuery( this.el );\n\t\t},\n\n\t\tonAddChild: function() {\n\t\t\tjQuery( this.el ).addClass( this.activeClass );\n\t\t},\n\n\t\tonRemoveChild: function() {\n\t\t\tif( this.hasStagedFields() ) return;\n\t\t\tjQuery( this.el ).removeClass( this.activeClass );\n\t\t},\n\n\t\thasStagedFields: function() {\n\t\t\treturn  0 != this.collection.length;\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Model for our staged field.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/stagingModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection of staged fields.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/stagingCollection',['models/fields/stagingModel'], function( stagingModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: stagingModel,\n\t\tcomparator: 'order'\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/drawer/typeSection',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-field-type-section',\n\n\t\tinitialize: function() {\n\t\t\t_.bindAll( this, 'render' );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSection', this.getTypeSection, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tthis.dragging = false;\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * If we're on a mobile device, we don't want to enable dragging for our field type buttons.\n\t\t\t */\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).find( 'div.nf-field-type-draggable' ).draggable( {\n\t\t\t\t\topacity: 0.9,\n\t\t\t\t\ttolerance: 'pointer',\n\t\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\n\t\t\t\t\trefreshPositions: true,\n\t\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\t\tappendTo: '#nf-builder',\n\n\t\t\t\t\thelper: function( e ) {\n\t\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\n\t\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\n\t\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\n\t\t\t\t\t\tvar left = width / 4;\n\t\t\t\t\t\tvar top = height / 2;\n\t\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\n\t\t\t\t\t\tjQuery( element ).zIndex( 1000 );\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t},\n\n\t\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = true;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = false;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tdrag: function(e, ui) {\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drag:type', this, ui, e );\t\n\t\t\t\t\t}\n\n\t\t\t\t} ).disableSelection();\n\n\t\t\t\tjQuery( this.el ).find( '.nf-item' ).focus( function() {\n\t\t\t    \tjQuery( this ).addClass( 'active' );\n\t\t\t    } ).blur( function() {\n\t\t\t    \tjQuery( this ).removeClass( 'active' );\n\t\t\t    } );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-item': 'clickFieldType',\n\t\t\t'keydown .nf-item': 'maybeClickFieldType',\n\t\t\t'mousedown .nf-item': 'mousedownFieldType'\n\t\t},\n\n\t\tclickFieldType: function( e ) {\n\t\t\tif ( ! this.dragging ) {\n\t\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:fieldType', e );\n\t\t\t}\n\t\t},\n\n\t\tmousedownFieldType: function( e ) {\n\t\t\tjQuery( e.target).addClass( 'clicked' );\n\t\t\tsetTimeout( function() {\n\t\t\t\tjQuery( e.target ).removeClass( 'clicked' );\n\t\t\t}, 1500 );\n\t\t},\n\n\t\tmaybeClickFieldType: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\tthis.clickFieldType( e );\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderFieldTypes: function() {\n\t\t\t        var html = '';\n\t\t\t        var that = this;\n\t\t\t        _.each( this.fieldTypes, function( id ) {\n\t\t\t            var type = nfRadio.channel( 'fields' ).request( 'get:type', id );\n\t\t\t            var nicename = type.get( 'nicename' );\n\t\t\t            var icon = type.get( 'icon' );\n\t\t\t            var renderType = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-field-type-button' );\n\t\t\t            html += renderType( { id: id, nicename: nicename, icon: icon, type: type, savedField: that.savedField } );\n\t\t\t        } );\n\t\t\t        return html;\n\t\t\t\t},\n\n\t\t\t\tsavedField: function() {\n\t\t\t\t\tif( this.type.get( 'savedField' ) ) {\n\t\t\t\t\t\treturn 'nf-saved';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetTypeSection: function() {\n\t\t\treturn this.el;\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/typeSectionCollection',['views/fields/drawer/typeSection'], function( fieldTypeSectionView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: fieldTypeSectionView,\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).find( '.nf-settings' ).unwrap();\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:editActive' );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/fields/drawer/addField',['views/fields/drawer/stagingCollection', 'models/fields/stagingCollection', 'views/fields/drawer/typeSectionCollection'], function( drawerStagingView, StagingCollection, fieldTypeSectionCollectionView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-content-add-field',\n\n\t\tregions: {\n\t\t\tstaging: '#nf-drawer-staging .nf-reservoir',\n\t\t\tprimary: '#nf-drawer-primary',\n\t\t\tsecondary: '#nf-drawer-secondary'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:fieldTypes', this.filterFieldTypes );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeFieldTypeFilter );\n\n\t\t\tthis.savedCollection = nfRadio.channel( 'fields' ).request( 'get:savedFields' );\n\t\t\tthis.primaryCollection = this.savedCollection;\n\n\t\t\tthis.fieldTypeSectionCollection = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\n\t\t\tthis.secondaryCollection = this.fieldTypeSectionCollection;\n\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar stagingCollection = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\tthis.staging.show( new drawerStagingView( { collection: stagingCollection } ) );\n\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.primaryCollection } ) );\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.secondaryCollection } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tfilterFieldTypes: function( filteredSectionCollection ) {\n\t\t\tthis.primary.reset();\n\t\t\tthis.secondary.reset();\n\t\t\tthis.filteredSectionCollection = filteredSectionCollection;\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.filteredSectionCollection } ) );\n\t\t},\n\n\t\tremoveFieldTypeFilter: function () {\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.savedCollection } ) );\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.fieldTypeSectionCollection } ) );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingCollection',[], function() {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t},\n\n\t\tgetChildView: function( model ) {\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:settingChildView', model );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingGroup',['views/app/drawer/itemSettingCollection'], function( itemSettingCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-field-setting-group',\n\t\t\n\t\tregions: {\n\t\t\tsettings: '.nf-field-settings'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t\tthis.dataModel = data.dataModel;\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.model.get( 'display' ) ) {\n\t\t\t\tthis.settings.show( new itemSettingCollectionView( { collection: this.model.get( 'settings' ), dataModel: this.dataModel } ) );\n\t\t\t} else {\n\t\t\t\tthis.settings.empty();\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'render:settingGroup', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .toggle': 'clickToggleGroup'\n\t\t},\n\n\t\tclickToggleGroup: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:toggleSettingGroup', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderLabel: function() {\n\t\t\t\t\tif ( '' != this.label ) {\n\t\t\t\t\t\tvar groupLabel = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-setting-group-label' );\n\t\t\t\t\t\treturn groupLabel( this );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderArrowDir: function() {\n\t\t\t\t\tif ( this.display ) {\n\t\t\t\t\t\treturn 'down';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'right';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingGroupCollection',['views/app/drawer/itemSettingGroup'], function( itemSettingGroupView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: itemSettingGroupView,\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/editSettings',['views/app/drawer/itemSettingGroupCollection'], function( itemSettingGroupCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings',\n\n\t\tregions: {\n\t\t\tsettingTitle: '.nf-setting-title',\n\t\t\tsettingGroups: '.nf-setting-groups'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.dataModel = data.model;\n\t\t\tthis.groupCollection = data.groupCollection;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar titleView = currentDomain.get( 'getSettingsTitleView' ).call( currentDomain, { model: this.model } );\n\n\t\t\tthis.settingTitle.show( titleView );\n\t\t\tthis.settingGroups.show( new itemSettingGroupCollectionView( { collection: this.groupCollection, dataModel: this.dataModel } ) );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\tmaybeRenderTitle: function() {\n\t    \t\t\tif ( 'undefined' !== typeof this.type ) {\n\t    \t\t\t\tvar title = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-settings-title' );\n\t    \t\t\t\treturn title( this );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\treturn type.get( 'nicename' );\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Edit Settings drawer header.\n *\n * Includes our 'Done' button.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerEditSettings',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-edit-settings',\n\n\t\tinitialize: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\t// Listen for our drawer being disabled.\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\t// Get our current domain.\n\t\t\t\t\tif ( this.drawerDisabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Button to add an action to the form.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/drawer/typeButton',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-action-type-button',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t\t\n\t\t\tjQuery( this.el ).disableSelection();\n\t\t\t\n\t\t\tif ( 'installed' == this.model.get( 'section') ) {\n\t\t\t\tvar that = this;\n\t\t\t\tjQuery( this.el ).draggable( {\n\t\t\t\t\topacity: 0.9,\n\t\t\t\t\ttolerance: 'intersect',\n\t\t\t\t\tscroll: false,\n\t\t\t\t\thelper: 'clone',\n\n\t\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = true;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'startDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = false;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'stopDrag:type', this, ui );\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-item': 'clickAddAction'\n\t\t},\n\n\t\tclickAddAction: function( e ) {\n\t\t\tif ( ! this.dragging ) {\n\t\t\t\tif ( 'installed' == this.model.get( 'section' ) ) { // Is this an installed action?\n\t\t\t\t\tnfRadio.channel( 'actions' ).trigger( 'click:addAction', this.model );\n\t\t\t\t} else { // This isn't an installed action\n\t\t\t\t\twindow.open( this.model.get( 'link' ), '_blank' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-item';\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\n\t\t\t\t\t\tclasses += ' nf-has-img';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'installed' == this.section ) {\n\t\t\t\t\t\tclasses += ' nf-action-type';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderStyle: function() {\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\n\t\t\t\t\t\treturn \"style=\\\"background-image: url(\" + this.image + \");\\\"\"\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/actions/drawer/typeCollection',['views/actions/drawer/typeButton'], function( actionTypeButtonView ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-action-type-section',\n\t\tchildView: actionTypeButtonView,\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\trenderNicename: function() {\n\t\t\t\t\treturn that.collection.nicename;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\treturn that.collection.slug;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.action-types' ).append( childView.el );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Add action drawer.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/drawer/addAction',['views/actions/drawer/typeCollection'], function( actionTypeCollectionView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-content-add-action',\n\n\t\tregions: {\n\t\t\tprimary: '#nf-drawer-primary',\n\t\t\tsecondary: '#nf-drawer-secondary'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:actionTypes', this.filteractionTypes );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeactionTypeFilter );\n\t\t\n\t\t\tthis.installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\n\t\t\tthis.primaryCollection = this.installedActions;\n\n\t\t\tthis.availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n\t\t\tthis.secondaryCollection = this.availableActions;\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.primaryCollection } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.secondaryCollection } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tfilteractionTypes: function( filteredInstalled, filteredAvailable ) {\n\t\t\tthis.primary.reset();\n\t\t\tthis.secondary.reset();\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: filteredInstalled } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: filteredAvailable } ) );\n\t\t\t\n\t\t},\n\n\t\tremoveactionTypeFilter: function () {\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.installedActions } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.availableActions } ) );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Individual change item.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentViewChangesItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-view-changes-item',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:disabled', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:disabled', this.render );\n\t\t},\n\n\t\t/**\n\t\t * When we render this element, remove the extra wrapping <div> that backbone creates.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .undoSingle': 'undoSingle'\n\t\t},\n\n\t\tundoSingle: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoSingle', this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentViewChanges',['views/app/drawer/contentViewChangesItem'], function( viewChangesItem ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'table',\n        className: 'nf-changes',\n\t\tchildView: viewChangesItem\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerViewChanges',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-view-changes',\n\n\t\tevents: {\n\t\t\t'click .undoChanges': 'clickUndoChanges'\n\t\t},\n\n\t\tclickUndoChanges: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoChanges' );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Error view used for settings.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/settingError',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-edit-setting-error'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSetting',['views/app/drawer/mergeTagsContent', 'views/app/drawer/settingError'], function( mergeTagsContentView, settingErrorView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\n\t\tregions: {\n\t\t\terror: '.nf-setting-error'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\t/*\n\t\t\t * Send out a request on the setting-type-{type} channel asking if we should render on dataModel change.\n\t\t\t * Defaults to false.\n\t\t\t * This lets specific settings, like RTEs, say that they don't want to be re-rendered when their data model changes.\n\t\t\t */\n\t\t\tvar renderOnChange = ( 'undefined' == typeof nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' ) ) ? false : nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' );\n\t\t\t\n\t\t\tif ( renderOnChange ) {\n\t\t\t\tthis.dataModel.on( 'change:' + this.model.get( 'name' ), this.render, this );\n\t\t\t}\n\n\t\t\tthis.model.on( 'change:error', this.renderError, this );\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\n            var remote = this.model.get( 'remote' );\n\t\t\tif( remote ) {\n\n                if( 'undefined' != typeof remote.refresh || remote.refresh ) {\n                    // Add 'update' icons\n                    var label = this.model.get('label');\n                    this.model.set('label', label + ' <a class=\"extra\"><span class=\"dashicons dashicons-update\"></span></a>');\n                }\n\n\t\t\t\tnfRadio.channel( 'setting' ).trigger( 'remote', this.model, this.dataModel, this );\n\t\t\t\tthis.model.on( 'rerender', this.render, this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * When our drawer opens, send out a radio message on our setting type channel.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.drawerOpened );\n\n\t\t\t/*\n\t\t\t * When our drawer closes, send out a radio message on our setting type channel.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.drawerClosed );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.dataModel.off( 'change:' + this.model.get( 'name' ), this.render );\n\t\t\tthis.model.off( 'change:error', this.renderError );\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( this.model.get( 'remote' ) ) {\n\t\t\t\tthis.model.off( 'rerender', this.render, this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\n\t\t\n\t\t\t/*\n\t\t\t * Unescape any HTML being saved if we are a textbox.\n\t\t\t */\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\n\t\t\t\tvar setting = this.model.get( 'name' );\n\t\t\t\tvar value = this.dataModel.get( setting );\n\t\t\t\tthis.dataModel.set( setting, _.unescape( value ), { silent: true } );\n\t\t\t}\n\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\t/*\n\t\t\t * We want to escape any HTML being output if we are a textbox.\n\t\t\t */\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\n\t\t\t\tvar setting = this.model.get( 'name' );\n\t\t\t\tvar value = this.dataModel.get( setting );\n\t\t\t\tthis.dataModel.set( setting, _.escape( value ), { silent: true } );\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.mergeTagsContentView = false;\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\n\t\t\tjQuery( this.el ).find( '.nf-help' ).each(function() {\n\t\t\t\tvar content = jQuery(this).next('.nf-help-text');\n\t\t\t\tjQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\tcontent: content,\n\t\t\t\t\tmaxWidth: 200,\n\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\ttrigger: 'click',\n\t\t\t\t\tcloseOnClick: true\n\t\t\t\t})\n\t\t    });\n\t\t\t\n\t\t    if ( this.model.get( 'use_merge_tags' ) ) {\n\t\t    \tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t    }\n\n\t\t\t/*\n\t\t\t * Apply Setting Field Masks\n\t\t\t */\n\t\t\tvar mask = this.model.get( 'mask' );\n\n\t\t\tif( typeof mask != \"undefined\" ){\n\n\t\t\t\tvar input = jQuery( this.$el ).find( 'input' );\n\n\t\t\t\tswitch( mask.type ){\n\t\t\t\t\tcase 'numeric':\n\t\t\t\t\t\tinput.autoNumeric({\n\t\t\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\t\t\taDec: decimalPoint\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'currency':\n\n\t\t\t\t\t\tvar currency = nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' );\n\t\t\t\t\t\tvar currencySymbol = nfAdmin.currencySymbols[ currency ] || '';\n\n\t\t\t\t\t\tinput.autoNumeric({\n\t\t\t\t\t\t\taSign:  jQuery('<div />').html(currencySymbol).text(),\n\t\t\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\t\t\taDec: decimalPoint\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'custom':\n\t\t\t\t\t\tif( mask.format ) input.mask( mask.format )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// TODO: Error Logging.\n\t\t\t\t\t\tconsole.log( 'Notice: Mask type of \"' + mask.type + '\" is not supported.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.renderError();\n\t\t},\n\n\t\tonShow: function() {\t\t\t\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonAttach: function() {\t\t\t\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\trenderError: function() {\n\t\t\tif ( this.model.get( 'error' ) ) {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-error' );\n\t\t\t\tthis.error.show( new settingErrorView( { model: this.model } ) );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-error' );\n\t\t\t\tthis.error.empty();\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t    \t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) != this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\n\t    \t\trenderSetting: function(){\n\t    \t\t\tif ( 'undefined' != typeof that.dataModel.get( this.name ) ) {\n\t    \t\t\t\tthis.value = that.dataModel.get( this.name );\n\t    \t\t\t} else if ( 'undefined' == typeof this.value ) {\n\t    \t\t\t\tthis.value = '';\n\t    \t\t\t}\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderLabelClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( this.use_merge_tags ) {\n\t\t\t\t\t\tclasses += ' has-merge-tags';\n\t\t\t\t\t}\n\t\t\t\t\tif ( 'rte' == this.type ) {\n\t\t\t\t\t\tclasses += ' rte';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-setting ';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += 'nf-' + this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' nf-one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderTooltip: function() {\n\t\t\t\t\tif ( this.help ) {\n\t\t\t\t\t\treturn '<a class=\"nf-help\" href=\"#\"><span class=\"dashicons dashicons-admin-comments\"></span></a><div class=\"nf-help-text\">' + this.help + '</div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderMergeTags: function() {\n\t\t\t\t\tif ( this.use_merge_tags && ! this.hide_merge_tags ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderPlaceholder: function() {\n\t\t\t\t\tif ( this.placeholder ) {\n\t\t\t\t\t\treturn 'placeholder=\"' + this.placeholder + '\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .setting': 'changeSetting',\n\t\t\t'keyup .setting': 'keyUpSetting',\n\t\t\t'click .setting': 'clickSetting',\n\t\t\t'click .extra': 'clickExtra'\n\t\t},\n\n\t\tchangeSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:setting', e, this.model, this.dataModel );\n\t\t},\n\n\t\tkeyUpSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'keyup:setting', e, this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'keyup:setting', e, this.model, this.dataModel );\n\t\t},\n\n\t\tclickSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:setting', e, this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:setting', e, this.model, this.dataModel, this );\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-name-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t},\n\n\t\tdrawerOpened: function() {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:opened', this.model, this.dataModel, this );\n\t\t},\n\n\t\tdrawerClosed: function() {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:closed', this.model, this.dataModel, this );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentNewForm',['views/app/drawer/itemSetting'], function( itemSettingView) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-new-form',\n\n\t\tregions: {\n\t\t\tformName: '.new-form-name',\n\t\t\tformSubmit: '.new-form-submit'\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar titleSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'title' );\n\t\t\tvar addSubmitSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'add_submit' );\n\t\t\tvar dataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\t\t\tthis.formName.show( new itemSettingView( { model: titleSettingModel, dataModel: dataModel } ) );\n\t\t\t/*\n\t\t\t * If we don't have any submit buttons on the form, prompt the user to add one on publish.\n\t\t\t */\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tvar submitButtons = fieldCollection.findWhere( { type: 'submit' } );\n\t\t\tif ( 'undefined' == typeof submitButtons ) {\n\t\t\t\tthis.formSubmit.show( new itemSettingView( { model: addSubmitSettingModel, dataModel: dataModel } ) );\n\t\t\t} else {\n\t\t\t\tdataModel.set( 'add_submit', 0 );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .publish': 'clickPublish'\n\t\t},\n\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:confirmPublish', e );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerNewForm',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-new-form'\n\t});\n\n\treturn view;\n} );\n","/**\n * Config file for our app drawers.\n *\n * this.collection represents all of our registered drawers.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawerConfig',[\n\t'models/app/drawerCollection',\n\t'views/fields/drawer/addField',\n\t'views/app/drawer/editSettings',\n\t'views/app/drawer/headerEditSettings',\n\t'views/actions/drawer/addAction',\n\t'views/app/drawer/contentViewChanges',\n\t'views/app/drawer/headerViewChanges',\n\t'views/app/drawer/contentNewForm',\n\t'views/app/drawer/headerNewForm'\n\t], function(\n\t\tdrawerCollection,\n\t\taddFieldView,\n\t\teditSettingsView,\n\t\teditSettingsHeaderView,\n\t\taddActionView,\n\t\tviewChangesView,\n\t\tviewChangesHeaderView,\n\t\tnewFormView,\n\t\tnewFormHeaderView,\n\t\tmobileItemControlsView\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\tthis.collection = new drawerCollection( [\n\t\t\t\t{\n\t\t\t\t\tid: 'addField',\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new addFieldView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'addAction',\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new addActionView( data );\n\t\t\t\t\t}\n\t\t\t\t},\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\tid: 'editSettings',\n\n\t\t\t\t\t/*\n\t\t\t\t\t * TODO: Add filtering when editing settings. For now, removing them from settings.\n\t\t\t\t\t */\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Get a custom setting header view if one is set.\n\t\t\t\t\t\t * TODO: Currently, this only works for advanced settings.\n\t\t\t\t\t\t * This could be used to replace the need for a single config file.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( 'undefined' != typeof data.typeModel ) {\n\t\t\t\t\t\t\tvar view = nfRadio.channel( data.typeModel.get( 'id' ) ).request( 'get:drawerHeaderView' ) || editSettingsHeaderView;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar view = editSettingsHeaderView;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new view( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new editSettingsView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'viewChanges',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the viewChanges drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new viewChangesHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new viewChangesView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'newForm',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the newForm drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new newFormHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new newFormView( data );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\t// Listen for requests for our drawer collection.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerCollection', this.getDrawerCollection, this );\n\t\t\t// Listen for requests for specific drawer models.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawer', this.getDrawer, this );\n\t\t},\n\n\t\tgetDrawerCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetDrawer: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Default settings title view.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/defaultSettingsTitle',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-default',\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\tif ( 'undefined' != typeof type ) {\n\t    \t\t\t\treturn type.get( 'nicename' );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Empty view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/empty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","/**\n * Model for our individual domains.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/domainModel',[ 'views/app/drawer/defaultSettingsTitle', 'views/app/empty' ], function( DefaultSettingsTitleView, EmptyView ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdashicons: '',\n\t\t\tclasses: '',\n\t\t\tactive: false,\n\t\t\turl: '',\n\t\t\thotkeys: false,\n\t\t\tdisabled: false,\n\n\t\t\tgetSettingsTitleView: function( data ) {\n\t\t\t\treturn new DefaultSettingsTitleView( data );\n\t\t\t},\n\n\t\t\tgetDefaultSettingsTitleView: function( data ) {\n\t\t\t\treturn new DefaultSettingsTitleView( data );\n\t\t\t},\n\n\t\t\tgetGutterLeftView: function( data ) {\n\t\t\t\t/*\n\t\t\t\t * Return empty view\n\t\t\t\t */\n\t\t\t\treturn new EmptyView();\n\t\t\t},\n\n\t\t\tgetGutterRightView: function( data ) {\n\t\t\t\t/* \n\t\t\t\t * Return empty view\n\t\t\t\t */\n\t\t\t\treturn new EmptyView();\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Holds all of our domain models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/domainCollection',['models/app/domainModel'], function( domainModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: domainModel\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-fields'\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/mainContentFieldCollection',[], function() {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\treorderOnSort: true,\n\n\t\tgetChildView: function() {\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:fieldItem' );\n\t\t},\n\n\t\tgetEmptyView: function() {\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:mainContentEmpty' );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:sortableEl', this.getSortableEl, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'init:sortable', this.initSortable, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'destroy:sortable', this.destroySortable, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.collection.models.length > 0 ) {\n\t\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' ).addClass( 'nf-fields-sortable' );\n\t\t\t\tvar that = this;\n\t\t\t\t/* TODO: There's a bug with some Android phones and chrome. The fix below hasn't been implement.\n\n\t\t\t\t * Instantiate our sortable field list, but only if we aren't on a mobile device.\n\t\t\t\t *\n\t\t\t\t * On Android, our sortable list isn't scrollable if it's instantiated at render.\n\t\t\t\t * Instead, for mobile, we need to instantiate our sortable when the user tapholds and then\n\t\t\t\t * destroy it when the drag stops.\n\t\t\t\t */\n\t\t\t\t// if ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\t\tthis.initSortable();\n\t\t\t\t// }\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).trigger( 'render:fieldsSortable', this );\n\t\t},\n\n\t\tgetSortableEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\tinitSortable: function() {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tvar tolerance = 'pointer';\n\t\t\t} else {\n\t\t\t\tvar tolerance = 'intersect';\n\t\t\t}\n\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\t//containment: '#nf-main',\n\t\t\t\thelper: 'clone',\n\t\t\t\tcancel: '.nf-item-controls',\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\n\t\t\t\topacity: 0.95,\n\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\t// scroll: false,\n\t\t\t\tappendTo: '#nf-builder',\n\t\t\t\tscrollSensitivity: 10,\n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'start:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:fieldsSortable', ui, this );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tdestroySortable: function() {\n\t\t\tjQuery( this.el ).sortable( 'destroy' );\n\t\t},\n\n\t\tonAddChild: function( childView ) {\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:adding' ) ) {\n\t\t\t\tchildView.$el.hide().show( 'clip' );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', false );\n\t\t\t}\n\t\t}\n\t\t\n\t} );\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/addSavedField',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-add-saved-field',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:addSavedLoading', this.renderAddButton, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.renderAddButton();\n\t\t},\n\n\t\trenderAddButton: function() {\n\t\t\tif ( this.model.get( 'addSavedLoading' ) ) {\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-loading' );\n\t\t\t} else {\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-button' );\n\t\t\t}\n\t\t\tjQuery( this.el ).find( '.add-button' ).html( button( this ) );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:addSavedLoading', this.render );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-button': 'clickAddSavedField'\n\t\t},\n\n\t\tclickAddSavedField: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:addSavedField', e, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Fields settings title view.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/fields/drawer/settingsTitle',['views/fields/drawer/addSavedField'], function( addSavedFieldView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-fields',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:saved', this.render, this );\n\t\t\tthis.model.on( 'change:label', this.renderjBoxContent, this );\n\t\t},\n\n\t\tregions: {\n\t\t\taddSaved: '.nf-add-saved-field'\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:saved', this.render );\n\t\t\tthis.addSavedjBox.destroy();\n\t\t\tthis.model.unset( 'jBox', { silent: true } );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.renderjBoxContent();\n\t\t\tvar that = this;\n\t\t\tthis.addSavedjBox = new jBox( 'Tooltip', {\n\t\t\t\ttrigger: 'click',\n\t\t\t\ttitle: 'Add to Saved Fields',\n\t\t\t\tposition: {\n\t\t\t\t\tx:'left',\n\t\t\t\t\ty:'center'\n\t\t\t\t},\n\t\t\t\toutside:'x',\n\t\t\t\tcloseOnClick: 'body',\n\n\t\t\t\tonCreated: function() {\n\t\t\t\t\tthis.setContent( jQuery( that.el ).find( '.nf-add-saved-field' ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.addSavedjBox.attach( jQuery( this.el ).find( '.dashicons') );\n\t\t\tthis.model.set( 'jBox', this.addSavedjBox, { silent: true } );\n\t\t},\n\n\t\trenderjBoxContent: function() {\n\t\t\tif ( this.addSaved ) {\n\t\t\t\tthis.addSaved.show( new addSavedFieldView( { model: this.model } ) );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\tvar displayName = type.get( 'nicename' );\n\n\t    \t\t\tif ( this.saved ) {\n\t    \t\t\t\tvar realType = nfRadio.channel( domainID ).request( 'get:type', type.get( 'type' ) );\n\t    \t\t\t\tdisplayName += ' - ' + realType.get( 'nicename' );\n\t    \t\t\t}\n\t    \t\t\treturn displayName;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trenderSavedStar: function() {\n\t\t\t\t\tif ( this.saved ) {\n\t\t\t\t\t\tvar star = 'filled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar star = 'empty';\n\t\t\t\t\t}\n\t\t\t\t\treturn '<span class=\"dashicons dashicons-star-' + star + '\"></span>'\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Add main header.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/mainHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-header-actions',\n\n\t\tinitialize: function() {\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\tthis.listenTo( actionCollection, 'add', this.render );\n\t\t\tthis.listenTo( actionCollection, 'remove', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\tif ( actionCollection.models.length == 0 ) {\n\t\t\t\tjQuery( this.el ).hide();\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).show();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Actions subheader view.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-actions'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/itemControls',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-item-controls',\n\n\t\tinitialize: function() {\n\t\t\t// Listen for domain changes and re-render when we detect one.\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t},\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\t// \n\t\t\tthis.currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t},\n\n\t\tevents: {\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\n\t\t\t'click .nf-edit-settings': 'clickEdit',\n\t\t\t'singletap .nf-edit-settings': 'singleTapEdit',\n\t\t\t'click .nf-delete': 'clickDelete',\n\t\t\t'click .nf-duplicate': 'clickDuplicateField'\n\t\t},\n\n\t\tclickEdit: function( e ) {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tsingleTapEdit: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t},\n\n\t\tclickDelete: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\n\t\t},\n\n\t\tclickDuplicateField: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\n\t\t},\n\n\t\tmouseoverItemControl: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'mouseover:itemControl', e, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Single action table row\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/actionItem',['views/app/itemControls'], function( itemControlsView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'tr',\n\t\ttemplate: '#tmpl-nf-action-item',\n\t\t\n\t\tregions: {\n\t\t\titemControls: '.nf-item-controls'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:label', this.render, this );\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\n\t\t\tthis.model.on( 'change:active', this.maybeDeactivate, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:label', this.render );\n\t\t\tthis.model.off( 'change:editActive', this.render );\n\t\t\tthis.model.off( 'change:active', this.maybeDeactivate );\n\t\t},\n\t\t\n\t\tonRender: function() {\n\t\t\tif ( this.model.get( 'editActive' ) ) {\n\t\t\t\tjQuery( this.el ).addClass( 'active' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).removeClass( 'active' );\n\t\t\t}\n\n\t\t\tthis.maybeDeactivate();\n\t\t\t\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\n\t\t},\n\n\t\tmaybeDeactivate: function() {\n\t\t\tif ( 0 == this.model.get( 'active' ) ) {\n\t\t\t\tjQuery( this.el ).addClass( 'deactivated' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).removeClass( 'deactivated' );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change input': 'changeToggle',\n\t\t\t'click': 'maybeClickEdit'\n\t\t},\n\n\t\tmaybeClickEdit: function( e ) {\n\t\t\tif ( 'TR' == jQuery( e.target ).parent().prop( 'tagName' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tchangeToggle: function( e ) {\n\t\t\tvar settingModel = nfRadio.channel( 'actions' ).request( 'get:settingModel', 'active' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:setting', e, settingModel, this.model );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderToggle: function() {\n\t\t\t\t\tvar actionLabel = this.label;\n\t\t\t\t\tthis.label = '';\n\t\t\t\t\tthis.value = this.active;\n\t\t\t\t\tthis.name = this.id + '-active';\n\t\t\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-toggle' );\n\t\t\t\t\thtml = html( this );\n\t\t\t\t\tthis.label = actionLabel;\n\t\t\t\t\treturn html;\n\t\t\t\t},\n\n\t\t\t\trenderTypeNicename: function() {\n\t\t\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', this.type );\n\t\t\t\t\tif ( 'undefined' == typeof type ) return;\n\t\t\t\n\t\t\t\t\treturn type.get( 'nicename' );\n\t\t\t\t},\n\n\t\t\t\trenderTooltip: function() {\n\t\t\t\t\tif ( this.help ) {\n\t\t\t\t\t\treturn '<a class=\"nf-help\" href=\"#\"><span class=\"dashicons dashicons-admin-comments\"></span></a><div class=\"nf-help-text\">' + this.help + '</div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderMergeTags: function() {\n\t\t\t\t\tif ( this.use_merge_tags ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/actions/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-actions-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().parent().removeClass( 'nf-actions-empty' );\n\t\t\t// jQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).parent().parent().addClass( 'nf-actions-empty' );\n\t\t\t// if ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t// \tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t// }\n\t\t\t// jQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\t// jQuery( this.el ).parent().droppable( {\n\t\t\t// \taccept: function( draggable ) {\n\t\t\t// \t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t// \t\t\treturn true;\n\t\t\t// \t\t}\n\t\t\t// \t},\n\t\t\t// \thoverClass: 'nf-droppable-hover',\n\t\t\t// \ttolerance: 'pointer',\n\t\t\t// \tover: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t// \t},\n\t\t\t// \tout: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t// \t},\n\t\t\t// \tdrop: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t// \t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t// \t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t// \t},\n\t\t\t// } );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main content view for our actions.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/mainContent',['views/actions/actionItem', 'views/actions/mainContentEmpty'], function( actionView, emptyView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttemplate: '#tmpl-nf-action-table',\n\t\tchildView: actionView,\n\t\temptyView: emptyView,\n\n\t\tonRender: function() {\n\t\t\tjQuery( this.el ).droppable( {\n\t\t\t\taccept: '.nf-action-type-draggable',\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'drop:actionType', e, ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tif ( 'undefined' == typeof nfRadio.channel( 'actions' ).request( 'get:type', childView.model.get( 'type' ) ) ) return;\n\t\t\t\n\t\t\tjQuery( collectionView.el ).find( 'tbody' ).append( childView.el );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/mainHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-header-settings'\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-settings'\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/settingItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-form-setting-type',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:editActive', this.updateActiveClass );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:editActive', this.updateActiveClass, this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click': 'clickEdit'\n\t\t},\n\n\t\tclickEdit: function( e ) {\n\t\t\tnfRadio.channel( 'settings' ).trigger( 'click:edit', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-setting-wrap ' + this.id;\n\t    \t\t\tif ( this.editActive ) {\n\t    \t\t\t\tclasses += ' active';\n\t    \t\t\t}\n\t    \t\t\treturn classes;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateActiveClass: function() {\n\t\t\tif ( this.model.get( 'editActive' ) ) {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).addClass( 'active' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).removeClass( 'active' );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/mainContent',['views/advanced/settingItem'], function( settingItem ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\tchildView: settingItem\n\t\t\n\t});\n\n\treturn view;\n} );\n","/**\n * Model that represents our form fields.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/fieldModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Field',\n\t\t\tobjectDomain: 'fields',\n\t\t\teditActive: false,\n\t\t\torder: 999\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tif ( 'undefined' == typeof this.get( 'type' ) ) return;\n\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.on( 'change', this.changeSetting, this );\n\n\t\t\t// Get our parent field type.\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', this.get( 'type' ) );\n\t\t\tvar parentType = fieldType.get( 'parentType' );\n\n\t\t\t// Loop through our field type \"settingDefaults\" and add any default settings.\n\t\t\t_.each( fieldType.get( 'settingDefaults' ), function( val, key ) {\n\t\t\t\tif ( 'undefined' == typeof this.get( key ) ) {\n\t\t\t\t\tthis.set( key, val, { silent: true } );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t/*\n\t\t\t * Trigger an init event on three channels:\n\t\t\t * \n\t\t\t * fields\n\t\t\t * fields-parentType\n\t\t\t * field-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:fieldModel', this );\n\t\t\tnfRadio.channel( 'fields-' + parentType ).trigger( 'init:fieldModel', this );\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'init:fieldModel', this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * Fires an event on the fieldSetting-{name} channel saying we've updated a setting.\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options ) {\n\t\t\tnfRadio.channel( 'fieldSetting-' + _.keys( model.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'update:setting', this, options.settingModel );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field models. \n * This is the actual field data created by the user.\n *\n * We listen to the add and remove events so that we can push the new id to either the new fields or removed fields property.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/fieldCollection',['models/fields/fieldModel'], function( fieldModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: fieldModel,\n\t\tcomparator: 'order',\n\t\ttmpNum: 1,\n\n\t\tinitialize: function() {\n\t\t\tthis.on( 'add', this.addField, this );\n\t\t\tthis.on( 'remove', this.removeField, this );\n\n\t\t\tthis.listenTo( this, 'add:field', this.addNewField );\n\t\t\tthis.listenTo( this, 'append:field', this.appendNewField );\n\t\t\tthis.listenTo( this, 'remove:field', this.removeFieldResponse );\n\t\t\tthis.newIDs = [];\n\t\t},\n\n\t\t/**\n\t\t * When we add a field, push the id onto our new fields property.\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\taddField: function( model ) {\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * When we remove a field, push the id onto our removed fields property.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\tremoveField: function( model ) {\n\t\t\tthis.removedIDs = this.removedIDs || {};\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\n\t\t},\n\n\t\taddNewField: function( model ) {\n\t\t\tthis.add( model );\n\t\t},\n\n\t\tappendNewField: function( model ) {\n\t\t\tif ( 0 == this.length ) {\n\t\t\t\tvar order = 0;\n\t\t\t} else {\n\t\t\t\tvar order = this.at( this.length -1 ).get( 'order' ) + 1;\t\n\t\t\t}\n\t\t\t\n\t\t\tmodel.set( 'order', order, { silent: true } );\n\t\t\tthis.add( model );\n\t\t},\n\n\t\tremoveFieldResponse: function( model ) {\n\t\t\tthis.remove( model );\n\t\t},\n\n\t\tfieldExists: function( fieldModel ) {\n\t\t\treturn -1 != this.indexOf( fieldModel );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Config file for our app domains.\n * \n * this.collection represents all of our app domain (fields, actions, settings) information.\n *\n * This doesn't store the current domain, but rather all the data about each.\n * \n * This data includes:\n * hotkeys\n * header view\n * subheader view\n * content view\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/domainConfig',[\n\t// Require our domain collection\n\t'models/app/domainCollection',\n\t// Require our fields domain files\n\t'views/fields/subHeader',\n\t'views/fields/mainContentFieldCollection',\n\t'views/fields/drawer/settingsTitle',\n\t// Require our actions domain files\n\t'views/actions/mainHeader', \n\t'views/actions/subHeader',\n\t'views/actions/mainContent',\n\t// Require our settings domain files\n\t'views/advanced/mainHeader',\n\t'views/advanced/subHeader',\n\t'views/advanced/mainContent',\n\t// Empty View\n\t'views/app/empty',\n\t// FieldCollection: used by the default formContentData filter\n\t'models/fields/fieldCollection'\n\t], \n\tfunction( \n\t\tappDomainCollection,\n\t\tfieldsSubHeaderView,\n\t\tFieldsMainContentFieldCollectionView,\n\t\tfieldsSettingsTitleView,\n\t\tactionsMainHeaderView,\n\t\tactionsSubHeaderView,\n\t\tactionsMainContentView,\n\t\tsettingsMainHeaderView,\n\t\tsettingsSubHeaderView,\n\t\tsettingsMainContentView,\n\t\tEmptyView,\n\t\tFieldCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Add our default formContentView filter.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.defaultFormContentView, 10, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * Add our default formContentData filter.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.defaultFormContentLoad, 10, this );\n\n\t\t\t/*\n\t\t\t * Add our default formContentGutterView filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:leftFilter', this.defaultFormContentGutterView, 10, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:rightFilter', this.defaultFormContentGutterView, 10, this );\n\n\t\t\t// Define our app domains\n\t\t\tthis.collection = new appDomainCollection( [\n\t\t\t\t{\n\t\t\t\t\tid: 'fields',\n\t\t\t\t\tnicename: nfi18n.domainFormFields,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newField',\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-menu',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new fieldsSubHeaderView();\n\t\t\t\t\t},\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Get the formContent view that should be used in our builder.\n\t\t\t\t\t * Uses two filters:\n\t\t\t\t\t * 1) One for our formContentData\n\t\t\t\t\t * 2) One for our formContentView\n\t\t\t\t\t *\n\t\t\t\t\t * If we don't have any view filters, we use the default formContentView.\n\t\t\t\t\t * \n\t\t\t\t\t * @since  3.0\n\t\t\t\t\t * @return formContentView backbone view.\n\t\t\t\t\t */\n\t\t\t\t\tgetMainContentView: function( collection ) {\n\t\t\t\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\n\t\t\t\t\t\t * If we don't have this setting, then we check for this deprecated value.\n\t\t\t\t\t\t * \n\t\t\t\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * TODO: Remove this backwards compatibility eventually.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( ! formContentData ) {\n\t\t\t\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If we don't have a filter for our formContentData, default to fieldCollection.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tformContentData = callback( formContentData, nfRadio.channel( 'app' ).request( 'get:formModel' ), true );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tformContentView = callback();\n\n\t\t\t\t\t\tnfRadio.channel( 'settings' ).request( 'update:setting', 'formContentData', formContentData, true );\n\t\t\t\t\t\treturn new formContentView( { collection: formContentData } );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetSettingsTitleView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If we are dealing with a field model, return the fields settings view, otherwise, return the default.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( 'fields' == data.model.get( 'objectDomain' ) ) {\n\t\t\t\t\t\t\treturn new fieldsSettingsTitleView( data );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.get( 'getDefaultSettingsTitleView' ).call( this, data );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t},\n\n\t\t\t\t\tgetGutterLeftView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:leftFilters' );\n\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tgutterView = callback();\n\n\t\t\t\t\t\treturn new gutterView(); \n\t\t\t\t\t},\n\n\t\t\t\t\tgetGutterRightView: function() {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:rightFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tgutterView = callback();\n\n\t\t\t\t\t\treturn new gutterView(); \n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'actions',\n\t\t\t\t\tnicename: nfi18n.domainActions,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newAction',\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-external',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new actionsSubHeaderView();\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tgetMainContentView: function() {\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\t\t\t\treturn new actionsMainContentView( { collection: collection } );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'settings',\n\t\t\t\t\tnicename: nfi18n.domainAdvanced,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-admin-generic',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new settingsSubHeaderView();\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tgetMainContentView: function() {\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\n\t\t\t\t\t\treturn new settingsMainContentView( { collection: collection } );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'preview',\n\t\t\t\t\tnicename: 'Preview Form',\n\t\t\t\t\tclasses: 'preview',\n\t\t\t\t\tdashicons: 'dashicons-visibility',\n\t\t\t\t\tmobileDashicon: 'dashicons-visibility',\n\t\t\t\t\turl: nfAdmin.previewurl\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\t/*\n\t\t\t * Send out a radio message with our domain config collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:domainCollection', this.collection );\n\n\t\t\t/*\n\t\t\t * Respond to requests to get the app domain collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainCollection', this.getDomainCollection, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainModel', this.getDomainModel, this );\n\t\t},\n\n\t\tgetDomainCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetDomainModel: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\tdefaultFormContentView: function( formContentData ) {\n\t\t\treturn FieldsMainContentFieldCollectionView;\n\t\t},\n\n\t\tdefaultFormContentLoad: function( formContentData ) {\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t/*\n\t\t\t * If we only have one load filter, we can just return the field collection.\n\t\t\t */\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\n\t\t\tif ( 1 == sortedArray.length || 'undefined' == typeof formContentData || true === formContentData instanceof Backbone.Collection ) return fieldCollection;\n\n\t\t\t/*\n\t\t\t * If another filter is registered, we are calling this from somewhere else.\n\t\t\t */\n\n        \tvar fieldModels = _.map( formContentData, function( key ) {\n        \t\treturn fieldCollection.findWhere( { key: key } );\n        \t}, this );\n\n        \treturn new FieldCollection( fieldModels );\n\t\t},\n\n\t\tdefaultFormContentGutterView: function( formContentData ) {\n\t\t\treturn EmptyView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our app data.\n * Listens for changes to the 'clean' attribute and triggers a radio message when the state changes.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/appModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tloading: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes to our 'clean' attribute.\n\t\t\tthis.on( 'change:clean', this.changeStatus, this );\n\t\t},\n\n\t\tchangeStatus: function() {\n\t\t\t// Send out a radio message when the 'clean' attribute changes.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:clean', this.get( 'clean' ) );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Creates and stores a model that represents app-wide data. i.e. current domain, current drawer, clean, etc.\n *\n * clean is a boolean that represents whether or not changes have been made.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/data',['models/app/appModel'], function( appModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Get the collection that represents all the parts of our application.\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\t// Setup our initial model.\n\t\t\tthis.model = new appModel( {\n\t\t\t\tcurrentDrawer: false,\n\t\t\t\tcurrentDomain: appDomainCollection.get( 'fields' ),\n\t\t\t\tclean: true\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Set the mobile setting used to track whether or not we're on a mobile device.\n\t\t\t */\n\t\t\tvar mobile = ( 1 == nfAdmin.mobile ) ? true : false;\n\t\t\tthis.model.set( 'mobile', mobile );\n\n\t\t\t/*\n\t\t\t * Respond to requests to see if we are on mobile.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'is:mobile', this.isMobile, this );\n\n\t\t\t/*\n\t\t\t * Respond to app channel requests for information about the state of our app.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:data', this.getData, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:setting', this.getSetting, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDomain', this.getCurrentDomain, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDrawer', this.getCurrentDrawer, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:current', this.getCurrentDrawer, this );\n\n\t\t\t/*\n\t\t\t * Respond to app channel requests to update app settings.\n\t\t\t */\t\t\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDomain', this.updateCurrentDomain, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDrawer', this.updateCurrentDrawer, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:setting', this.updateSetting, this );\n\n\t\t},\n\n\t\tupdateCurrentDomain: function( model ) {\n\t\t\tthis.updateSetting( 'currentDomain', model );\n\t\t},\n\n\t\tupdateSetting: function( setting, value ) {\n\t\t\tthis.model.set( setting, value );\n\t\t\treturn true;\n\t\t},\n\n\t\tgetSetting: function( setting ) {\n\t\t\treturn this.model.get( setting );\n\t\t},\n\n\t\tgetData: function() {\n\t\t\treturn this.model;\n\t\t},\n\n\t\tgetCurrentDomain: function() {\n\t\t\treturn this.model.get( 'currentDomain' );\n\t\t},\n\n\t\tupdateCurrentDrawer: function( drawerID ) {\n\t\t\tthis.updateSetting( 'currentDrawer', drawerID );\n\t\t\treturn true;\n\t\t},\n\n\t\tgetCurrentDrawer: function() {\n\t\t\tvar currentDrawerID = this.model.get( 'currentDrawer' );\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:drawer', currentDrawerID );\n\t\t},\n\n\t\tisMobile: function() {\n\t\t\treturn this.model.get( 'mobile' );\n\t\t}\n\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for click events to expand/collapse setting groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawerToggleSettingGroup',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for click events on our settings group.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:toggleSettingGroup', this.toggleSettingGroup );\n\t\t},\n\n\t\t/**\n\t\t * Set the 'display' attribute of our group model to true or false to toggle.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \tgroup setting model\n\t\t * @return void\n\t\t */\n\t\ttoggleSettingGroup: function( e, model ) {\n\t\t\tif ( model.get( 'display' ) ) {\n\t\t\t\t/*\n\t\t\t\t * Make sure that none of our settings have errors\n\t\t\t\t */\n\t\t\t\tvar errors = false;\n\t\t\t\t_.each( model.get( 'settings' ).models, function( setting ) {\n\t\t\t\t\tif ( setting.get( 'error' ) ) {\n\t\t\t\t\t\terrors = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( ! errors ) {\n\t\t\t\t\tmodel.set( 'display', false );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmodel.set( 'display', true );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Updates our database with our form data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/updateDB',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the closing of the drawer and update when it's closed.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.updateDB );\n\t\t\t// Respond to requests to update the database.\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:db', this.updateDB, this );\n\t\t\t/*\n\t\t\t * Register our default formContent save filter.\n\t\t\t * This converts our collection into an array of keys.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:saveFilter', this.defaultSaveFilter, 10, this );\n\t\t},\n\n\t\t/**\n\t\t * Update our database.\n\t\t * If action isn't specified, assume we're updating the preview.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \taction preview or publish\n\t\t * @return void\n\t\t */\n\t\tupdateDB: function( action ) {\n\t\t\t// If our app is clean, dont' update.\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Default action to preview.\n\t\t\taction = action || 'preview';\n\n\t\t\t// Setup our ajax actions based on the action we're performing\n\t\t\tif ( 'preview' == action ) {\n\t\t\t\tvar jsAction = 'nf_preview_update';\n\t\t\t} else if ( 'publish' == action ) {\n\t\t\t\tvar jsAction = 'nf_save_form';\n\t\t\t}\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n\t\t\t/*\n\t\t\t * There are pieces of data that are only needed for the builder and not for the front-end.\n\t\t\t * We need to unset those.\n\t\t\t * TODO: Make this more dynamic/filterable.\n\t\t\t */\n\t\t\t_.each( formModel.get( 'fields' ).models, function( fieldModel, index ) {\n\t\t\t\tfieldModel.unset( 'jBox', { silent: true } );\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * The main content of our form is called the formContent.\n\t\t\t * In this next section, we check to see if any add-ons want to modify that contents before we save.\n\t\t\t * If there aren't any filters found, we default to the field collection.\n\t\t\t * \n\t\t\t */\n\t\t\t\n\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\n\t\t\t/*\n\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\n\t\t\t * If we don't have this setting, then we check for this deprecated value.\n\t\t\t * \n\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\n\t\t\t *\n\t\t\t * TODO: Remove this backwards compatibility eventually.\n\t\t\t */\n\t\t\tif ( ! formContentData ) {\n\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\n\t\t\t}\n\n\t\t\tvar formContentSaveDataFilters = nfRadio.channel( 'formContent' ).request( 'get:saveFilters' );\n\t\t\t\t\t\t\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentSaveDataFilters, undefined );\n\t\t\tvar callback = _.first( sortedArray );\n\t\t\t/*\n\t\t\t * Set our formContentData to the callback specified in the filter, passing our current formContentData.\n\t\t\t */\n\t\t\tformContentData = callback( formContentData );\n\t\t\t\n\t\t\tif ( 'publish' == action && formModel.get( 'show_publish_options' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'newForm' );\n\t\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\t\tjQuery( builderEl ).addClass( 'disable-main' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Get our form data\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n\t\t\t// Turn our formData model into an object\n\t\t\tvar data = JSON.parse( JSON.stringify( formData ) );\n\t\t\tdata.settings.formContentData = formContentData;\n\t\t\t/**\n\t\t\t * Prepare fields for submission.\n\t\t\t */\n\t\t\t\n\t\t\t// Get the field IDs that we've deleted.\n\t\t\tvar removedIDs = formData.get( 'fields' ).removedIDs;\n\n\t\t\t/*\n\t\t\t * data.fields is an array of objects like:\n\t\t\t * field.label = blah\n\t\t\t * field.label_pos = blah\n\t\t\t * etc.\n\t\t\t *\n\t\t\t * And we need that format to be:\n\t\t\t * field.settings.label = blah\n\t\t\t * field.settings.label_pos = blah\n\t\t\t *\n\t\t\t * So, we loop through our fields and create a field.settings object.\n\t\t\t */\n\t\t\t_.each( data.fields, function( field ) {\n\t\t\t\tvar id = field.id;\n\t\t\t\t// We dont' want to update id or parent_id\n\t\t\t\tdelete field.id;\n\t\t\t\tdelete field.parent_id;\n\t\t\t\tvar settings = {};\n\t\t\t\t// Loop through all the attributes of our fields\n\t\t\t\tfor (var prop in field) {\n\t\t\t\t    if ( field.hasOwnProperty( prop ) ) {\n\t\t\t\t    \t// Set our settings.prop value.\n\t\t\t\t        settings[ prop ] = field[ prop ];\n\t\t\t\t        // Delete the property from the field.\n\t\t\t\t        delete field[ prop ];\n\t\t\t\t    }\n\t\t\t\t}\n\n\t\t\t\tfor( var setting in settings ){\n\t\t\t\t\tif( null === settings[ setting ] || '' == settings[ setting ] ) {\n\t\t\t\t\t\tdelete settings[setting];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update our field object.\n\t\t\t\tfield.settings = settings;\n\t\t\t\tfield.id = id;\n\t\t\t} );\n\n\t\t\t// Set our deleted_fields object so that we can know which fields were removed.\n\t\t\tdata.deleted_fields = removedIDs;\n\n\t\t\t/**\n\t\t\t * Prepare actions for submission.\n\t\t\t */\n\t\t\t\n\t\t\t// Get the action IDs that we've deleted.\n\t\t\tvar removedIDs = formData.get( 'actions' ).removedIDs;\n\n\t\t\t/*\n\t\t\t * data.actions is an array of objects like:\n\t\t\t * action.label = blah\n\t\t\t * action.label_pos = blah\n\t\t\t * etc.\n\t\t\t *\n\t\t\t * And we need that format to be:\n\t\t\t * action.settings.label = blah\n\t\t\t * action.settings.label_pos = blah\n\t\t\t *\n\t\t\t * So, we loop through our actions and create a field.settings object.\n\t\t\t */\n\t\t\t_.each( data.actions, function( action ) {\n\t\t\t\tvar id = action.id;\n\t\t\t\t// We dont' want to update id or parent_id\n\t\t\t\tdelete action.id;\n\t\t\t\tdelete action.parent_id;\n\t\t\t\tvar settings = {};\n\t\t\t\t// Loop through all the attributes of our actions\n\t\t\t\tfor (var prop in action) {\n\t\t\t\t    if ( action.hasOwnProperty( prop ) ) {\n\t\t\t\t    \t// Set our settings.prop value.\n\t\t\t\t        settings[ prop ] = action[ prop ];\n\t\t\t\t        // Delete the property from the action.\n\t\t\t\t        delete action[ prop ];\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t// Update our action object.\n\t\t\t\taction.settings = settings;\n\t\t\t\taction.id = id;\n\t\t\t} );\n\n\t\t\t// Set our deleted_actions object so that we can know which actions were removed.\n\t\t\tdata.deleted_actions = removedIDs;\n\n\t\t\t// Turn our object into a JSON string.\n\t\t\tdata = JSON.stringify( data );\n\t\t\t// Run anything that needs to happen before we update.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:updateDB', data );\n\n\t\t\tif ( 'publish' == action ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', true );\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\t\n\n\t\t\t\t// If we're on mobile, show a notice that we're publishing\n\t\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'publishing', 'Your Changes Are Being Published', { autoClose: false } );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update\n\t\t\tjQuery.post( ajaxurl, { action: jsAction, form: data, security: nfAdmin.ajaxNonce }, function( response ) {\n\t\t\t\ttry {\n\t\t\t\t\tresponse = JSON.parse( response );\n\t\t\t\t\tresponse.action = action;\n\t\t\t\t\t// Run anything that needs to happen after we update.\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'response:updateDB', response );\n\t\t\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) && 'preview' == action ) {\n\t\t\t\t\t\t// nfRadio.channel( 'notices' ).request( 'add', 'previewUpdate', 'Preview Updated'\t);\n\t\t\t\t\t}\n\t\t\t\t} catch( exception ) {\n\t\t\t\t\tconsole.log( 'Something went wrong!' );\n\t\t\t\t\tconsole.log( exception );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} );\n\t\t},\n\n\t\tdefaultSaveFilter: function( formContentData ) {\n\t\t\treturn formContentData.pluck( 'key' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our form data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/formModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\tif ( ! jQuery.isNumeric( this.get( 'id' ) ) ) {\n\t\t\t\tthis.set( 'show_publish_options', true, { silent: true } );\n\t\t\t} else {\n\t\t\t\tthis.set( 'show_publish_options', false, { silent: true } );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Stores our form data and responds to requests for it.\n * Form data stores fields, actions, and settings.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formData',['models/app/formModel'], function( formModel) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Instantiate Form Model\n\t\t\tthis.model = new formModel( { id: preloadedFormData.id } );\n\t\t\t// Set our field collection\n\t\t\tthis.model.set( 'fields', nfRadio.channel( 'fields' ).request( 'get:collection' ) );\n\t\t\t// Set our actions collection\n\t\t\tthis.model.set( 'actions', nfRadio.channel( 'actions' ).request( 'get:collection' ) );\n\t\t\t// Set our settings collection\n\t\t\tthis.model.set( 'settings', nfRadio.channel( 'settings' ).request( 'get:settings' ) );\n\t\t\t// Respond to requests for form data.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:formModel', this.getFormModel, this );\n\t\t},\n\n\t\t/**\n\t\t * Return form data model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return backbone.model\n\t\t */\n\t\tgetFormModel: function() {\n\t\t\treturn this.model;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles changing our preview link when we change the 'clean' state of our app.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/previewLink',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for events that would change our preview link\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:sendChanges', this.disablePreview, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:sendChanges', this.enablePreview, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.changePreviewNicename, this );\n\t\t},\n\n\t\t/**\n\t\t * Disable our preview link before we send data to update our preview.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tdisablePreview: function() {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\t\t\t// Set disabled to true. This will trigger the preview link view to redraw.\n\t\t\tpreview.set( 'disabled', true );\n\t\t},\n\n\t\t/**\n\t\t * Change the preview link text from \"Preview Form\" to \"Preview Changes\" or vice-versa\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  boolean \tclean app data state\n\t\t * @return void\n\t\t */\n\t\tchangePreviewNicename: function( clean ) {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\n\t\t\t// If we have unsaved changes, set our text to 'changes' otherwise, set it to 'form'\n\t\t\tif ( ! clean ) {\n\t\t\t\tvar nicename = 'Preview Changes';\n\t\t\t} else {\n\t\t\t\tvar nicename = 'Preview Form';\n\t\t\t}\n\n\t\t\tpreview.set( 'nicename', nicename );\n\t\t},\n\n\t\t/**\n\t\t * Enable our preview button.\n\t\t * This is triggered when we get a response from our preview update.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tenablePreview: function() {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\t\t\t// Set disabled to false. This will trigger the preview link view to redraw.\n\t\t\tpreview.set( 'disabled', false );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for requests to change the current domain.\n *\n * The app menu and the main submenu both contain clickable links that change the current domain.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/menuButtons',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:publish', this.publish );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:viewChanges', this.viewChanges );\n\t\t},\n\n\t\tpublish: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\n\t\t},\n\n\t\tviewChanges: function() {\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'viewChanges', { collection: changeCollection } );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our change data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/changeModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdisabled: false\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Holds all of our change models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/changeCollection',['models/app/changeModel'], function( domainModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: domainModel,\n\n\t\tcomparator: function( model ) {\n\t\t\tvar id = parseInt( model.cid.replace( 'c', '' ) );\n\t\t\treturn -id;\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Track settings changes across our app.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/trackChanges',['models/app/changeCollection', 'models/app/changeModel'], function( changeCollection, ChangeModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new changeCollection();\n\t\t\t// Respond to any requests to add a change directly.\n\t\t\tnfRadio.channel( 'changes' ).reply( 'register:change', this.registerChange, this );\n\t\t\t// Respond to requests for the change collection\n\t\t\tnfRadio.channel( 'changes' ).reply( 'get:collection', this.getCollection, this );\n\t\t\t// Listen for changes in our clean state. If it goes to clean, clear our collection.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.maybeResetCollection );\n\t\t},\n\n\t\tregisterChange: function( action, model, changes, label, data ) {\n\t\t\tvar data = typeof data !== 'undefined' ? data : {};\n\t\t\tif ( 'undefined' == typeof label.dashicon ) {\n\t\t\t\tlabel.dashicon = 'admin-generic';\n\t\t\t}\n\t\t\tvar changeModel = new ChangeModel({\n\t\t\t\taction: action,\n\t\t\t\tmodel: model,\n\t\t\t\tchanges: changes,\n\t\t\t\tlabel: label,\n\t\t\t\tdata: data\t\t\n\t\t\t} );\n\t\t\tthis.collection.add( changeModel );\n\t\t\treturn changeModel;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tmaybeResetCollection: function( clean ) {\n\t\t\tif ( clean ) {\n\t\t\t\tthis.collection.reset();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'controllers/app/undoChanges',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoChanges', this.undoChanges, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoSingle', this.undoSingle, this );\n\t\t},\n\n\t\tundoChanges: function() {\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tchangeCollection.sort();\n\t\t\tvar that = this;\n\t\t\t_.each( changeCollection.models, function( change ) {\n\t\t\t\tthat.undoSingle( change, true );\n\t\t\t} );\n\t\t\tchangeCollection.reset();\n\t\t\t// Update preview.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t},\n\n\t\tundoSingle: function( change, undoAll ) {\n\t\t\tnfRadio.channel( 'changes' ).request( 'undo:' + change.get( 'action' ), change, undoAll );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for our update:db response and replaces tmp ids with new ids if we were performing the publish action.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/publishResponse',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our app channel for the updateDB response.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.publishResponse );\n\t\t},\n\n\t\tpublishResponse: function( response ) {\n\t\t\t// If we aren't performing a publish action, bail.\n\t\t\tif ( 'publish' !== response.action ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// Check to see if we have any new ids. \n\t\t\tif ( 'undefined' != typeof response.data.new_ids ) {\n\n\t\t\t\t// If we have any new fields, update their models with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.fields ) {\n\t\t\t\t\t_.each( response.data.new_ids.fields, function( newID, oldID ) {\n\t\t\t\t\t\tvar field = nfRadio.channel( 'fields' ).request( 'get:field', oldID );\n\t\t\t\t\t\tif ( field ) {\n\t\t\t\t\t\t\tfield.set( 'id', newID );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we have any new actions, update their models with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.actions ) {\n\t\t\t\t\t_.each( response.data.new_ids.actions, function( newID, oldID ) {\n\t\t\t\t\t\tvar action = nfRadio.channel( 'actions' ).request( 'get:action', oldID );\n\t\t\t\t\t\tif ( action ) {\n\t\t\t\t\t\t\taction.set( 'id', newID );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we have a new form id, update the model with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.forms ) {\n\t\t\t\t\t_.each( response.data.new_ids.forms, function( newID, oldID ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\tformModel.set( 'id', newID );\n\t\t\t\t\t\thistory.replaceState( '', '', 'admin.php?page=ninja-forms&form_id=' + newID );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', false );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\n\n\t\t\t// If we're on mobile, show a notice that we're publishing\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'close', 'publishing' );\n\t\t\t}\n\t\t\t// Add a notice that we've published.\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'published', 'Changes Published' );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'app:published', response );\n\n\t\t\t// Mark our app as clean. This will disable the publish button and fire anything else that cares about the state.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t}\n\t\t\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for requests to change the current domain.\n *\n * The app menu and the main submenu both contain clickable links that change the current domain.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeDomain',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for both menu and submenu clicks.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.changeAppDomain );\n\t\t\t// Reply to specific requests to change the domain\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:currentDomain', this.changeAppDomain, this );\n\n\t\t\t// Reply to requests to prevent our drawer from closing\n\t\t\tnfRadio.channel( 'app' ).reply( 'prevent:changeDomain', this.preventChange, this );\n\t\t\t// Reply to requests to enable drawer closing\n\t\t\tnfRadio.channel( 'app' ).reply( 'enable:changeDomain', this.enableChange, this );\n\n\t\t\t/*\n\t\t\t * Object that holds our array of 'prevent change' values.\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\n\t\t\t */\n\t\t\tthis.objPreventChange = {};\n\t\t},\n\n\t\tchangeAppDomain: function( e, model ) {\n\t\t\t/*\n\t\t\t * If we have disabled movement between domains, return false.\n\t\t\t */\n\t\t\tif ( this.maybePreventChange() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If we are passed a model, use that model.\n\t\t\t * Otherwise, get the domain from the event target data.\n\t\t\t */ \n\t\t\tif ( 'undefined' == typeof model ) {\n\t\t\t\tvar domainID = jQuery( e.target ).data( 'domain' );\n\t\t\t\tvar model = nfRadio.channel( 'app' ).request( 'get:domainModel', domainID );\n\t\t\t}\n\t\t\t// If a drawer is open, close it.\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t\t/*\n\t\t\t * If we aren't dealing with an external url (such as preview), update our app data\n\t\t\t * and trigger a radio message saying we've changed the domain.\n\t\t\t */ \n\t\t\tif ( 0 == model.get( 'url' ).length ) {\n\t\t\t\tvar mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:currentDomain', model );\n\t\t\t\tjQuery( mainEl ).scrollTop( 0 );\t\t\t\t\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:currentDomain', model );\n\t\t\t}\n\t\t},\n\n\t\t/**\n         * Check to see if anything has registered a key to prevent changing the domain.\n         * \n         * @since  3.0\n         * @return boolean\n         */\n        maybePreventChange: function() {\n        \tif ( 0 == Object.keys( this.objPreventChange ).length ) {\n        \t\treturn false;\n        \t} else {\n        \t\treturn true;\n        \t}\n        },\n\n        /**\n         * Register a key to prevent changing the domain.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\n         * @return void\n         */\n        preventChange: function( key ) {\n        \tthis.objPreventChange[ key ] = true;\n        },\n\n        /**\n         * Remove a previously registered key that is preventing our domain from changing.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\n         * @return void\n         */\n        enableChange: function( key ) {\n        \tdelete this.objPreventChange[ key ];\n        },\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Modify the user's browser history when they click on a domain\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/pushstate',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changePushState );\n\t\t},\n\n\t\tchangePushState: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\thistory.pushState( null, null, window.location.href + '&domain=' + currentDomain.get( 'id' ) );\n\t\t\tvar reExp = /domain=\\\\d+/;\n\t\t\tvar url = window.location.toString();\n\t\t\tvar newUrl = url.replace( reExp, '' );\n\t\t\tconsole.log( newUrl );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles our hotkey execution. Needs to be cleaned up and made more programmatic.\n * \n * Our hotkeys are defined by the domain that we're currently viewing. In each domain's model, there is a hotkey object.\n * \n * Currently too much hotkey data is hard-coded here.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/hotkeys',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When we change our domain, change the hotkeys to those within that object.\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'render:main', this.changeHotkeys );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.changeHotkeys );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', this.changeHotkeys );\n\t\t\t// Currently, these are the functions that run when the new field or new action hotkey is pressed.\n\t\t\t// TODO: move these into a config module or into something more programmatic and scalable.\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newField', this.addNewField );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newAction', this.addNewAction );\n\t\t\t// Same as above, these functions need to be moved into a more modular/programmatic solution.\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:fields', this.changeDomainFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:actions', this.changeDomainActions );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:settings', this.changeDomainSettings );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'close:drawer', this.closeDrawer );\n\t\t},\n\n\t\tchangeHotkeys: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tjQuery( document ).off( '.nfDomainHotkeys' );\n\t\t\tjQuery( 'input' ).off( '.nfDomainHotkeys' );\n\t\t\tif ( currentDomain.get( 'hotkeys' ) ) {\n\t\t\t\tjQuery.each( currentDomain.get( 'hotkeys' ), function( hotkey, msg ) {\n\t\t\t\t\tjQuery( document ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery( 'input' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery( 'textarea' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\taddNewField: function() {\n\t\t\tif ( 'addField' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\taddNewAction: function() {\n\t\t\tif ( 'addAction' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addAction' );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t},\n\n\t\tchangeDomainFields: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar fieldsDomain = appDomainCollection.get( 'fields' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, fieldsDomain );\n\t\t},\n\n\t\tchangeDomainActions: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar actionsDomain = appDomainCollection.get( 'actions' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, actionsDomain );\n\t\t},\n\n\t\tchangeDomainSettings: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar settingsDomain = appDomainCollection.get( 'settings' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, settingsDomain );\n\t\t},\n\n\t\tcloseDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Change the clean state of our app when settings are changed.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cleanState',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Set an array of field model attributes to ignore.\n\t\t\t * This list will be filtered just before we ignore anything.\n\t\t\t */ \n\t\t\tthis.ignoreAttributes = [\n\t\t\t\t'editActive'\n\t\t\t];\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:setting', this.setAppClean );\n\t\t},\n\n\t\tsetAppClean: function( model ) {\n\t\t\tfor( var attr in model.changedAttributes() ) {\n\t\t\t\tvar changedAttr = attr;\n\t\t\t\tvar after = model.changedAttributes()[ attr ];\n\t\t\t}\n\n\t\t\tvar ignoreAttributes = nfRadio.channel( 'undo-' + model.get( 'type' ) ).request( 'ignore:attributes', this.ignoreAttributes ) || this.ignoreAttributes;\n\t\t\t\n\t\t\tif ( -1 != this.ignoreAttributes.indexOf( attr ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * All of the core undo functions. Listens on the 'changes' channel for an undo request.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/coreUndo',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:changeSetting', this.undoChangeSetting, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addObject', this.undoAddObject, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeObject', this.undoRemoveObject, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:duplicateObject', this.undoDuplicateObject, this );\n\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortFields', this.undoSortFields, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addListOption', this.undoAddListOption, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeListOption', this.undoRemoveListOption, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortListOptions', this.undoSortListOptions, this );\n\t\t},\n\n\t\t/**\n\t\t * Undo settings that have been changed.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoChangeSetting: function( change, undoAll ) {\n\t\t\tvar fieldModel = change.get( 'model' );\n\t\t\tvar changes = change.get( 'changes' );\n\t\t\tvar attr = changes.attr;\n\t\t\tvar before = changes.before;\n\t\t\tfieldModel.set( attr, before );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo adding a field or an action.\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoAddObject: function( change, undoAll ) {\n\t\t\tvar objectModel = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\n\t\t\tif ( 'undefined' != typeof collection.newIDs ) {\n\t\t\t\tdelete collection.newIDs[ objectModel.get( 'id' ) ];\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( model );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcollection.remove( objectModel );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\t\t\n\n\t\t/**\n\t\t * Undo adding a field or an action.\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoDuplicateObject: function( change, undoAll ) {\n\t\t\tvar objectModel = change.get( 'model' );\n\t\t\tvar objectCollection = change.get( 'data' ).collection;\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( model );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tobjectCollection.remove( objectModel );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo removing a field or an action.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoRemoveObject: function( change, undoAll ) {\n\t\t\tvar dataModel = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\n\t\t\tnfRadio.channel( dataModel.get( 'objectDomain' ) ).request( 'add', dataModel );\n\n\t\t\tdelete collection.removedIDs[ dataModel.get( 'id' ) ];\n\t\t\t\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: dataModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tmodel.set( 'disabled', false );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\t// Trigger a reset on our field collection so that our view re-renders\n\t\t\tcollection.trigger( 'reset', collection );\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo field sorting.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoSortFields: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar fields = data.fields;\n\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields, function( changeModel ) {\n\t\t\t\tvar before = changeModel.before;\n\t\t\t\tvar fieldModel = changeModel.model;\n\t\t\t\tfieldModel.set( 'order', before );\n\t\t\t\t// console.log( 'set ' + fieldModel.get( 'label' ) + ' to ' + before );\n\t\t\t} );\n\t\t\t// console.log( fieldCollection.where( { label: 'Name' } ) );\n\t\t\t// console.log( fieldCollection.where( { label: 'Email' } ) );\n\n\n\t\t\tfieldCollection.sort();\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoAddListOption: function( change, undoAll ) {\n\t\t\tvar model = change.get( 'model' );\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\t\tif ( changeModel !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( changeModel );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\tmodel.collection.remove( model );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoRemoveListOption: function( change, undoAll ) {\n\t\t\tvar model = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\t\t\tcollection.add( model );\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tmodel.set( 'disabled', false );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoSortListOptions: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar collection = data.collection;\n\t\t\t\n\t\t\tvar objModels = data.objModels;\n\n\t\t\t_.each( objModels, function( changeModel ) {\n\t\t\t\tvar before = changeModel.before;\n\t\t\t\tvar optionModel = changeModel.model;\n\t\t\t\toptionModel.set( 'order', before );\n\t\t\t} );\t\t\t\t\n\n\n\t\t\tcollection.sort();\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * If our undo action was requested to 'remove' the change from the collection, remove it.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tremove \tshould we remove this item from our change collection\n\t\t * @return void\n\t\t */\n\t\tmaybeRemoveChange: function( change, undoAll ) {\t\t\t\n\t\t\tvar undoAll = typeof undoAll !== 'undefined' ? undoAll : false;\n\t\t\tif ( ! undoAll ) {\n\t\t\t\t// Update preview.\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tchangeCollection.remove( change );\n\t\t\t\tif ( 0 == changeCollection.length ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a clone of a backbone model with all the attributes looped through so that collections contained within are propely cloned.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cloneModelDeep',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:modelDeep', this.cloneModelDeep, this );\n\t\t},\n\n\t\tcloneModelDeep: function( model ) {\n\t\t\t// Temporary value used to store any new collections.\n\t\t\tvar replace = {};\n\t\t\t// Loop over every model attribute and if we find a collection, clone each model and instantiate a new collection.\n\t\t\t_.each( model.attributes, function( val, key ) {\n\t\t\t\tif( val instanceof Backbone.Collection ) { // Is this a backbone collection?\n\t\t\t\t\tvar clonedCollection = nfRadio.channel( 'app' ).request( 'clone:collectionDeep', val );\n\t\t\t\t\treplace[ key ] = clonedCollection;\n\t\t\t\t} else if ( val instanceof Backbone.Model ) { // Is this a backbone model?\n\t\t\t\t\treplace[ key ] = this.cloneModelDeep( val );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t// Clone our original model\n\t\t\tvar newModel = model.clone();\n\t\t\t// Overwrite any collections we created above.\n\t\t\t_.each( replace, function( val, key ) {\n\t\t\t\tnewModel.set( key, val );\n\t\t\t} );\n\n\t\t\treturn newModel;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns the appropriate child view for our settings drawer.\n *\n * This enables settings types to register custom childviews for their settings.\n * The option-repeater setting for the list field is an example.\n * \n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/getSettingChildView',['views/app/drawer/itemSetting'], function( itemSettingView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for field settings child views.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t},\n\n\t\t/**\n\t\t * Return the appropriate child setting view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  backbone.model\tmodel \tField setting\n\t\t * @return backbone.view\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\t// Get our setting type.\n\t\t\tvar type = model.get( 'type' );\n\t\t\t// Request a setting childview from our setting type channel. (Setting type, not field type)\n\t\t\tvar settingChildView = nfRadio.channel( type ).request( 'get:settingChildView', model ) || itemSettingView;\n\t\t\t\n\t\t\treturn settingChildView\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Updates our model when the user changes a setting.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeSettingDefault',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to update settings.\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:setting', this.changeSetting, this );\n\n\t\t\t// Listen on our app channel for the change setting event. Fired by the setting view.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.changeSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * When we change our setting, update the model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tsettingModel model that holds our field type settings info\n\t\t * @param  backbone.model \tdataModel       model that holds our field settings\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( e, settingModel, dataModel, value ) {\n\t\t\tvar name = settingModel.get( 'name' );\n\t\t\tvar before = dataModel.get( name );\n\t\t\tvar value = value || null;\n\t\t\tif ( ! value ) {\n\t\t\t\t// Sends out a request on the fields-type (fields-text, fields-checkbox, etc) channel to see if that field type needs to return a special value for saving.\n\t\t\t\tvalue = nfRadio.channel( settingModel.get( 'type' ) ).request( 'before:updateSetting', e, dataModel, name, settingModel );\n\t\t\t}\n\n\t\t\tif( 'undefined' == typeof value ){\n\t\t\t    value = jQuery( e.target ).val();\n            }\n\t\t\t\n\t\t\t// Update our field model with the new setting value.\n\t\t\tdataModel.set( name, value, { settingModel: settingModel } );\n\t\t\tnfRadio.channel( 'setting-' + name, 'after:updateSetting', dataModel, settingModel );\n\t\t\t// Register our setting change with our change tracker\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'views/app/drawer/typeSettingFieldset',['views/app/drawer/itemSetting'], function( itemSettingView ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\t\tchildView: itemSettingView,\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.collection = this.model.get( 'settings' );\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\t    \t\trenderSetting: function(){\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-field-sub-settings' ).append( childView.el );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Model that represents our setting.\n *\n * When the model is created, we trigger the init event in two radio channels.\n *\n * This lets specific types of settings modify the model before anything uses it.\n *\n * Fieldset, for instance, uses this hook to instantiate its settings as a collection.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tsettings: false,\n\t\t\thide_merge_tags: false,\n\t\t\terror: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Send out two messages saying that we've initialized a setting model.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:settingModel', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'init:settingModel', this );\n\t\t\tnfRadio.channel( 'setting-name-' + this.get( 'name' ) ).trigger( 'init:settingModel', this );\n\t\t\tthis.on( 'change:error', this.maybePreventUI, this );\n\n\t\t\t/*\n\t\t\t * If we have an objectType set on our collection, then we're creating a model for the generic settings collection.\n\t\t\t * If we're using merge tags in this setting\n\t\t\t */\n\n\t\t\tif( 'undefined' == typeof this.collection ) return;\n\n\t\t\tif ( this.get( 'use_merge_tags' ) && 'undefined' != typeof this.collection.options.objectType ) {\n\t\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', this.updateKey );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a field key is updated, send out a radio message requesting that this setting be checked for the old key.\n\t\t * We want to send the message on the objectType channel.\n\t\t * This means that if this setting is for fields, it will trigger on the fields channel, actions, etc.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model \tkeyModel data model representing the field for which the key just changed\n\t\t * @return void\n\t\t */\n\t\tupdateKey: function( keyModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'fire:updateFieldKey', keyModel, this );\n\t\t},\n\n\t\tmaybePreventUI: function() {\n\t\t\tif ( this.get( 'error' ) ) {\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'prevent:close', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'prevent:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\t\t\t\t\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'enable:close', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'enable:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collections of settings for each field type.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingCollection',['models/app/settingModel'], function( settingModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: settingModel,\n\n\t\tinitialize: function( models, options ) {\n\t\t\tthis.options = options || {};\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Handles actions related to field settings that use a fieldset\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/fieldset',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fieldset' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t// When a list type field is initialized, create an option collection.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldset' ), 'init:settingModel', this.createSettingsCollection );\n\t\t},\n\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn fieldsetView;\n\t\t},\n\n\t\t/**\n\t\t * Instantiate settings collection when a fieldset type is initialized.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tfield model being initialized\n\t\t * @return void\n\t\t */\n\t\tcreateSettingsCollection: function( model ) {\n\t\t\tmodel.set( 'settings', new settingCollection( model.get( 'settings' ) ) );\n\t\t},\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our toggle field.\n * When we change the toggle, the setting value will be 'on' or ''.\n * We need to change this to 1 or 0.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/toggleSetting',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-toggle' ).reply( 'renderOnChange', function(){ return false } );\n\n\t\t\t// Respond to requests for field setting filtering.\n\t\t\tnfRadio.channel( 'toggle' ).reply( 'before:updateSetting', this.updateSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * Return either 1 or 0, depending upon the toggle position.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tfieldModel       field model\n\t\t * @param  string \t\t\tname             setting name\n\t\t * @param  backbone.model \tsettingTypeModel field type model\n\t\t * @return int              1 or 0\n\t\t */\n\t\tupdateSetting: function( e, fieldModel, name, settingTypeModel ) {\n\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\n\t\t\t\tvar value = 1;\n\t\t\t} else {\n\t\t\t\tvar value = 0;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for clicks on our action item action buttons.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Main Sortable\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/itemControls',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for clicks to edit, delete, duplicate actions.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:edit', this.clickEdit );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:delete', this.clickDelete );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:duplicate', this.clickDuplicate );\n\n\t\t\t// Listen for our drawer close and remove our active edit state\n\t\t},\n\n\t\t/**\n\t\t * Open a drawer with our action model for editing settings.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickEdit: function( e, model ) {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\tvar type = nfRadio.channel( currentDomainID ).request( 'get:type' , model.get( 'type' ) );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: type.get( 'settingGroups' ) } );\n\t\t},\n\n\t\t/**\n\t\t * Delete a action model from our collection\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickDelete: function( e, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\n\n\t\t\t// Add our action deletion to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: dataModel.collection\n\t\t\t};\n\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: dataModel } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tvar data = changeModel.get( 'data' );\n\t\t\t\tif ( 'undefined' != typeof data.fields ) {\n\t\t\t\t\t_.each( data.fields, function( field, index ) {\n\t\t\t\t\t\tif ( field.model == dataModel ) {\n\t\t\t\t\t\t\tdata.fields[ index ].model = newModel;\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'data', data );\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeObject', newModel, null, label, data );\n\t\t\t\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\tnfRadio.channel( currentDomainID ).request( 'delete', dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Duplicate a action within our collection, adding the word \"copy\" to the label.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickDuplicate: function( e, model ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\n\t\t\t// Change our label.\n\t\t\tnewModel.set( 'label', newModel.get( 'label' ) + ' Copy' );\n\t\t\t// Update our ID to the new tmp id.\n\t\t\tvar tmpID = nfRadio.channel( currentDomainID ).request( 'get:tmpID' );\n\t\t\tnewModel.set( 'id', tmpID );\n\t\t\t// Add new model.\n\t\t\t// Params are: model, silent, renderTrigger, action\n\t\t\tnfRadio.channel( currentDomainID ).request( 'add', newModel, false, false, 'duplicate' );\n\t\t\t\n\t\t\t// Add our action addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: model.get( 'objectType' ),\n\t\t\t\tlabel: model.get( 'label' ),\n\t\t\t\tchange: 'Duplicated',\n\t\t\t\tdashicon: 'admin-page'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( currentDomainID ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'duplicateObject', newModel, null, label, data );\n\t\t\t\n\t\t\tmodel.trigger( 'change:label', model );\n\n\t\t\t// Update preview.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Config file for our merge tags.\n *\n * this.collection represents all of our registered merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/mergeTags',[\n\t'models/app/mergeTagCollection'\n\t], function(\n\tmergeTagCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.tagSectionCollection = new mergeTagCollection();\n\t\t\tvar that = this;\n\t\t\t_.each( mergeTags, function( tagSection ) {\n\t\t\t\tif ( tagSection.tags ) {\n\t\t\t\t\tvar tags = new mergeTagCollection( tagSection.tags );\n\t\t\t\t} else {\n\t\t\t\t\tvar tags = '';\n\t\t\t\t}\n\n\t\t\t\tthat.tagSectionCollection.add( {\n\t\t\t\t\tid: tagSection.id,\n\t\t\t\t\tlabel: tagSection.label,\n\t\t\t\t\ttags: tags,\n\t\t\t\t\tdefault_group: tagSection.default_group\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tvar fieldTags = this.tagSectionCollection.get( 'fields').get( 'tags' );\n\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t// TODO: Make this dynamic\n\t\t\t\tif ( 'submit' !== field.get( 'type' ) ) {\n\t\t\t\t\tfieldTags.add( {\n\t\t\t\t\t\tid: field.get( 'id' ),\n\t\t\t\t\t\tlabel: field.get( 'label' ),\n\t\t\t\t\t\ttag: that.getFieldKeyFormat( field.get( 'key' ) )\n\t\t\t\t\t} );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tvar calcTags = new mergeTagCollection();\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\n\t\t\t_.each( calcCollection.models, function( calcModel ) {\n\t\t\t\tcalcTags.add( {\n\t\t\t\t\tlabel: calcModel.get( 'name' ),\n\t\t\t\t\ttag: '{calc:' + calcModel.get( 'name' ) + '}'\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\n\n\t\t\tthis.currentElement = {};\n\t\t\tthis.settingModel = {};\n\t\t\tthis.open = false;\n\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'init', this.initMergeTags, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'mergeTags' ), 'click:mergeTag', this.clickMergeTag );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.addFieldTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.deleteFieldTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalcTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'remove:option', this.updateCalcTags );\n\n\t\t\t\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentElement', this.updateCurrentElement, this );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentSetting', this.updateCurrentSetting, this );\n\n\t\t\t// Listen for requests for our mergeTag collection.\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:collection', this.getCollection, this );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:mergeTag', this.getSectionModel, this );\n\n\t\t\t// When we edit a key, check for places that key might be used.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\n\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.replaceFieldKey );\n\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:fieldKeyFormat', this.getFieldKeyFormat, this );\n\n\t\t\t/*\n\t\t\t * TODO: Hotkey support for adding tags.\n\t\t\t *\n\t\t\t\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'open:mergeTags', this.openMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'up:mergeTags', this.upMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'down:mergeTags', this.downMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'return:mergeTags', this.returnMergeTags );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:open', this.updateOpen, this );\n\t\t\t*/\n\t\t},\n\n\t\t/**\n\t\t * Init merge tags within the passed view.\n\t\t * @since  3.0\n\t\t * @param  backbone.view view to be searched for merge tags.\n\t\t * @return void\n\t\t */\n\t\tinitMergeTags: function( view ) {\n\t\t\tvar mergeTagsView = nfRadio.channel( 'mergeTags' ).request( 'get:view' );\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Apply merge tags jQuery plugin.\n\t\t\t *\n\t\t\t * Prevent jBox from being called multiple times on the same element\n\t\t\t */\n\t\t\tthis.jBoxes = {};\n\t\t\tvar that = this;\n\n\t\t\tjQuery( view.el ).find( '.merge-tags' ).each(function() {\n\t\t\t\tif ( 'undefined' == typeof jQuery( this ).data( 'jBox-id' ) ) {\n\t\t\t\t\tvar jBox = jQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\t\ttitle: 'Insert Merge Tag',\n\t\t\t\t\t\ttrigger: 'click',\n\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\tx: 'center',\n\t\t\t\t\t\t\ty: 'bottom'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcloseOnClick: 'body',\n\t\t\t\t\t\tcloseOnEsc: true,\n\t\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\t\tmaxHeight: 200,\n\n\t\t\t\t\t\tonOpen: function() {\n\t\t\t\t\t\t\tmergeTagsView.reRender( view.model );\n\t\t\t\t\t\t\tthis.setContent( jQuery( '.merge-tags-content' ) );\n\t\t\t\t\t\t\tvar currentElement = jQuery( this.target ).prev( '.setting' );\n\t\t\t\t\t\t\tif ( 0 == currentElement.length ) {\n\t\t\t\t\t\t\t\tcurrentElement = jQuery( view.el ).find( '.setting' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthat.updateCurrentSetting( view.model );\n\t\t\t\t\t\t\tthat.updateCurrentElement( currentElement );\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'prevent:close', 'merge-tags' );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'enable:close', 'merge-tags' );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tjQuery( this ).data( 'jBox-id', jBox.id );\t\t\t\t\t\n\t\t\t\t}\n\t\t    });\n\t\t},\n\n\t\tclickMergeTag: function( e, tagModel ) {\n\t\t\t/*\n\t\t\t * TODO: Make this more dynamic.\n\t\t\t * Currently, the RTE is the only section that modifies how merge tags work,\n\t\t\t * but another type of setting might need to do this in the future.\n\t\t\t */\n\n\t\t\tif( 'undefined' != typeof this.settingModel.get( 'settingModel' ) && 'calculations' == this.settingModel.get( 'settingModel' ).get( 'name' ) ) {\n\n\t\t\t\tconsole.log( tagModel );\n\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\n\n\t\t\t\tvar tag = ( 'undefined' != typeof tagModel.get( 'calcTag' ) ) ? tagModel.get( 'calcTag' ) : tagModel.get( 'tag' );\n\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tag + currentValue.substr( currentPos );\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\n\t\t\t} else if( 'rte' == this.settingModel.get( 'type' ) ) {\n\t\t\t\tjQuery( this.currentElement ).summernote( 'insertText', tagModel.get( 'tag' ) );\n\t\t\t} else {\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tagModel.get( 'tag' ) + currentValue.substr( currentPos );\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\n\t\t\t}\n\t\t},\n\n\t\taddFieldTags: function( fieldModel ) {\n\t\t\t// TODO: Make this dynamic\n\t\t\tif ( 'submit' !== fieldModel.get( 'type' ) ) {\n\t\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).add( {\n\t\t\t\t\tid: fieldModel.get( 'id' ),\n\t\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\t\ttag: this.getFieldKeyFormat( fieldModel.get( 'key' ) ),\n\t\t\t\t\tcalcTag: this.getFieldKeyFormatCalc( fieldModel.get( 'key' ) )\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tdeleteFieldTags: function( fieldModel ) {\n\t\t\tvar fieldID = fieldModel.get( 'id' );\n\t\t\tvar tagModel = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldID );\n\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).remove( tagModel );\n\t\t},\n\n\t\tupdateCalcTags: function( optionModel ) {\n\t\t\tvar calcTags = new mergeTagCollection();\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\n\n\t\t\t_.each( calcCollection.models, function( calc ) {\n\t\t\t\tcalcTags.add( {\n\t\t\t\t\tlabel: calc.get( 'name' ),\n\t\t\t\t\ttag: '{calc:' + calc.get( 'name' ) + '}'\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\n\t\t},\n\n\t\topenMergeTags: function( e ) {\n\t\t\tif ( 'TEXTAREA' == jQuery( e.target )[0].tagName || 'INPUT' == jQuery( e.target )[0].tagName ) {\n\t\t\t\tjQuery( e.target ).parent().find( '.merge-tags' ).click();\n\t\t\t}\n\t\t},\n\n\t\treturnMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\n\t\t\t\tif ( currentModel ) {\n\t\t\t\t\tthis.clickMergeTag( e, currentModel );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeActiveTag( 'up' );\n\t\t\t}\n\t\t},\n\n\t\tdownMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeActiveTag( 'down' );\n\t\t\t}\n\t\t},\n\n\t\tchangeActiveTag: function( dir ) {\n\t\t\tif ( 'down' == dir ) {\n\t\t\t\tvar inc = 1;\n\t\t\t} else {\n\t\t\t\tvar inc = -1\n\t\t\t}\n\t\t\t// First, check to see if a field is currently active.\n\t\t\tif( 0 < this.fields.where( { 'active': true } ).length ) {\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\n\t\t\t\tvar currentIndex = this.fields.indexOf( currentModel );\n\t\t\t\tcurrentModel.set( 'active', false );\n\n\t\t\t\tvar nextModel = this.fields.models[ currentIndex + inc ];\n\t\t\t\tif ( nextModel ) {\n\t\t\t\t\tnextModel.set( 'active', true );\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if ( 0 < this.fields.where( { 'active': true } ) ) { // There aren't any active fields. Check for active system tags.\n\t\t\t\tconsole.log( 'system' );\n\t\t\t} else if ( 0 < this.userInfo.where( { 'active': true } ) ) { // No active user info LIs.\n\t\t\t\tconsole.log( 'userinfo' );\n\t\t\t} else { // No active LIs. We haven't made any active yet, or we've gotten to the bottom of the list.\n\t\t\t\t// Make sure that we have fields\n\t\t\t\tif ( 0 < this.fields.models.length ) {\n\t\t\t\t\t// Set our first field to active.\n\t\t\t\t\tthis.fields.models[0].set( 'active', true );\n\t\t\t\t} else {\n\t\t\t\t\t// Set our first system model to active.\n\t\t\t\t\tthis.system.models[0].set( 'active', true );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateCurrentElement: function( element ) {\n\t\t\tthis.currentElement = element;\n\t\t},\n\n\t\tupdateCurrentSetting: function( settingModel ) {\n\t\t\tthis.settingModel = settingModel;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.tagSectionCollection;\n\t\t},\n\n\t\tgetSectionModel: function( id ) {\n\t\t\treturn this.tagSectionCollection.get( id );\n\t\t},\n\n\t\tupdateOpen: function( open ) {\n\t\t\tthis.open = open;\n\t\t\t_.each( this.tagSectionCollection.get( 'fields' ).models, function( model ) {\n\t\t\t\tmodel.set( 'active', false );\n\t\t\t} );\n\t\t},\n\n\t\tupdateKey: function( fieldModel ) {\n\t\t\tvar newKey = fieldModel.get( 'key' );\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldModel.get( 'id' ) );\n\t\t\tif ( 'undefined' != typeof oldTag ) {\n\t\t\t\toldTag.set( 'tag', this.getFieldKeyFormat( newKey ) );\t\t\t\t\n\t\t\t}\n\n\t\t},\n\n\t\tgetFieldKeyFormat: function( key ) {\n\t\t\treturn '{field:' + key + '}';\n\t\t},\n\n\t\tgetFieldKeyFormatCalc: function( key ) {\n\t\t\treturn '{field:' + key + ':calc}';\n\t\t},\n\n\t\treplaceFieldKey: function( dataModel, keyModel, settingModel ) {\n\t\t\tvar oldKey = this.getFieldKeyFormat( keyModel._previousAttributes[ 'key' ] );\n\t\t\tvar newKey = this.getFieldKeyFormat( keyModel.get( 'key' ) );\n\t\t\tvar settingName = settingModel.get( 'name' );\n\t\t\tvar oldVal = dataModel.get( settingName );\n\t\t\tif ( 'string' == typeof oldVal ) {\n\t\t\t\tvar re = new RegExp( oldKey, 'g' );\n\t\t\t\tnewVal = oldVal.replace( re, newKey );\n\t\t\t\tdataModel.set( settingName, newVal );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're about to render a setting model that's a select and has 'fields' as the 'fill' setting, add all our field models to its options.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/itemSettingFill',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel ) {\n\t\t\tif ( 'fields' == settingModel.get( 'fill' ) ) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Modify the user's browser history when they click on a domain\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/confirmPublish',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:confirmPublish', this.confirmPublish );\n\t\t},\n\n\t\tconfirmPublish: function() {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t// Check to see if we need to add a submit button.\n\t\t\tif ( 1 == formModel.get( 'settings' ).get( 'add_submit' ) ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add', { type: 'submit', label: 'Submit', order: 9999 } );\n\t\t\t}\n\t\t\tformModel.set( 'show_publish_options', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to settings that utilise the Rich Text Editor\n *\n * @package Ninja Forms builder\n * @subpackage App - Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/rte',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-rte' ).reply( 'renderOnChange', function(){ return false } );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'rte' ), 'init:settingModel', this.initSettingModel );\n\n\t\t\t// When an RTE setting is shown, re-render RTE.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'render:setting', this.renderSetting );\n\n\t\t\t// When an RTE setting view is destroyed, remove our RTE.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'destroy:setting', this.destroySetting );\n\n\t\t\t// When an element within the RTE is clicked, check to see if we should insert a link.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'click:extra', this.clickExtra );\n\n\t\t\t// Instantiates the variable that holds the media library frame.\n\t\t\tthis.meta_image_frame;\n\n\t\t\tjQuery.summernote.options.icons = {\n\t\t        'align': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignCenter': 'dashicons dashicons-editor-aligncenter',\n\t\t        'alignJustify': 'dashicons dashicons-editor-justify',\n\t\t        'alignLeft': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignRight': 'dashicons dashicons-editor-alignright',\n\t\t        'indent': 'dashicons dashicons-editor-indent',\n\t\t        'outdent': 'dashicons dashicons-editor-outdent',\n\t\t        // 'arrowsAlt': 'dashicons fa-arrows-alt',\n\t\t        'bold': 'dashicons dashicons-editor-bold',\n\t\t        'caret': 'dashicons dashicons-arrow-down',\n\t\t        // 'circle': 'dashicons fa-circle',\n\t\t        'close': 'dashicons dashicons-dismiss',\n\t\t        'code': 'dashicons dashicons-editor-code',\n\t\t        'eraser': 'dashicons dashicons-editor-removeformatting',\n\t\t        // 'font': 'dashicons fa-font',\n\t\t        // 'frame': 'dashicons fa-frame',\n\t\t        'italic': 'dashicons dashicons-editor-italic',\n\t\t        'link': 'dashicons dashicons-admin-links',\n\t\t        'unlink': 'dashicons dashicons-editor-unlink',\n\t\t        'magic': 'dashicons dashicons-editor-paragraph',\n\t\t        // 'menuCheck': 'dashicons fa-check',\n\t\t        'minus': 'dashicons dashicons-minus',\n\t\t        'orderedlist': 'dashicons dashicons-editor-ol',\n\t\t        // 'pencil': 'dashicons fa-pencil',\n\t\t        // 'picture': 'dashicons fa-picture-o',\n\t\t        // 'question': 'dashicons fa-question',\n\t\t        'redo': 'dashicons dashicons-redo',\n\t\t        'square': 'dashicons fa-square',\n\t\t        // 'strikethrough': 'dashicons fa-strikethrough',\n\t\t        // 'subscript': 'dashicons fa-subscript',\n\t\t        // 'superscript': 'dashicons fa-superscript',\n\t\t        'table': 'dashicons dashicons-editor-table',\n\t\t        // 'textHeight': 'dashicons fa-text-height',\n\t\t        // 'trash': 'dashicons fa-trash',\n\t\t        'underline': 'dashicons dashicons-editor-underline',\n\t\t        'undo': 'dashicons dashicons-undo',\n\t\t        'unorderedlist': 'dashicons dashicons-editor-ul',\n\t\t        // 'video': 'dashicons fa-youtube-play'\n\t\t      }\n\n\t\t      this.currentContext = {};\n\t\t},\n\n\t\tinitSettingModel: function( settingModel ) {\n\t\t\tsettingModel.set( 'hide_merge_tags', true );\n\t\t},\n\n\t\tinitRTE: function( settingModel, dataModel, settingView ) {\n\t\t\t/*\n\t\t\t * Custom Button for links\n\t\t\t */\n\t\t\tvar that = this;\n\t\t\t// var linkButton = this.linkButton();\n\t\t\tvar linkButton = function( context ) {\n\t\t\t\treturn that.linkButton( context );\n\t\t\t}\n\t\t\tvar mediaButton = function( context ) {\n\t\t\t\treturn that.mediaButton( context );\n\t\t\t}\n\t\t\tvar mergeTags = this.mergeTags();\n\n\t\t\tvar toolbar = [\n\t\t\t\t[ 'paragraphStyle', ['style'] ],\n\t\t\t\t[ 'fontStyle', [ 'bold', 'italic', 'underline','clear' ] ],\n\t\t\t\t[ 'lists', [ 'ul', 'ol' ] ],\n\t\t\t    [ 'paragraph', [ 'paragraph' ] ],\n\t\t\t    [ 'customGroup', [ 'linkButton', 'unlink' ] ],\n\t\t\t    [ 'table', [ 'table' ] ],\n\t\t\t    [ 'actions', [ 'undo', 'redo' ] ],\n\t\t\t    [ 'tools', [ 'mediaButton', 'mergeTags', 'codeview' ] ]\n\t\t\t];\n\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( {\n\t\t\t\ttoolbar: toolbar,\n\t\t\t\tbuttons: {\n\t\t\t\t\tlinkButton: linkButton,\n\t\t\t\t\tmergeTags: mergeTags,\n\t\t\t\t\tmediaButton: mediaButton\n\t\t\t\t},\n\t\t\t\theight: 150,   //set editable area's height\n\t\t\t\tcodemirror: { // codemirror options\n\t\t\t\t    theme: 'monokai',\n\t\t\t\t    lineNumbers: true,\n\t\t\t\t    callbacks: {\n\t\t\t\t    \tonBlur: function( editor ) {\n\t\t\t\t    \t\tvar value = editor.getValue();\n\t\t\t\t    \t\tthat.updateDataModel( settingModel, dataModel, value );\n\t\t\t\t    \t}\n\t\t\t\t    }\n\t\t\t\t},\n\t\t\t\tprettifyHtml: true,\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonBlur: function() {\n\t\t\t\t\t\tvar value = jQuery( this ).summernote( 'code' );\n\t\t\t\t\t\tthat.updateDataModel( settingModel, dataModel, value );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tupdateDataModel: function( settingModel, dataModel, value ) {\n\t\t\tvar name = settingModel.get( 'name' );\n\t\t\tvar before = dataModel.get( name );\n\t\t\tvar after = value;\n\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\n\n\t\t\tdataModel.set( settingModel.get( 'name' ), after );\n\t\t},\n\n\t\trenderSetting: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.initRTE( settingModel, dataModel,settingView );\n\t\t\tvar linkMenu = jQuery( settingView.el ).find( '.link-button' ).next( '.dropdown-menu' ).find( 'button' );\n\t\t\tlinkMenu.replaceWith(function () {\n\t\t\t    return jQuery( '<div/>', {\n\t\t\t        class: jQuery( linkMenu ).attr( 'class' ),\n\t\t\t        html: this.innerHTML\n\t\t\t    } );\n\t\t\t} );\n\t\t},\n\n\t\tdestroySetting: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.removeRTE( settingModel, dataModel, settingView );\n\t\t},\n\n\t\tremoveRTE: function( settingModel, dataModel, settingView ) {\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( 'destroy' );\n\t\t},\n\n\t\tdrawerOpened: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.initRTE( settingModel, dataModel, settingView );\n\t\t},\n\n\t\tlinkButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar linkButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-button' );\n\t\t\tvar linkDropdown = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-dropdown' );\n\t\t\treturn ui.buttonGroup([\n\t\t\t\tui.button({\n\t            className: 'dropdown-toggle link-button',\n\t            contents: linkButton({}),\n\t            tooltip: 'Insert Link',\n\t            click: function( e ) {\n\t            \tthat.clickLinkButton( e, context );\n\t            },\n\t            data: {\n\t              toggle: 'dropdown'\n\t            }\n\t          }),\n\t\t\t\tui.dropdown([\n\t            ui.buttonGroup({\n\t              children: [\n\t                ui.button({\n\t                  contents: linkDropdown({}),\n\t                  tooltip: ''\n\t                }),\n\t              ]\n\t            })\n\t          ])\n\t\t\t]).render();\n\t\t},\n\n\t\tmergeTags: function( context ) {\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mergeTagsButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-merge-tags-button' );\n\t\t\treturn ui.button({\n\t\t\t\tclassName: 'dropdown-toggle merge-tags',\n\t\t\t\tcontents: mergeTagsButton({}),\n\t\t\t\ttooltip: 'Merge Tags'\n\t\t\t}).render();\n\t\t},\n\n\t\tmediaButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mediaButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-media-button' );\n\t\t\treturn ui.button({\n\t            className: 'dropdown-toggle',\n\t            contents: mediaButton({}),\n\t            tooltip: 'Insert Media',\n\t            click: function( e ) {\n\t            \tthat.openMediaManager( e, context );\n\t            }\n\t          }).render();\n\t\t},\n\n\t\topenMediaManager: function( e, context ) {\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\t// If the frame already exists, re-open it.\n\t\t\tif ( this.meta_image_frame ) {\n\t\t\t\tthis.meta_image_frame.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Sets up the media library frame\n\t\t\tthis.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n\t\t\t\ttitle: 'Select a file',\n\t\t\t\tbutton: { text:  'insert' }\n\t\t\t});\n\n\t\t\tvar that = this;\n\n\t\t\t// Runs when an image is selected.\n\t\t\tthis.meta_image_frame.on('select', function(){\n\n\t\t\t\t// Grabs the attachment selection and creates a JSON representation of the model.\n\t\t\t\tvar media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n\t\t\t\tthat.insertMedia( media_attachment, context );\n\t\t\t});\n\n\t\t\t// Opens the media library frame.\n\t\t\tthis.meta_image_frame.open();\n\t\t},\n\n\t\tclickLinkButton: function ( e, context ) {\n\t\t\tvar range = context.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tvar text = range.toString()\n\t\t\tthis.currentContext = context;\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('hide.bs.dropdown', function ( e ) {\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('shown.bs.dropdown', function ( e ) {\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-text' ).val( text );\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-url' ).focus();\n\t\t\t});\n\t\t},\n\n\t\tclickExtra: function( e, settingModel, dataModel, settingView ) {\n\t\t\tvar textEl = jQuery( e.target ).parent().find( '.link-text' );\n\t\t\tvar urlEl = jQuery( e.target ).parent().find( '.link-url' );\n\t\t\tvar isNewWindowEl = jQuery( e.target ).parent().find( '.link-new-window' );\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( jQuery( e.target ).hasClass( 'insert-link' ) ) {\n\t\t\t\tvar text = textEl.val();\n\t\t\t\tvar url = urlEl.val();\n\t\t\t\tvar isNewWindow = ( isNewWindowEl.prop( 'checked' ) ) ? true: false;\n\t\t\t\tif ( 0 != text.length && 0 != url.length ) {\n\t\t\t\t\tthis.currentContext.invoke( 'editor.createLink', { text:text, url: url, isNewWindow: isNewWindow } );\n\t\t\t\t}\n\t\t\t}\n\t\t\ttextEl.val( '' );\n\t\t\turlEl.val( '' );\n\t\t\tisNewWindowEl.prop( 'checked', false );\n\t\t\tjQuery( e.target ).closest( 'div.note-btn-group.open' ).removeClass( 'open' );\n\t\t},\n\n\t\tinsertMedia: function( media, context ) {\n\t\t\tcontext.invoke( 'editor.restoreRange' );\n\t\t\tif ( 'image' == media.type ) {\n\t\t\t\tcontext.invoke( 'editor.insertImage', media.url );\n\t\t\t} else {\n\t\t\t\tcontext.invoke( 'editor.createLink', { text: media.filename, url: media.url } );\n\t\t\t}\n\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingFieldSelect',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        initialize: function() {\n\n            // Bind field key listener to field-select setting type.\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', this.trackKeyChanges );\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-field-select' ), 'before:renderSetting', this.beforeRender );\n\n            // Add setting change listener only in drawers with a field-select setting.\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', function() {\n                this.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.maybeSwitchToFieldsDomain );\n            });\n\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.autoOpenDrawer );\n\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.filterDrawerContents );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.SwitchToFieldsDomain );\n        },\n\n        trackKeyChanges: function( settingModel ) {\n            settingModel.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', settingModel.updateKey );\n\n            // Update selected field if the selected field's key changes.\n            this.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.updateFieldMap );\n        },\n\n        updateFieldMap: function( dataModel, keyModel, settingModel ) {\n\n            var oldKey = keyModel._previousAttributes[ 'key' ];\n            var newKey = keyModel.get( 'key' );\n\n            if( 'field-select' == settingModel.get( 'type' ) && dataModel.get( settingModel.get( 'name' ) ) == oldKey ) {\n\n                dataModel.set( settingModel.get( 'name' ), newKey );\n            }\n        },\n\n        beforeRender: function( settingModel, dataModel ) {\n\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n            var fieldTypes = settingModel.get( 'field_types' );\n\n            var options = [\n                {\n                    label: '--',\n                    value: 0\n                }\n            ];\n            _.each( fieldCollection.models, function( field ){\n\n                if( dataModel.cid == field.cid ) return;\n\n                if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length && ! _.contains( fieldTypes, field.get( 'type' ) ) ) return;\n\n                var fieldFilter = settingModel.get( 'field_filter' );\n                if( fieldFilter && 'undefined' != typeof fieldFilter[ field.get( 'type' ) ] ) {\n                    var bail = false;\n                    _.each( fieldFilter[ field.get( 'type' ) ], function( value, setting ){\n                        console.log( value + \":\" + field.get( setting )  );\n                        if( value != field.get( setting ) ) bail = true;\n                    } );\n                    if( bail ) return;\n                }\n\n                var value = field.get( 'key' );\n                switch ( settingModel.get( 'field_value_format' ) ) {\n                    case 'key':\n                        value = field.get( 'key' );\n                        break;\n                    case 'merge_tag':\n                    default:\n                        value = '{field:' + field.get( 'key' ) + '}';\n                }\n\n                options.push({\n                    label: field.get( 'label' ),\n                    value: value\n                });\n            });\n\n            if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length ) {\n                _.each( fieldTypes, function( fieldType ){\n\n                    var fieldTypeModel = nfRadio.channel( 'fields' ).request( 'get:type', fieldType );\n\n                    options.push({\n                        label: '-- Add ' + fieldTypeModel.get( 'nicename' ) + ' Field',\n                        value: 'addField:' + fieldType,\n                    });\n                } );\n            }\n\n            settingModel.set( 'options', options );\n        },\n\n        maybeSwitchToFieldsDomain: function( e, model, dataModel ) {\n\n            if( 'field-select' != model.get( 'type' ) ) return;\n\n            var name = model.get( 'name' );\n            var value = dataModel.get( name );\n            var rubble = value.split( ':' );\n\n            if( 'addField' != rubble[0] ) return;\n\n            this.openDrawer = 'addField';\n            this.filterDrawer = rubble[1];\n\n            dataModel.set( name, '' );\n\n            this.switchDomain = true;\n            nfRadio.channel( 'app' ).request( 'close:drawer' );\n        },\n\n        SwitchToFieldsDomain: function() {\n            if( this.switchDomain ) {\n                var fieldDomainModel = nfRadio.channel( 'app' ).request( 'get:domainModel', 'fields' );\n                nfRadio.channel('app').request('change:currentDomain', null, fieldDomainModel);\n                this.switchDomain = null;\n            }\n        },\n\n        autoOpenDrawer: function() {\n            if( this.openDrawer ) {\n                nfRadio.channel( 'app' ).request( 'open:drawer', this.openDrawer );\n                this.openDrawer = null;\n            }\n        },\n\n        filterDrawerContents: function() {\n            if( this.filterDrawer ) {\n                nfRadio.channel('drawer-addField').trigger('change:filter', this.filterDrawer);\n                this.filterDrawer = null;\n            }\n        }\n    });\n\n    return controller;\n} );\n","/**\n * The Field List setting is a container of settings (like the Fieldset setting), in which its children are instantiated.\n * Unlike the Fieldset setting, Field List settings are dynamically created based on the list of form fields.\n *\n * Note: Field references in the dynamic setting names are based on field keys, which may change.\n * Unlike regular field key tracking, a new setting needs to be created with the same value as the previous.\n *\n * @package Ninja Forms builder\n * @subpackage Action Settings\n * @copyright (c) 2016 WP Ninjas\n * @author Kyle B. Johnson\n * @since 3.0\n */\ndefine( 'controllers/app/settingFieldList',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\n    return Marionette.Object.extend( {\n\n        /**\n         * A reference list of Field List setting models.\n         */\n        fieldListSettings: [],\n\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'field-list' ),       'init:settingModel',    this.registerFieldListSettings  );\n            this.listenTo( nfRadio.channel( 'fields' ),           'update:setting',       this.updateFieldListSettingKeys );\n                           nfRadio.channel( 'field-list' ).reply( 'get:settingChildView', this.getSettingChildView, this  );\n        },\n\n        /**\n         * Build a reference list of Field List setting models for later reference.\n         *\n         * @param settingModel\n         */\n        registerFieldListSettings: function( settingModel ){\n            this.fieldListSettings.push( settingModel.get( 'name' ) );\n        },\n\n        /**\n         * Field List settings contain field keys in the setting names.\n         * When a field key changes, so too must the Field List setting name.\n         *\n         * @param fieldModel\n         */\n        updateFieldListSettingKeys: function( fieldModel ){\n\n            // We are only interested in field key changes.\n            if( 'undefined' == typeof fieldModel.changed.key ) return;\n\n            var oldKey = fieldModel._previousAttributes.key;\n            var newKey = fieldModel.changed.key;\n\n            /*\n             * This is an absolute (functional) mess of nesting. I apologize to my future self, or Kenny.\n             *\n             * Each setting of each action model must be checked against each registered Field List setting.\n             */\n            var that = this;\n            _.each( Backbone.Radio.channel( 'actions' ).request( 'get:collection' ).models, function( actionModel ) {\n                _.each( actionModel.attributes, function( value, setting ) {\n                    var lastChanged = ''; // Used to avoid resetting the change with a duplicate call.\n                    _.each( that.fieldListSettings, function( prefix ) {\n                        if( setting != prefix + '-' + oldKey || lastChanged == oldKey ) return;\n                        var oldValue = actionModel.get( prefix + '-' + oldKey );\n                        actionModel.set( prefix + '-' + newKey, oldValue );\n                        actionModel.set( prefix + '-' + oldKey, 0 );\n                        lastChanged = oldKey;\n                    });\n                });\n            });\n        },\n\n        /**\n         * Set the view for Field List sub-settings, just like the Fieldset setting.\n         *\n         * @param settingModel\n         * @returns {*}\n         */\n        getSettingChildView: function( settingModel ) {\n\n            /**\n             * Dynamically build field-list settings as needed for the view.\n             */\n\n            // Filter fields based on the field_types setting property.\n            var fields = _.filter( nfRadio.channel( 'fields' ).request( 'get:collection' ).models, function( field ) {\n                return _.contains( settingModel.get( 'field_types' ), field.get( 'type' ) );\n            });\n\n            // Map fields into setting definitions.\n            var settings = _.map( fields, function( field ) {\n                return {\n                    name: settingModel.get( 'name' ) + '-' + field.get( 'key' ),\n                    type: 'toggle',\n                    label: field.get( 'label' ),\n                    width: 'full'\n                };\n            });\n\n            settingModel.set( 'settings', new settingCollection( settings ) );\n\n            // return the child view.\n            return fieldsetView;\n        },\n\n    });\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n *\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingHTML',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-html' ), 'before:renderSetting', this.init );\n        },\n\n        init: function( settingModel, dataModel ) {\n\n            if( 'undefined' == settingModel.get( 'mirror' ) ) return;\n\n            // Listen to a setting change inside of the dataModel.\n            dataModel.on( 'change:' + settingModel.get( 'mirror' ), this.update, settingModel );\n        },\n\n        update: function( dataModel, changedSettingValue ) {\n\n            // Mirror the default value setting value.\n            dataModel.set( this.get( 'name' ), changedSettingValue );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingColor',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // We don't want to re-render this setting type when the data changes.\n            nfRadio.channel( 'setting-type-color' ).reply( 'renderOnChange', this.setRenderFalse );\n            // We want to close any color pickers before we close our styling tab or drawer.\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'destroy:setting', this.closeColorPickers );\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'render:setting', this.initColorPicker );\n        },\n\n        initColorPicker: function( settingModel, dataModel, view ) {\n\n            var name = settingModel.get( 'name' );\n            var el = jQuery( view.el ).find( 'input' );\n\n            jQuery( el ).wpColorPicker( {\n                change: function( event, ui ){\n                    nfRadio.channel( 'app' ).request( 'change:setting', event, settingModel, dataModel, ui.color.toString() );\n                }\n            } );\n        },\n\n        setRenderFalse: function() {\n            return false;\n        },\n\n        closeColorPickers: function( settingModel, dataModel, view ) {\n            jQuery( view.el ).find( '.wp-color-picker' ).wpColorPicker( 'close' );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for the app to start.\n *\n * If the form is a new form, then highlight the Add New submenu item.\n * Otherwise, append an Edit Form submenu for context.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeMenu',[], function() {\n    var controller = Marionette.Object.extend({\n\n        editFormText: '',\n\n        initialize: function () {\n            this.editFormText = nfAdmin.editFormText || 'Edit Form';\n            this.listenTo(nfRadio.channel('app'), 'after:appStart', this.changeMenu);\n            this.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.formPublish );\n        },\n\n        changeMenu: function () {\n            var form = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n            if ( this.isNewForm( form.id ) ) {\n                this.highlightAddNew();\n            } else {\n                this.appendEditForm();\n            }\n        },\n\n        isNewForm: function( form_id ) {\n            return isNaN( form_id );\n        },\n\n        highlightAddNew: function() {\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\n            jQuery( 'a[href=\"admin.php?page=ninja-forms&form_id=new\"]' ).parent().addClass( 'current' );\n        },\n\n        appendEditForm: function() {\n            var html = '<li class=\"current\"><a href=\"#\">' + this.editFormText + '</a></li>';\n            if ( jQuery( 'li a:contains(\"' + this.editFormText + '\")' ).length == 0 ) {\n                jQuery( '.wp-submenu li' ).removeClass( 'current' );\n                jQuery( 'a[href=\"admin.php?page=ninja-forms&form_id=new\"]' ).parent().after( html );\n            }\n        },\n\n        formPublish: function( response ) {\n            if ( 'publish' !== response.action ) return false;\n            this.changeMenu();\n        }\n    });\n\n    return controller;\n});\n","/**\n * When we click on a domain link, close the mobile menu.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/mobile',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for clicks on our app menu.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.closeMobileMenu );\n\t\t},\n\n\t\tcloseMobileMenu: function() {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).removeClass( 'nf-menu-expand' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Add a jBox notice to the screen.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/notices',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'notices' ).reply( 'add', this.addNotice, this );\n\t\t\tnfRadio.channel( 'notices' ).reply( 'close', this.closeNotice, this );\n\t\t\tthis.notices = {};\n\t\t},\n\n\t\taddNotice: function( key, msg, options ) {\n\n\t\t\tvar appDefaults = {\n\t\t\t\tcontent: msg,\n\t\t\t\tcolor: 'green',\n\t\t\t\tzIndex:12000,\n\t\t\t\tconstructOnInit: true,\n\t\t\t\tstack: true,\n\t\t\t\tanimation: {\n\t\t\t\t\topen: 'flip',\n\t\t\t\t\tclose: 'flip'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar mobileDefaults = {\n\t\t\t\tposition: {\n\t\t\t\t\tx: 'center',\n\t\t\t\t\ty: 'top'\n\t\t\t\t},\n\t\t\t\tanimation: {\n\t\t\t\t\topen:'slide:top',\n\t\t\t\t\tclose:'slide:left'\n\t\t\t\t},\n\t\t\t\tautoClose: 2000,\n\t\t\t\toffset: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 55\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar desktopDefaults = {\n\t\t\t\tattributes: {\n\t\t\t\t\tx: 'left',\n\t\t\t\t\ty: 'bottom'\n\t\t\t\t},\n\t\t\t\tautoClose: 4000\n\t\t\t};\n\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tvar defaults = mobileDefaults;\t\n\t\t\t} else {\n\t\t\t\tvar defaults = desktopDefaults;\n\t\t\t}\n\t\t\tdefaults = jQuery.extend( defaults, appDefaults );\n\n\t\t\tvar options = jQuery.extend( defaults, options );\n\t\t\t// console.log( options );\n\t\t\tthis.notices[ key ] = new jBox( 'Notice', options );\n\t\t},\n\n\t\tcloseNotice: function( key ) {\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\n\t\t\t\tthis.notices[ key ].close();\n\t\t\t}\n\t\t},\n\n\t\topenNotice: function( key ) {\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\n\t\t\t\tthis.notices[ key ].open();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Prompt the user to save if they attempt to leave the page with unsaved changes.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/unloadCheck',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tjQuery( window ).bind( 'beforeunload', this.maybePrompt );\n\t\t},\n\n\t\tmaybePrompt: function( model ) {\n\t\t\t// If our app is clean, don't show a warning.\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t\t\t\treturn 'You have unsaved changes.';\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Before we save data to the database (on preview update or publish), we check to see if we have anyone\n * that wants to update the 'formContent' form setting. This setting is used on the front-end to allow\n * for custom display of form fields. i.e. layout rows.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formContentFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our formContent view filter array.\n\t\t\t */\n\t\t\tthis.viewFilters = [];\n\t\t\tthis.saveFilters = [];\n\t\t\tthis.loadFilters = [];\n\n\t\t\t/*\n\t\t     * Listen for requests to add formContent filters.\n\t\t\t */\n\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:saveFilter', this.addSaveFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our formContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:saveFilters', this.getSaveFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * -- DEPRECATED RADIO REPLIES --\n\t\t\t * \n\t\t\t * The 'fieldContents' channel has been deprecated as of 3.0 (it was present in the RC) in favour of 'formContent'.\n\t\t\t * Listen for requests to add new fieldContent filters.\n\t\t\t * \n\t\t\t * TODO: These radio listeners on the 'fieldContents' channels are here for backwards compatibility and should be removed eventually.\n\t\t\t */\n\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:saveFilter', this.addSaveFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our fieldContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:saveFilters', this.getSaveFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\n\t\t\t/*\n\t\t\t * -- END DEPRECATED --\n\t\t\t */\n\t\t},\n\n\t\taddViewFilter: function( callback, priority ) {\n\t\t\tthis.viewFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetViewFilters: function() {\n\t\t\treturn this.viewFilters;\n\t\t},\n\n\t\taddSaveFilter: function( callback, priority ) {\n\t\t\tthis.saveFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetSaveFilters: function() {\n\t\t\treturn this.saveFilters;\n\t\t},\n\n\t\taddLoadFilter: function( callback, priority ) {\n\t\t\tthis.loadFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLoadFilters: function() {\n\t\t\treturn this.loadFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles filters for our main content gutter views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formContentGutterFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our gutter view filter array.\n\t\t\t */\n\t\t\tthis.leftFilters = [];\n\t\t\tthis.rightFilters = [];\n\t\t\t/*\n\t\t     * Listen for requests to add gutter filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:leftFilter', this.addLeftFilter, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:rightFilter', this.addRightFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our content gutter filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:leftFilters', this.getLeftFilters, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:rightFilters', this.getRightFilters, this );\n\t\t},\n\n\t\taddLeftFilter: function( callback, priority ) {\n\t\t\tthis.leftFilters[ priority ] = callback;\n\t\t},\n\n\t\taddRightFilter: function( callback, priority ) {\n\t\t\tthis.rightFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLeftFilters: function() {\n\t\t\treturn this.leftFilters;\n\t\t},\n\n\t\tgetRightFilters: function() {\n\t\t\treturn this.rightFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a clone of a backbone collection with all the models' attributes looped through so that collections contained within are propely cloned.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cloneCollectionDeep',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:collectionDeep', this.cloneCollectionDeep, this );\n\t\t},\n\n\t\tcloneCollectionDeep: function( collection ) {\n\t\t\tvar models = [];\n\t\t\t// Loop through every model in our collection, clone it, and add it to our model array\n\t\t\t_.each( collection.models, function( model ) {\n\t\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\t\t\t\tmodels.push( newModel );\n\t\t\t} );\n\t\t\t// Create a new instance of our collection\n\t\t\treturn new collection.constructor( models, collection.options );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Tracks which keys have been pressed.\n * Currently only used by fields to see if they should duplicate or delete on click.\n * (Shift + D + click = delete) (Shift + C + click = duplicate)\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/trackKeyDown',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tkeys: [],\n\n\t\tinitialize: function() {\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Track keydowns and store the keys pressed.\n\t\t\t */\n\t\t\t\n\t\t\tjQuery( document ).on( 'keydown', function( e ) {\n\t\t\t\tthat.keyDown( e, that );\n\t\t\t} );\n\n\t\t\tjQuery( document ).on( 'keyup', function( e ) {\n\t\t\t\tthat.keyUp( e, that );\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Get the keys currently being pressed, if any\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:keydown', this.getKeyDown, this );\n\t\t},\n\n\t\tkeyDown: function( e, context ) {\n\t\t\t/*\n\t\t\t * Add our keycode to our keys array.\n\t\t\t */\n\t\t\tcontext.keys[ e.keyCode ] = e.keyCode;\n\t\t},\n\n\t\tkeyUp: function( e, context ) {\n\t\t\t/*\n\t\t\t * Remove our keycode from our keys array.\n\t\t\t */\n\t\t\tif ( -1 != context.keys.indexOf( e.keyCode ) ) {\n\t\t\t\tdelete context.keys[ e.keyCode ];\n\t\t\t}\n\t\t},\n\n\t\tgetKeyDown: function() {\n\t\t\treturn this.keys;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Initialize the perfectscroll jQuery plugin\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/perfectScroll',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tmovedPos: false,\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init the main view, init our perfectscroll\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'show:main', this.initPerfectScroll );\n\n\t\t\t/*\n\t\t\t * When our drawer opens and closes, change the position of our scroll rail.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.moveRail );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:closeDrawer', this.resetRail );\n\t\t},\n\n\t\tinitPerfectScroll: function( view ) {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( view.el ).parent().perfectScrollbar( {\n\t\t\t\t\tsuppressScrollX: true\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tjQuery( 'head' ).append( '<style id=\"ps-scrollbar-css\" type=\"text/css\"></style>' );\n\t\t},\n\n\t\tmoveRail: function() {\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tvar movedPos = jQuery( drawerEl ).outerWidth();\n\n\t\t\tjQuery( '#ps-scrollbar-css' ).text( '.ps-scrollbar-moved { right: ' + movedPos + 'px !important; } ' );\n\t\t\tjQuery( '#nf-main .ps-scrollbar-y-rail' ).addClass( 'ps-scrollbar-moved ' );\n\t\t\t\n\t\t},\n\n\t\tresetRail: function() {\n\t\t\tjQuery( '.ps-scrollbar-y-rail' ).removeClass( 'ps-scrollbar-moved ' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our type settings groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingGroupModel',[ 'models/app/settingCollection' ], function( SettingCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdisplay: false\n\t\t},\n\n\t\tinitialize: function( options ) {\n\t\t\tif ( false == this.get( 'settings' ) instanceof Backbone.Collection ) {\n\t\t\t\tthis.set( 'settings', new SettingCollection( this.get( 'settings' ) ) );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection of our type settings groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingGroupCollection',['models/app/settingGroupModel'], function( settingGroupModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: settingGroupModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Returns a new setting group collection.\n * Used to settings drawers for custom data models (i.e. not fields, actions, or advanced)\n * \n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/getNewSettingGroupCollection',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for a new setting group collection\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingGroupCollectionDefinition', this.getNewSettingGroupCollection, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a new instance of the setting group collection.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return backbone.collection\n\t\t */\n\t\tgetNewSettingGroupCollection: function() {\n\t\t\treturn SettingGroupCollection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our field type\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/typeModel',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\tif ( false === this.get( 'settingGroups' ) instanceof Backbone.Collection ) {\n\t\t\t\tthis.set( 'settingGroups', new SettingGroupCollection( this.get( 'settingGroups' ) ) );\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:typeModel', this );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field type models. \n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/typeCollection',['models/app/typeModel'], function( typeModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: typeModel,\n\t\ttype: false,\n\n\t\tinitialize: function( models, options ) {\n\t\t\t_.each( options, function( option, key ) {\n\t\t\t\tthis[ key ] = option;\n\t\t\t}, this );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Model that represents our field type section on the add new field drawer.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/typeSectionModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tclasses: ''\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/typeSectionCollection',['models/fields/typeSectionModel'], function( typeSectionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: typeSectionModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Creates and stores a collection of field types. This includes all of the settings shown when editing a field.\n *\n * 1) Create our settings sections config\n * 2) Loops over our preloaded data and adds that to our field type collection\n *\n * Also responds to requests for data about field types\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/types',[\n\t\t'models/app/typeCollection',\n\t\t'models/fields/typeSectionCollection'\n\t],\n\tfunction(\n\t\tTypeCollection,\n\t\tSectionCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Config for our settings sections\n\t\t\tthis.sections = new SectionCollection( fieldTypeSections );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'init:typeModel', this.registerSection );\n\n\t\t\t// Create our field type collection\n\t\t\tthis.collection = new TypeCollection( fieldTypeData, { type: 'fields' } );\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:type', this.getFieldType, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeCollection', this.getTypeCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSections', this.getTypeSections, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:savedFields', this.getSavedFields, this );\n\n\t\t\t// Listen to clicks on field types\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:fieldType', this.addField );\n\t\t},\n\n\t\tregisterSection: function( typeModel ) {\n\t\t\tif ( 'fields' != typeModel.collection.type || ! typeModel.get( 'section' ) ) return;\n\n\t\t\tthis.sections.get( typeModel.get( 'section' ) ).get( 'fieldTypes' ).push( typeModel.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetFieldType: function( id ) {\n        \treturn this.collection.get( id );\n        },\n\n        /**\n         * Return the entire field type collection\n         *\n         * @since  3.0\n         * @param  string \t\t\t\tid \t[description]\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetTypeCollection: function( id ) {\n        \treturn this.collection;\n        },\n\n        /**\n         * Add a field type to our fields sortable when the field type button is clicked.\n         *\n         * @since 3.0\n         * @param Object e event\n         * @return void\n         */\n        addField: function( e ) {\n        \tvar type = jQuery( e.target ).data( 'id' );\n\n\t\t\tif( e.shiftKey ){\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n\t\t\t\treturn;\n\t\t\t}\n\n        \tvar fieldModel = nfRadio.channel( 'fields' ).request( 'add', {\n\t\t\t\ttype: type,\n\t\t\t\tlabel: nfRadio.channel( 'fields' ).request( 'get:type', type ).get( 'nicename' )\n\t\t\t});\n\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', fieldModel, null, label, data );\n\n\t\t\t// Re-Draw the Field Collection\n\t\t\tnfRadio.channel( 'fields' ).request( 'redraw:collection' );\n        },\n\n        /**\n         * Return our field type settings sections\n         *\n         * @since  3.0\n         * @return backbone.collection field type settings sections\n         */\n        getTypeSections: function() {\n            return this.sections;\n        },\n\n        /**\n         * Return our saved fields\n         *\n         * @since  3.0\n         * @return backbone.collection\n         */\n        getSavedFields: function() {\n        \tconsole.log( this.sections.get( 'saved' ) );\n        \tthis.sections.get( 'saved' );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Handles the logic for our field type draggables.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldTypeDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our field type draggables and run the appropriate function.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.stopDrag );\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'drawer-addField' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging:\n\t\t * get our drawer element\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\n\t\t * get our main element\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\n\t\t * set our dragging helper clone\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\n\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return {[type]}         [description]\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t},\n\n\t\tgetCurrentDraggableHelperClone: function() {\n\t\t\treturn this.draggableHelperClone;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the dragging of our field staging area\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/stagingDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the start and stop of our field staging dragging\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.stopDrag );\n\t\t},\n\n\t\t/**\n\t\t * When the user starts dragging the staging area, we have to:\n\t\t * set the overflow property of the drawer to visible !important. If we don't, the button goes underneath the main section.\n\t\t * set the overflow proerty of the main to visible !important. If we don't, the dragged element goes underneath the drawer.\n\t\t * replace our helper with the stacked \"x fields\" template.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t context jQuery UI Draggable\n\t\t * @param  Object\t ui      jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-staged-fields-drag' );\n\t\t\tjQuery( ui.helper ).html( html( { num: stagedFields.models.length } ) );\n\t\t\tjQuery( ui.helper ).prop( 'id', 'nf-staged-fields-drag' );\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.7' );\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging the staging area, we have to set the overflow property to hidden !important\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t context jQuery UI Draggable\n\t\t * @param  Object\t ui      jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles most things related to our staging area:\n * 1) Creates a collection\n * 2) Listens for requests to CRUD items from the collection\n * 3) Adds our staged fields to the fields sortable when the drawer is closed\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/staging',['models/fields/stagingCollection'], function( stagingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Create our staged fields collection\n\t\t\tthis.collection = new stagingCollection();\n\t\t\t// Respond to requests related to our staging area.\n\t\t    nfRadio.channel( 'fields' ).reply( 'add:stagedField', this.addStagedField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'remove:stagedField', this.removeStagedField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:staging', this.getStagingCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:staging', this.sortStagedFields, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:staging', this.clearStagedFields, this );\n\t\t\t// Listen to our remove staged field click event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'click:removeStagedField', this.removeStagedField );\n\t\t\t// Listen to our event that fires just before a drawer is closed.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'before:closeDrawer', this.beforeCloseDrawer );\n\t\t},\n\n\t\tgetStagingCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\t/**\n\t\t * Add a field to our staging area\n\t\t * \n\t\t * @since 3.0\n\t\t * @param string type Type of field we're adding\n\t\t * @return tmpID\n\t\t */\n\t\taddStagedField: function( type, silent ) {\n\t\t\tvar silent = silent || false;\n\t\t\t// Get our type model from the string.\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t// Our tmp ID is a string with the time appended to make it unique.\n\t\t\tvar tmpID = 'nf-staged-field-' + jQuery.now();\n\t\t\t// Object that will be added to our staging collection.\n\t\t\tvar data = {\n\t\t\t\tid: tmpID,\n\t\t\t\t// i.e. firstname, textbox, etc.\n\t\t\t\tslug: fieldType.get( 'type' ),\n\t\t\t\t// i.e. First Name, Textbox, etc.\n\t\t\t\tnicename: fieldType.get( 'nicename' ),\n\t\t\t\t// i.e. calendar, envelope, etc.\n\t\t\t\ticon: fieldType.get( 'icon' )\n\t\t\t}\n\t\t\t// \n\t\t\tvar model = this.collection.add( data );\n\n\t\t\tif( ! silent ) nfRadio.channel( 'fields').trigger( 'add:stagedField', model );\n\n\t\t\treturn tmpID;\n\t\t},\n\n\t\t/**\n\t\t * Remove a field from staging\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te     \tEvent\n\t\t * @param  Backbone.model \tmodel \tstaged field model to remove\n\t\t * @return void\n\t\t */\n\t\tremoveStagedField: function( e, model ) {\n\t\t\tthis.collection.remove( model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'remove:stagedField', model );\n\t\t},\n\n\t\t/**\n\t\t * Adds our staged fields to the main fields sortable before the drawer is closed.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tbeforeCloseDrawer: function() {\n\t\t\tif ( 0 != this.collection.models.length ) { // Make sure that we have models\n\t\t\t\t// Get our field collection.\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n\t\t\t\tvar fields = [];\n\t\t\t\t// Loop through our staging collection\n\t\t\t\t_.each( this.collection.models, function( model ) {\n\t\t\t\t\t// Get a tmp ID for our new field.\n\t\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\n\t\t\t\t\t// Create an object that can be added as a model.\n\t\t\t\t\tvar tmpField = { id: tmpID, label: model.get( 'nicename' ), type: model.get( 'slug' ) };\n\t\t\t\t\t// Add our new field.\n\t\t\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  tmpField, false );\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'Field',\n\t\t\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\t\t\tchange: 'Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\tcollection: fieldCollection\n\t\t\t\t\t}\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\t\t\t\n\t\t\t\t} );\n\t\t\t\t// Trigger a reset on our field collection so that our view re-renders\n\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t// Empty the staging collection\n\t\t\t\tthis.collection.reset();\n\t\t\t}\n\t\t\t// Sort our fields.\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', null, null, false );\n\t\t},\n\n\t\t/**\n\t\t * Sort our staging area by the 'order' attribute.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tsortStagedFields: function() {\n\t\t\t// Get our staged fields sortable.\n\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t// Get the current order using jQuery sortable. Will be an array of IDs: [tmp-blah, tmp-blah]\n\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t// Loop through our models\n\t\t\t_.each( this.collection.models, function( field ) {\n\t\t\t\t// Search our order array for this field.\n\t\t\t\tvar search = field.get( 'id' );\n\t\t\t\tvar pos = order.indexOf( search );\n\t\t\t\t// Update our staged field model with the new order.\n\t\t\t\tfield.set( 'order', pos );\n\t\t\t} );\n\t\t\t// Sort our staging collection.\n\t\t\tthis.collection.sort();\n\t\t},\n\n\t\tclearStagedFields: function() {\n\t\t\tthis.collection.reset();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our staged fields sortable.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/stagingSortable',['models/fields/stagingCollection'], function( stagingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our field type draggables\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\n\t\t\t// Listen to our sortable events\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'receive:stagedFields', this.receiveStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'over:stagedFields', this.overStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'out:stagedFields', this.outStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'start:stagedFields', this.startStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stop:stagedFields', this.stopStagedFields );\n\t\t},\n\n\t\t/**\n\t\t * Change our dropped field type helper so that it matches the other items in our sortable.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI item\n\t\t * @return void\n\t\t */\n\t\treceiveStagedFields: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drop:fieldType', type );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add an active class to our sortable when a field type item is dragged\n\t\t * \n\t\t * @since 3.0\n\t\t */\n\t\taddActiveClass: function() {\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\tjQuery( stagedFieldsEl ).addClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * Remove the active class from our sortable when the field type item is dropped.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tremoveActiveClass: function() {\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\tjQuery( stagedFieldsEl ).removeClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * When the field type item is dragged over our sortable, we change the helper to match the sortable items.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te  event\n\t\t * @param  Object \tui jQuery UI Element\n\t\t * @return void\n\t\t */\n\t\toverStagedFields: function( e, ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\tvar nicename = fieldType.get( 'nicename' );\n\t\t\t\tthis.currentHelper = ui.helper \n\t\t\t\tjQuery( ui.helper ).html( nicename + '<span class=\"dashicons dashicons-dismiss\"></span>' );\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-item-dock' ).css( { 'opacity': '0.8', 'width': '', 'height': '' } );\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\t/**\n\t\t * When a field type item is moved away from our sortable, we change the helper to its previous appearance\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutStagedFields: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\t\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-item-dock' ).addClass( 'nf-field-type-button' );\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t},\n\n\t\t/**\n\t\t * When a user starts to drag a sortable item, we need to set a few properties on the item and the helper.\n\t\t * These keep the original item in place while dragging and changes the opacity of the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartStagedFields: function( ui ) {\n\t\t\tjQuery( ui.item ).show();\n\t\t\tjQuery( ui.item ).css( { 'display': 'inline', 'opacity': '0.7' } );\n\t\t\tjQuery( ui.helper ).css( 'opacity', '0.5' );\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging a sortable item, remove our opacity setting and remove the helper item.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopStagedFields: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Filters our field type collection.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/filterTypes',['models/fields/typeSectionCollection'], function( fieldTypeSectionCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our change filter event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'change:filter', this.filterFieldTypes );\n\t\t},\n\n\t\t/**\n\t\t * Filter our field types in the add new field drawer\n\t\t * \n\t\t * Takes a search string and finds any field types that match either the name or alias.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string\t search \tstring being searched for\n\t\t * @param  object \t e      \tKeyup event\n\t\t * @return void\n\t\t */\n\t\tfilterFieldTypes: function( search, e ) {\n\t\t\t// Make sure that we aren't dealing with an empty string.\n\t\t\tif ( '' != jQuery.trim( search ) ) {\n        \t\tvar filtered = [];\n        \t\t/**\n        \t\t * Call the function that actually filters our collection,\n        \t\t * and then loop through our collection, adding each model to our filtered array.\n        \t\t */\n        \t\t_.each( this.filterCollection( search ), function( model ) {\n        \t\t\tfiltered.push( model.get( 'id' ) );\n        \t\t} );\n\n        \t\t// Create a new Field Type Section collection with the filtered array.\n        \t\tvar filteredSectionCollection = new fieldTypeSectionCollection( [\n\t\t\t\t{ \n\t\t\t\t\tid: 'filtered',\n\t\t\t\t\tnicename: 'Filtered Fields',\n\t\t\t\t\tfieldTypes: filtered\n\t\t\t\t}\n\t\t\t\t] );\n\n        \t\t// Request that our field types filter be applied, passing the collection we created above.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:fieldTypes', filteredSectionCollection );\n        \t\t// If we've pressed the 'enter' key, add the field to staging and clear the filter.\n        \t\tif ( 'undefined' != typeof e && e.addObject ) {\n        \t\t\tif ( 0 < filtered.length ) {\n        \t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', filtered[0] );\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n        \t\t\t}\n        \t\t}\n        \t} else {\n        \t\t// Clear our filter if the search text is empty.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\n        \t}\n        },\n\n        /**\n         * Search our field type collection for the search string.\n         * \n         * @since  3.0\n         * @param  string\t search \tstring being searched for\n         * @return backbone.collection\n         */\n        filterCollection: function( search ) {\n        \tsearch = search.toLowerCase();\n        \t// Get our list of field types\n        \tvar collection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\n        \t/*\n        \t * Backbone collections have a 'filter' method that loops through every model,\n        \t * waiting for you to return true or false. If you return true, the model is kept.\n        \t * If you return false, it's removed from the filtered result.\n        \t */\n\t\t\tvar filtered = collection.filter( function( model ) {\n\t\t\t\tvar found = false;\n\t\t\t\t\n\t\t\t\t// If we match either the ID or nicename, return true.\n\t\t\t\tif ( model.get( 'type' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\n\t\t\t\t */\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we match any of the aliases, return true.\n\t\t\t\tif ( model.get( 'alias' ) ) {\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn found;\n\t\t\t} );\n\t\t\t// Return our filtered collection.\n\t\t\treturn filtered;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles all the actions/functions related to our main field sortable.\n * All of the actual logic for our sortable is held here; the view just calls it using nfRadio.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/sortable',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When our field type buttons are dragged, we need to add or remove the active (blue) class.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\n\t\t\t// When our field staging is dragged, we need to add or remove the active (blue) class.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.addActiveClass );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.removeActiveClass );\n\t\t\t\n\t\t\t/*\n\t\t\t * Handles all the events fired by our sortable:\n\t\t\t * receive - dropped from type button or staging\n\t\t\t * over - dragging within or over the sortable\n\t\t\t * out - leaving the sortable\n\t\t\t * stop - stopped sorting/dragging\n\t\t\t * start - started sorting/dragging\n\t\t\t * update - stopped sorting/dragging and order has changed\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'receive:fieldsSortable', this.receiveFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'over:fieldsSortable', this.overfieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'out:fieldsSortable', this.outFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'stop:fieldsSortable', this.stopFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'start:fieldsSortable', this.startFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:fieldsSortable', this.updateFieldsSortable, this );\n\t\t},\n\n\t\t/**\n\t\t * Add the active class to our sortable so that its border is blue.\n\t\t * \n\t\t * @since 3.0\n\t\t * @return void\n\t\t */\n\t\taddActiveClass: function() {\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-active' );\t\n\t\t},\n\n\t\t/**\n\t\t * Remove the active class from our sortable\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tremoveActiveClass: function() {\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * Fires when we drop a field type button or staging onto our sortable\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\treceiveFieldsSortable: function( ui ) {\n\t\t\t/*\n\t\t\t * We have to do different things if we're dealing with a field type button or staging area.\n\t\t\t */ \n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type Button\n\t\t\t\t// Get our type string\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\t// Add a field (returns the tmp ID )\n\t\t\t\tvar tmpID = this.addField( type, false );\n\t\t\t\t/*\n\t\t\t\t * Update our helper id to the tmpID.\n\t\t\t\t * We do this so that when we sort, we have the proper ID.\n\t\t\t\t */ \n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\n\t\t\t\t// Remove the helper. Gets rid of a weird type artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\t// Trigger a drop field type event.\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'drop:fieldType', type, tmpID );\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Later, we want to reference 'this' context, so we define it here.\n\t\t\t\tvar that = this;\n\t\t\t\t// Make sure that our staged fields are sorted properly.\t\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t// Grab our staged fields.\n\t\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\t\t// Get our current field order.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Sortable isn't empty\n\t\t\t\t\t// If we're dealing with a sortable that isn't empty, get the order.\n\t\t\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t\t} else { // Sortable is empty\n\t\t\t\t\t// Sortable is empty, all we care about is our staged field draggable.\n\t\t\t\t\tvar order = ['nf-staged-fields-drag'];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Get the index of our droped element.\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\n\t\t\t\t// Loop through each staged fields model and insert a field.\n\t\t\t\tvar tmpIDs = [];\n\t\t\t\t_.each( stagedFields.models, function( field, index ) {\n\t\t\t\t\t// Add our field.\n\t\t\t\t\tvar tmpID = that.addField( field.get( 'slug' ) );\n\t\t\t\t\t// Add this newly created field to our order array.\n\t\t\t\t\torder.splice( insertedAt + index, 0, tmpID );\n\t\t\t\t} );\n\n\t\t\t\t// Remove our dropped element from our order array.\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\t\t\t\torder.splice( insertedAt, 1 );\n\t\t\t\t// Sort our fields\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', order );\n\t\t\t\t// Clear our staging\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\n\t\t\t\t// Remove our helper. Fixes a weird artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a field.\n\t\t * Builds the object necessary to add a field to the field model collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \ttype   field type\n\t\t * @param  boolean \tsilent add silently\n\t\t * @return string \ttmpID\n\t\t */\n\t\taddField: function( type, silent ) {\n\t\t\t// Default to false\n\t\t\tsilent = silent || false;\n\t\t\t// Get our field type model\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \n\t\t\t// Get our tmp ID\n\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\n\t\t\t// Add our field\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { id: tmpID, label: fieldType.get( 'nicename' ), type: type }, silent );\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\n\t\t\treturn tmpID;\n\t\t},\n\n\t\t/**\n\t\t * When the user drags a field type or staging over our sortable, we need to modify the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toverfieldsSortable: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t// String type\n\t\t\t\tvar type = jQuery( ui.helper ).data( 'id' );\n\t\t\t\t// Get our field type model.\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\t// Get our field type nicename.\n\t\t\t\tvar label = fieldType.get( 'nicename' );\n\t\t\t\t// Get our sortable element.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t// Get our fieldwidth.\n\t\t\t\tvar fieldWidth = jQuery( sortableEl ).width();\n\t\t\t\t// Set our currentHelper to an object var so that we can access it later.\n\t\t\t\tthis.currentHelper = ui.helper;\n\t\t\t\t// Update our helper label.\n\t\t\t\tjQuery( ui.helper ).html( label );\n\t\t\t\t// Remove the field type draggable classes and add sortable classes.\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-field-wrap' ).css( { 'width': fieldWidth, 'height': '50px' } );\t\t\t\t\t\t\n\t\t\t\t// Add our hover class if our sortable has been initialized.\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Get our sortable, and if it's initialized add our hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When the user moves a draggable outside of the sortable, we need to change the helper.\n\t\t * This returns the item to its pre-over state.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutFieldsSortable: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t/*\n\t\t\t\t * Get our helper clone.\n\t\t\t\t * This will let us access the previous label and classes of our helper.\n\t\t\t\t */ \n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\n\t\t\t\t// Set our helper label, remove our sortable class, and add the type class back to the type draggable.\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-field-wrap' ).addClass( 'nf-field-type-button' ).css( { 'width': '', 'height': '' } );\n\t\t\t\t// Get our sortable and if it has been intialized, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// If we've initialized our sortable, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging in the sortable:\n\t\t * remove our opacity setting\n\t\t * remove our ui helper\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopFieldsSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:stop', ui );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging in the sortable:\n\t\t * add an opacity setting of 0.5\n\t\t * show our item (jQuery hides the original item by default)\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartFieldsSortable: function( ui ) {\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\t\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t\t}\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:start', ui );\n\t\t},\n\n\t\t/**\n\t\t * Sort our fields when we change the order.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tupdateFieldsSortable: function( ui, sortable ) {\n\t\t\t\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\n\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\tvar dragFieldID = jQuery( ui.item ).prop( 'id' ).replace( 'field-', '' );\n\t\t\t\tvar dragModel = fieldCollection.get( dragFieldID );\n\n\t\t\t\t// Add our change event to the change tracker.\n\t\t\t\tvar data = { fields: [] };\n\t\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t\tvar oldPos = field._previousAttributes.order;\n\t\t\t\t\tvar newPos = field.get( 'order' );\n\t\t\t\t\t\n\t\t\t\t\tdata.fields.push( {\n\t\t\t\t\t\tmodel: field,\n\t\t\t\t\t\tattr: 'order',\n\t\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\t\tafter: newPos\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t\tvar label = {\n\t\t\t\t\tobject: 'Field',\n\t\t\t\t\tlabel: dragModel.get( 'label' ),\n\t\t\t\t\tchange: 'Re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\t\tdashicon: 'sort'\n\t\t\t\t};\n\n\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortFields', dragModel, null, label, data );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles interactions with our field collection.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/data',['models/fields/fieldCollection', 'models/fields/fieldModel'], function( fieldCollection, fieldModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tadding: false,\n\t\tremoving: false,\n\t\t\n\t\tinitialize: function() {\n\t\t\t// Load our field collection from our localized form data\n\t\t\tthis.collection = new fieldCollection( preloadedFormData.fields );\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a field is removed so that we can add it to our 'deleted_fields' object.\n\t\t\tthis.collection.removedIDs = {};\n\n\t\t\t// Respond to requests for data about fields and to update/change/delete fields from our collection.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:collection', this.getFieldCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:field', this.getField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'redraw:collection', this.redrawFieldCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:tmpID', this.getTmpFieldID, this );\n\n\t\t\tnfRadio.channel( 'fields' ).reply( 'add', this.addField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'delete', this.deleteField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:fields', this.sortFields, this );\n\n\t\t\t/*\n\t\t\t * Respond to requests to set our 'adding' and 'removing' state. This state is used to track whether or not\n\t\t\t * we should run animations in our fields collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:adding', this.getAdding, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:adding', this.setAdding, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:removing', this.getRemoving, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:removing', this.setRemoving, this );\n\t\t},\n\n\t\tgetFieldCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tredrawFieldCollection: function() {\n\t\t\tthis.collection.trigger( 'reset', this.collection );\n\t\t},\n\n\t\tgetField: function( id ) {\n\t\t\tif ( this.collection.findWhere( { key: id } ) ) {\n\t\t\t\t/*\n\t\t\t\t * First we check to see if a key matches what we were sent.\n\t\t\t\t */\t\t\t\t\n\t\t\t\treturn this.collection.findWhere( { key: id } );\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * If it doesn't, we try to return an ID that matches.\n\t\t\t\t */\n\t\t\t\treturn this.collection.get( id );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a field to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \t\t\tfield data to insert\n\t\t * @param bool \t\tsilent \t\t\tprevent events from firing as a result of adding\n\t\t * @param bool  \trenderTrigger\tshould this cause the view to re-render?\n\t\t * @param string  \taction\t\t\taction context - are we performing a higher level action? i.e. duplicate\n\t\t */\n\t\taddField: function( data, silent, renderTrigger, action ) {\n\t\t\t\n\t\t\t/*\n\t\t\t * Set our fields 'adding' value to true. This enables our add field animation.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', true );\n\n\t\t\tsilent = silent || false;\n\t\t\taction = action || '';\n\t\t\trenderTrigger = ( 'undefined' == typeof renderTrigger ) ? true : renderTrigger;\n\n\t\t\tif ( false === data instanceof Backbone.Model ) {\n\t\t\t\tif ( 'undefined' == typeof ( data.id ) ) {\n\t\t\t\t\tdata.id = this.getTmpFieldID();\n\t\t\t\t}\n\t\t\t\tvar model = new fieldModel( data );\n\t\t\t} else {\n\t\t\t\tvar model = data;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * TODO: Add an nfRadio message filter for the model variable.\n\t\t\t * Currently, we manually replace for saved fields; this should be moved to a separate controller.\n\t\t\t * \n\t\t\t * If we're adding a saved field, make sure that we set the type to the parentType.\n\t\t\t */\n\n\t\t\tif ( jQuery.isNumeric( model.get( 'type' ) ) ) {\n\t\t\t\tvar savedType = nfRadio.channel( 'fields' ).request( 'get:type', model.get( 'type' ) );\n\t\t\t\tmodel.set( 'type', savedType.get( 'parentType' ) );\n\t\t\t}\n\n\t\t\tvar newModel = this.collection.add( model, { silent: silent } );\n\t\t\t\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'add:field', model );\n\t\t\tif ( renderTrigger ) {\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'render:newField', newModel, action );\n\t\t\t}\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'after:addField', model );\n\t\t\t\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Update a field setting by ID\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  int \t\tid    field id\n\t\t * @param  string \tname  setting name\n\t\t * @param  mixed \tvalue setting value\n\t\t * @return void\n\t\t */\n\t\tupdateFieldSetting: function( id, name, value ) {\n\t\t\tvar fieldModel = this.collection.get( id );\n\t\t\tfieldModel.set( name, value );\n\t\t},\n\n\t\t/**\n\t\t * Get our fields sortable EL\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Array \torder optional order array like: [field-1, field-4, field-2]\n\t\t * @return void\n\t\t */\n\t\tsortFields: function( order, ui, updateDB ) {\n\t\t\tif ( null == updateDB ) {\n\t\t\t\tupdateDB = true;\n\t\t\t}\n\t\t\t// Get our sortable element\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Make sure that sortable is enabled\n\t\t\t\t// JS ternerary for setting our order\n\t\t\t\tvar order = order || jQuery( sortableEl ).sortable( 'toArray' );\n\n\t\t\t\t// Loop through all of our fields and update their order value\n\t\t\t\t_.each( this.collection.models, function( field ) {\n\t\t\t\t\t// Get our current position.\n\t\t\t\t\tvar oldPos = field.get( 'order' );\n\t\t\t\t\tvar id = field.get( 'id' );\n\t\t\t\t\tif ( jQuery.isNumeric( id ) ) {\n\t\t\t\t\t\tvar search = 'field-' + id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar search = id;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Get the index of our field inside our order array\n\t\t\t\t\tvar newPos = order.indexOf( search ) + 1;\n\t\t\t\t\tfield.set( 'order', newPos );\n\t\t\t\t} );\n\t\t\t\tthis.collection.sort();\n\n\t\t\t\tif ( updateDB ) {\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Delete a field from our collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tfield model to be deleted\n\t\t * @return void\n\t\t */\n\t\tdeleteField: function( model ) {\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'delete:field', model );\n\t\t\tthis.removing = true;\n\t\t\tthis.collection.remove( model );\n\t\t\t\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t},\n\n\t\t/**\n\t\t * Return a new tmp id for our fields.\n\t\t * Gets the field collection length, adds 1, then returns that prepended with 'tmp-'.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return string\n\t\t */\n\t\tgetTmpFieldID: function() {\n\t\t\tvar tmpNum = this.collection.tmpNum;\n\t\t\tthis.collection.tmpNum++;\n\t\t\treturn 'tmp-' + tmpNum;\n\t\t},\n\n\t\tgetAdding: function() {\n\t\t\treturn this.adding;\n\t\t},\n\n\t\tsetAdding: function( val ) {\n\t\t\tthis.adding = val;\n\t\t},\n\n\t\tgetRemoving: function() {\n\t\t\treturn this.removing;\n\t\t},\n\n\t\tsetRemoving: function( val ) {\n\t\t\tthis.removing = val;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our repeater option.\n * \n * @package Ninja App builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/optionRepeaterModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\terrors: {},\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// When we add errors to the option row, run a function.\n\t\t\tthis.on( 'change:errors', this.changeErrors, this );\n\t\t},\n\n\t\t/**\n\t\t * When we change the errors on our model, check to see if we should add or remove \n\t\t * the error from the setting that this option is a part of.\n\t\t *\n\t\t * Adding an error to the setting model simply disables the drawer and other\n\t\t * navigation. As long as we have one option with an error, it should be set to true.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeErrors: function( model ) {\n\t\t\t/*\n\t\t\t * The errors attribute will be an object, so if we don't have any keys, it's empty.\n\t\t\t * If we have an empty object, check to see if we can remove the error from our setting model.\n\t\t\t */\n\n\t\t\tif ( 0 == _.size( model.get( 'errors' ) ) ) {\n\t\t\t\t/*\n\t\t\t\t * Loop through our collection to see if we have any other errors.\n\t\t\t\t */\n\t\t\t\tvar errorsFound = false;\n\t\t\t\t_.each( model.collection.models, function( opt ) {\n\t\t\t\t\tif ( 0 != _.size( opt.get( 'errors' ) ) ) {\n\t\t\t\t\t\terrorsFound = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( ! errorsFound ) {\n\t\t\t\t\tmodel.collection.settingModel.set( 'error', false );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * We have errors, so make sure that the setting model has an error set.\n\t\t\t\t */\n\t\t\t\tmodel.collection.settingModel.set( 'error', true );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Model that represents our list options.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/optionRepeaterCollection',['models/app/optionRepeaterModel'], function( listOptionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: listOptionModel,\n\t\tcomparator: 'order',\n\n\t\tinitialize: function( models, options ) {\n\t\t\t// Listen to the 'sort' event\n\t\t\tthis.on( 'sort', this.changeCollection, this );\n\t\t\t// Listen to the 'add' event\n\t\t\tthis.on( 'add', this.addOption, this );\n\t\t\tthis.settingModel = options.settingModel;\n\t\t},\n\n\t\tchangeCollection: function() {\n\t\t\t// Trigger a 'sort:options' event so that our field model can update\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:options', this );\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'sort:options', this );\n\t\t},\n\n\t\taddOption: function( model, collection ) {\n\t\t\tmodel.set( 'settingModel', this.settingModel );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","define( 'views/app/drawer/optionRepeaterError',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\tclassName: 'nf-error',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-error'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/optionRepeaterOption',['views/app/drawer/optionRepeaterError'], function( ErrorView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\tclassName: 'nf-table-row',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-default-row',\n\t\tid: function() {\n\t\t\treturn this.model.cid;\n\t\t},\n\n\t\tregions: {\n\t\t\terror: '.nf-option-error'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.settingModel = data.settingModel;\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tthis.collection = data.collection;\n\t\t\tthis.columns = data.columns;\n\t\t\tthis.model.on( 'change:errors', this.renderErrors, this );\n\t\t\tthis.model.on( 'change', this.render, this );\n\n\t\t\tif ( 'undefined' != typeof this.settingModel.get( 'tmpl_row' ) ) {\n\t\t\t\tthis.template = '#' + this.settingModel.get( 'tmpl_row' );\n\t\t\t}\n\n\t\t\tthis.hasErrors = false;\n\t\t},\n\n\t\tonBeforeDestroy: function() {\t\n\t\t\tthis.model.off( 'change', this.render );\n\t\t\tthis.model.off( 'change:errors', this.renderErrors );\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\t/*\n\t\t\t * We want to escape any HTML being output for our label.\n\t\t\t */\n\t\t\tif ( this.model.get( 'label' ) ) {\n\t\t\t\tvar label = this.model.get( 'label' );\n\t\t\t\tthis.model.set( 'label', _.escape( label ), { silent: true } );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.settingModel.get( 'name' ) + '-option' ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\t/*\n\t\t\t * We want to unescape any HTML being output for our label.\n\t\t\t */\n\t\t\tif ( this.model.get( 'label' ) ) {\n\t\t\t\tvar label = this.model.get( 'label' );\n\t\t\t\tthis.model.set( 'label', _.unescape( label ), { silent: true } );\n\t\t\t}\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( this.model.get( 'new' ) ) {\n\t\t\t\tjQuery( this.el ).find( 'input:first' ).focus();\n\t\t\t\tthis.model.set( 'new', false );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .setting': 'changeOption',\n\t\t\t'click .nf-delete': 'deleteOption',\n\t\t\t'keyup': 'keyupOption'\n\t\t},\n\n\t\tchangeOption: function( e ) {\n\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'change:option', e, this.model, this.dataModel, this.settingModel );\n\t\t},\n\n\t\tdeleteOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:deleteOption', this.model, this.collection, this.dataModel );\n\t\t},\n\n\t\tkeyupOption: function( e ) {\n\t\t\tthis.maybeAddOption( e );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel )\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel )\n\t\t},\n\n\t\tmaybeAddOption: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel );\n\t\t\t}\n\t\t},\n\n\t\trenderErrors: function() {\n\t\t\t\n\t\t\t// if ( jQuery.isEmptyObject( this.model.get( 'errors' ) ) ) {\n\t\t\t// \treturn false;\n\t\t\t// }\n\n\t\t\t/*\n\t\t\t * We don't want to redraw the entire row, which would remove focus from the eq textarea,\n\t\t\t * so we add and remove error classes manually.\n\t\t\t */\n\t\t\tif ( 0 == Object.keys( this.model.get( 'errors' ) ) && this.hasErrors ) {\n\t\t\t\tthis.error.empty();\n\t\t\t\tjQuery( this.el ).removeClass( 'nf-error' );\n\t\t\t} else {\n\t\t\t\tthis.hasErrors = true;\n\t\t\t\tthis.error.show( new ErrorView( { model: this.model } ) );\n\t\t\t\tjQuery( this.el ).addClass( 'nf-error' );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\tgetColumns: function() {\n\t\t\t\t\treturn that.columns;\n\t\t\t\t},\n\t\t\t\trenderOptions: function( column, value ) {\n\n\t\t\t\t\tif( 'undefined' == typeof that.options.columns[ column ] ) return;\n\n\t\t\t\t\tvar html = '';\n\t\t\t\t\t_.each( that.options.columns[ column ].options, function( option ){\n\t\t\t\t\t\tvar selected = ( value == option.value ) ? ' selected' : '';\n\t\t\t\t\t\thtml += '<option value=\"' + option.value + '\"' +  selected + '>' + option.label + '</option>';\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturn html;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/app/drawer/optionRepeaterEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'tr',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-empty'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/optionRepeaterComposite',['views/app/drawer/optionRepeaterOption', 'views/app/drawer/optionRepeaterEmpty', 'models/app/optionRepeaterCollection'], function( listOptionView, listEmptyView, listOptionCollection ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\t\tchildView: listOptionView,\n\t\temptyView: listEmptyView,\n\t\treorderOnSort: false,\n\n\t\tinitialize: function( data ) {\n\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = data.dataModel.get( this.model.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: this.model } );\n\t\t\t\toptionCollection.add( data.dataModel.get( this.model.get( 'name' ) ) );\n\t\t\t\tdata.dataModel.set( this.model.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\n\t\t\tthis.collection = optionCollection;\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tthis.childViewOptions = { settingModel: this.model, collection: this.collection, dataModel: data.dataModel, columns: this.model.get( 'columns' ) };\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).find( '.nf-list-options-tbody' ).sortable( {\n\t\t\t\thandle: '.handle',\n\t\t\t\thelper: 'clone',\n\t\t\t\tplaceholder: 'nf-list-options-sortable-placeholder',\n\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\topacity: 0.95,\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'start:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'stop:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'update:optionSortable', ui, this, that );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderHeaders: function() {\n\t    \t\t\tvar columns = '<div>&nbsp;</div>';\n\t    \t\t\t_.each( this.columns, function( col ) {\n\t    \t\t\t\tcolumns += '<div>' + col.header + '</div>';\n\t    \t\t\t} );\n\t    \t\t\tcolumns += '<div>&nbsp;</div>';\n\t\t\t\t\treturn columns;\n\t\t\t\t},\n\n\t    \t\trenderSetting: function() {\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t\t\t\trenderFieldsetClasses: function() {\n\t\t\t\t\treturn that.model.get( 'name' );\n\t\t\t\t},\n\n\t\t\t\tcurrencySymbol: function() {\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' ) || nfi18n.currency_symbol;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-list-options-tbody' ).append( childView.el );\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-add-new': 'clickAddOption'\n\t\t},\n\n\t\tclickAddOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Handles tasks associated with our option-repeater.\n * \n * Return our repeater child view.\n *\n * Also listens for changes to the options settings.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/optionRepeater',['models/app/optionRepeaterModel', 'models/app/optionRepeaterCollection', 'views/app/drawer/optionRepeaterComposite'], function( listOptionModel, listOptionCollection, listCompositeView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for the childView for list type fields.\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t\n\t\t\t// Listen for changes to our list options.\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'change:option', this.changeOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:addOption', this.addOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:deleteOption', this.deleteOption );\n\n\t\t\t// Respond to requests related to our list options sortable.\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'update:optionSortable', this.updateOptionSortable, this );\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'stop:optionSortable', this.stopOptionSortable, this );\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'start:optionSortable', this.startOptionSortable, this );\n\t\t\n\t\t\t/**\n\t\t\t * When we init our setting model, we need to convert our array/objects into collections/models\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'init:dataModel', this.convertSettings );\n\t\t},\n\n\t\t/**\n\t\t * Update an option value in our model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te          event\n\t\t * @param  backbone.model \tmodel      option model\n\t\t * @param  backbone.model \tdataModel\n\t\t * @return void\n\t\t */\n\t\tchangeOption: function( e, model, dataModel, settingModel ) {\n\t\t\tvar name = jQuery( e.target ).data( 'id' );\n\t\t\tif ( 'selected' == name ) {\n\t\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\n\t\t\t\t\tvar value = 1;\n\t\t\t\t} else {\n\t\t\t\t\tvar value = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t}\n\t\t\t\n\t\t\tvar before = model.get( name );\n\t\t\t\n\t\t\tmodel.set( name, value );\n\t\t\t// Trigger an update on our dataModel\n\t\t\tthis.triggerDataModel( model, dataModel );\n\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + model.get( 'label' ) + ' ' + name + ' changed from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', model, changes, label );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'update:option', model, dataModel, settingModel );\n\t\t\tnfRadio.channel( 'option-repeater-option-' + name  ).trigger( 'update:option', e, model, dataModel, settingModel );\n\t\t\tnfRadio.channel( 'option-repeater-' + settingModel.get( 'name' ) ).trigger( 'update:option', model, dataModel, settingModel );\n\t\t},\n\n\t\t/**\n\t\t * Add an option to our list\n\t\t * \n\t\t * @since 3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\taddOption: function( collection, dataModel ) {\n\t\t\tvar modelData = {\n\t\t\t\torder: collection.length,\n\t\t\t\tnew: true,\n\t\t\t\toptions: {}\n\t\t\t};\n\t\t\t_.each( collection.settingModel.get( 'columns' ), function( col, key ) {\n\t\t\t\tmodelData[ key ] = col.default;\n\n\t\t\t\tif( 'undefined' != typeof col.options ){\n\t\t\t\t\tmodelData.options[ key ] = col.options;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tvar model = new listOptionModel( modelData );\n\t\t\tcollection.add( model );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'add:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Delete an option from our list\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.model \t\tmodel       list option model\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\tdeleteOption: function( model, collection, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\n\t\t\t// Add our field deletion to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + newModel.get( 'label' ) + ' Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: collection\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeListOption', newModel, null, label, data );\n\t\t\t\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tif ( 'object' == typeof changeModel.get( 'data' ) ) {\n\t\t\t\t\t_.each( changeModel.get( 'data' ), function( dataModel ) {\n\t\t\t\t\t\tif ( dataModel.model == dataModel ) {\n\t\t\t\t\t\t\tdataModel.model = newModel;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tcollection.remove( model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'remove:option', model );\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'remove:option', model );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Creates an arbitrary value on our collection, then clones and updates that collection.\n\t\t * This forces a change event to be fired on the dataModel where the list option collection data is stored.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\ttriggerDataModel: function( model, dataModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\t\n\t\t},\n\n\t\t/**\n\t\t * Return our list composite view to the setting collection view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tsettings model\n\t\t * @return void\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn listCompositeView;\n\t\t},\n\n\t\t/**\n\t\t * When we sort our list options, change the order in our option model and trigger a change.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t \t\tsortable \tjQuery UI element\n\t\t * @param  backbone.model \tsetting  \tSetting model\n\t\t * @return void\n\t\t */\n\t\tupdateOptionSortable: function( ui, sortable, setting ) {\n\t\t\t\n\t\t\tvar newOrder = jQuery( sortable ).sortable( 'toArray' );\n\t\t\tvar dragModel = setting.collection.get( { cid: jQuery( ui.item ).prop( 'id' ) } );\n\t\t\tvar data = {\n\t\t\t\tcollection: setting.collection,\n\t\t\t\tobjModels: []\n\t\t\t};\n\n\t\t\t_.each( newOrder, function( cid, index ) {\n\t\t\t\tvar optionModel = setting.collection.get( { cid: cid } );\n\t\t\t\tvar oldPos = optionModel.get( 'order' );\n\t\t\t\toptionModel.set( 'order', index );\n\t\t\t\tvar newPos = index;\n\n\t\t\t\tdata.objModels.push( {\n\t\t\t\t\tmodel: optionModel,\n\t\t\t\t\tattr: 'order',\n\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\tafter: newPos\n\t\t\t\t} );\n\t\t\t} );\n\t\t\t\n\t\t\tsetting.collection.sort( { silent: true } );\n\t\t\t\n\t\t\tvar label = {\n\t\t\t\tobject: setting.dataModel.get( 'objectType' ),\n\t\t\t\tlabel: setting.dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + dragModel.get( 'label' ) + ' re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\tdashicon: 'sort'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortListOptions', dragModel, null, label, data );\n\t\t\tthis.triggerDataModel( dragModel, setting.dataModel );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:option', dragModel, setting );\n\t\t\tnfRadio.channel( 'option-repeater-' + setting.get( 'name' ) ).trigger( 'sort:option', dragModel, setting );\n\t\t},\n\n\t\t/**\n\t\t * When we stop sorting our list options, reset our item opacity.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t},\n\n\t\t/**\n\t\t * When we start sorting our list options, remove containing divs and set our item opacity to 0.5\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Objects ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.placeholder ).find( 'div' ).remove();\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t},\n\n\t\t/**\n\t\t * Convert settings from an array/object to a collection/model\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model dataModel\n\t\t * @param  Backbone.Model settingModel\n\t\t * @return void\n\t\t */\n\t\tconvertSettings: function( dataModel, settingModel ) {\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = dataModel.get( settingModel.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: settingModel } );\n\t\t\t\toptionCollection.add( dataModel.get( settingModel.get( 'name' ) ) );\n\t\t\t\tdataModel.set( settingModel.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from a field currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our fields.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n            _.each( fieldCollection.models, function( field ) {\n\t\t\t\tfield.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( fieldSettings, { objectType: 'fields' } );\n\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingModel', this.getSettingModel, this );\n\t\t\t\n\t\t\t// Responds to requests for our collection.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingCollection', this.getSettingCollection, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t},\n\n\t\tgetSettingCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel to add the individual Credit Card Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldCreditCard',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n          this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.dropCreditCardField );\n        },\n\n        dropCreditCardField: function( fieldModel ) {\n\n            if( 'creditcard' == fieldModel.get( 'type' ) ) {\n\n                var order = fieldModel.get( 'order' );\n\n                nfRadio.channel( 'fields' ).request( 'delete', fieldModel );\n\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\n\n                    var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n                    var newField = {\n                        id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\n                        type: type,\n                        label: fieldType.get( 'nicename' ),\n                        order: order\n                    };\n\n                    nfRadio.channel( 'fields' ).request( 'add', newField );\n                });\n            }\n\n        },\n\n        stageCreditCardField: function( model ) {\n\n            if( 'creditcard' == model.get( 'slug' ) ) {\n\n                nfRadio.channel( 'fields' ).request( 'remove:stagedField', '', model );\n\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\n                    nfRadio.channel('fields').request('add:stagedField', type );\n                });\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel to add the individual List Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldList',[ 'models/app/optionRepeaterCollection' ], function( ListOptionCollection ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'option-repeater-option-label' ), 'update:option', this.updateOptionLabel );\n            this.listenTo( nfRadio.channel( 'option-repeater-option-value' ), 'update:option', this.updateOptionValue );\n        \n            /*\n             * When we init our model, convert our options from an array of objects to a collection of models.\n             */\n            this.listenTo( nfRadio.channel( 'fields-list' ), 'init:fieldModel', this.convertOptions );\n        },\n\n        updateOptionLabel: function( e, model, dataModel, settingModel ) {\n\n            if( 'list' != fieldTypeData[ dataModel.get( 'type' ) ].parentType ) return;\n\n            if( model.get( 'manual_value' ) ) return;\n\n            value = jQuery.slugify( model.get( 'label' ), { separator: '-' } );\n\n            model.set( 'value', value );\n            model.trigger( 'change', model );\n\n            // TODO: Set focus on value input\n            // jQuery( e.target ).closest( 'nf-table-row' ).find( '*[data-id=\"value\"] ).focus();\n        },\n\n        updateOptionValue: function( e, model, dataModel, settingModel ) {\n\n            if( 'list' != fieldTypeData[ dataModel.get( 'type' ) ].parentType ) return;\n\n            model.set( 'manual_value', true );\n        },\n\n        convertOptions: function( fieldModel ) {\n            /*\n             * Our options are stored in our database as objects, not collections.\n             * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n             */ \n            var options = fieldModel.get( 'options' );\n\n            var settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'options' );\n\n            if ( false == options instanceof Backbone.Collection ) {\n                options = new ListOptionCollection( [], { settingModel: settingModel } );\n                options.add( fieldModel.get( 'options' ) );\n                fieldModel.set( 'options', options, { silent: true } );\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel to add the individual Credit Card Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldPassword',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'fields' ), 'drop:fieldType', this.dropField );\n            this.listenTo( nfRadio.channel( 'fields' ), 'add:stagedField', this.stageField );\n        },\n\n        dropField: function( type, tmpID ) {\n\n            if( 'password' == type ) {\n\n                var model = nfRadio.channel( 'fields').request( 'get:field', tmpID );\n\n                var order = model.get( 'order' );\n\n                nfRadio.channel( 'fields' ).request( 'delete', model );\n\n                _.each( [ 'password', 'passwordconfirm' ], function( type ) {\n\n                    var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n                    var newField = {\n                        id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\n                        type: type,\n                        label: fieldType.get( 'nicename' ),\n                        order: order\n                    };\n\n                    nfRadio.channel('fields').request('add', newField );\n                });\n            }\n\n        },\n\n        stageField: function( model ) {\n\n            var field_slug = model.get( 'slug' );\n\n            if( 'password' == field_slug ) {\n\n                nfRadio.channel( 'fields' ).request( 'remove:stagedField', '', model );\n\n                _.each( [ 'password', 'passwordconfirm' ], function( type ) {\n\n                    var silent = ( type == field_slug );\n                    nfRadio.channel('fields').request('add:stagedField', type, silent );\n                });\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldQuantity',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\tif ( 'product_assignment' == settingModel.get( 'name' ) ) {\n\t\t\t\tvar productFields = this.getProductFields( settingModel );\n\t\t\t\tsettingModel.set( 'options', productFields );\n\t\t\t}\n\t\t},\n\n\t\tgetProductFields: function( settingModel ) {\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn productFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldShipping',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options' ), 'render:setting', this.addMask );\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options-option' ), 'render:setting', this.addMask );\n\t\t},\n\n\t\taddMask: function( settingModel, dataModel, view ) {\n\t\t\tjQuery( view.el ).find( '[data-id=\"value\"]' ).each( function() {\n\t\t\t\tjQuery( this ).autoNumeric({\n\t\t\t\t\taSign: '$', // TODO: Use form setting\n\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\taDec: decimalPoint\n\t\t\t\t});\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * When we add a new field, update its key.\n *\n * When we change the key, update any refs to the key.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/key',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When we add a field, update its key.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.newFieldKey );\n\n\t\t\t// When we edit a label, update our key.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-label' ), 'update:setting', this.updateLabel );\n\n\t\t\t// When we edit a key, check for places that key might be used.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\n\n\t\t\t// When we type inside the admin key field, we need to save our manual_key setting.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-key' ), 'keyup:setting', this.keyUp );\n\t\t},\n\n\t\t/**\n\t\t * Add a key to our new field model.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param backbone.model model new field model\n\t\t * @return void\n\t\t */\n\t\tnewFieldKey: function( model ) {\n\t\t\tvar d = new Date();\n\t\t\tvar n = d.valueOf();\n\t\t\tvar key = this.keyExists( model.get( 'type' ) + '_' + n );\n\t\t\tmodel.set( 'key', key, { silent: true } );\n\n\t\t\tif( 'undefined' == model.get( 'manual_key' ) ) {\n\t\t\t\tmodel.set('manual_key', false, {silent: true});\n\t\t\t}\n\t\t},\n\n\t\tupdateLabel: function( model ) {\n\n\t\t\t/*\n\t\t\t * If we haven't entered a key manually, update our key when our label changes.\n\t\t\t */\n\t\t\tif ( ! model.get( 'manual_key' ) && 0 != jQuery.trim( model.get( 'label' ) ).length ) {\n\t\t\t\t/*\n\t\t\t\t * When we're editing settings, we expect the edits to fire one at a time.\n\t\t\t\t * Since we're calling this in the middle of our label update, anything that inquires about what has changed after we set our key will see both label and key.\n\t\t\t\t * We need to remove the label from our model.changed property so that all that has changed is the key.\n\t\t\t\t * \n\t\t\t\t */\n\t\t\t\tdelete model.changed.label;\n\t\t\t\tvar key = this.keyExists( model.get( 'label' ) );\n\t\t\t\tmodel.set( 'key', key );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a field key is updated, find any merge tags using the key and update them.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model model field model\n\t\t * @return void\n\t\t */\n\t\tupdateKey: function( dataModel ) {\n\t\t\tvar key = dataModel.get( 'key' );\n\t\t\tthis.settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'key' );\n\t\t\tthis.setError( key, dataModel );\n\t\t},\n\n\t\tkeyUp: function( e, settingModel, dataModel ) {\n\t\t\tdataModel.set( 'manual_key', true );\n\t\t\tthis.settingModel = settingModel;\n\t\t\tvar key = jQuery( e.target ).val();\n\t\t\tthis.setError( key, dataModel );\n\t\t},\n\n\t\tsetError: function( key, dataModel ) {\n\t\t\tvar error = false;\n\t\t\tif ( '' == jQuery.trim( key ) ) {\n\t\t\t\terror = 'Field keys can\\'t be empty. Please enter a key.';\n\t\t\t} else if ( key != this.keyExists( key, dataModel ) ) {\n\t\t\t\terror = 'Field keys must be unique. Please enter another key.'\n\t\t\t}\n\n\t\t\tif ( error ) {\n\t\t\t\tthis.settingModel.set( 'error', error );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:fieldKey', dataModel );\n\t\t\t\tthis.settingModel.set( 'error', false );\n\t\t\t}\n\t\t},\n\n\t\tkeyExists: function( key, dataModel ) {\n\t\t\tvar newKey = jQuery.slugify( key, { separator: '_' } );\n\t\t\tif ( 0 != newKey.length ) {\n\t\t\t\tkey = newKey;\n\t\t\t}\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tvar x = 1;\n\t\t\tvar testKey = key;\n\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\tif ( dataModel != field && testKey == field.get( 'key' ) ) {\n\t\t\t\t\ttestKey = key + '_' + x;\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t} );\n\t\t\t\n\t\t\tkey = testKey;\n\n\t\t\treturn key;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Creates notices for our fields domain.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/notices',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:stagedField', this.addStagedField );\n\t\t},\n\n\t\taddStagedField: function( model ) {\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addStagedField', model.get( 'nicename' ) + ' added to staging' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles mobile-specific JS for our fields domain.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/mobile',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the start of our sorting.\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'render:fieldsSortable', this.initWiggle );\n\t\t\t// Listen for when we start sorting.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:start', this.startWiggle );\n\t\t\t// Listen for when we stop sorting.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:stop', this.stopWiggle );\n\t\t},\n\n\t\tinitWiggle: function( view ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( view.el ).find( '.nf-field-wrap' ).on( 'taphold', function() {\n\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tstartWiggle: function( ui ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper' ).ClassyWiggle( 'stop' );\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.75' ).ClassyWiggle( 'start', { degrees: ['.5', '1', '.5', '0', '-.5', '-1', '-.5', '0'] } );\n\t\t\t}\n\t\t},\n\n\t\tstopWiggle: function( ui ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ui.helper ).ClassyWiggle( 'stop' );\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper drag-selected' );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * If we add a saved field to our form and then update it, set the \"saved\" flag to false.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/savedFields',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tignoreAttributes: [\n\t\t\t'editActive',\n\t\t\t'order',\n\t\t\t'saved',\n\t\t\t'jBox'\n\t\t],\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'update:setting', this.updateField );\n\t\t\t// Listen to clicks on our add saved field button.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:addSavedField', this.clickAddSavedField, this );\n\t\t},\n\n\t\tupdateField: function( dataModel ) {\n\t\t\tif ( dataModel.get( 'saved' ) ) {\n\t\t\t\t\n\t\t\t\tvar modified = false;\n\t\t\t\tvar changedAttributes = _.keys( dataModel.changedAttributes() );\n\t\t\t\tvar that = this;\n\t\t\t\t_.each( changedAttributes, function( changed ) {\n\t\t\t\t\tif ( -1 == that.ignoreAttributes.indexOf( changed ) ) {\n\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\t\n\t\t\t\tif ( modified ) {\n\t\t\t\t\tdataModel.set( 'saved', false );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tclickAddSavedField: function( e, dataModel ) {\n\t\t\tvar modelClone = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\n\n\t\t\tvar fieldData = modelClone.attributes;\n\t\t\tfieldData.saved = true;\n\n\t\t\tdelete fieldData.jBox;\n\t\t\tdelete fieldData.editActive;\n\t\t\tdelete fieldData.created_at;\n\t\t\tdelete fieldData.order;\n\t\t\tdelete fieldData.id;\n\t\t\tdelete fieldData.formID;\n\t\t\tdelete fieldData.parent_id;\n\t\t\t\n\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', fieldData.type );\n\t\t\tvar newType = _.clone( type.attributes );\n\n\t\t\tvar nicename = jQuery( e.target ).parent().parent().find( 'input' ).val();\n\t\t\tconsole.log( nicename );\n\t\t\tnewType.nicename = nicename;\n\t\t\tfieldData.label = nicename;\n\t\t\tfieldData.nicename = nicename;\n\t\t\tdataModel.set( 'addSavedLoading', true );\n\t\t\tvar newTypeDefaults = JSON.stringify( fieldData );\n\n\t\t\tjQuery.post( ajaxurl, { action: 'nf_create_saved_field', field: newTypeDefaults, security: nfAdmin.ajaxNonce }, function( response ) {\n\t\t\t\tresponse = JSON.parse( response );\n\t\t\t\tnewType.id = response.data.id;\n\t\t\t\tnewType.nicename = nicename;\n\t\t\t\tnewType.settingDefaults = fieldData;\n\n\t\t\t\tvar typeCollection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\n\t\t\t\tvar newModel = typeCollection.add( newType );\n\n\t\t\t\tvar typeSections = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\n\t\t\t\ttypeSections.get( 'saved' ).get( 'fieldTypes' ).push( newType.id );\n\n\t\t\t\t// dataModel.set( 'type', response.data.id );\n\t\t\t\tdataModel.set( 'addSavedLoading', false );\n\t\t\t\tdataModel.unset( 'addSavedLoading', { silent: true } );\n\t\t\t\tdataModel.get( 'jBox' ).close();\n\t\t\t\t// dataModel.set( 'saved', true );\n\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addSaved', 'Saved Field Added' );\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a datepicker setting, add our datepicker.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldDatepicker',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-datepicker' ), 'render:setting', this.addDatepicker );\n\t\t},\n\n\t\taddDatepicker: function( settingModel, dataModel, view ) {\n\t\t\tvar dateObject = pikadayResponsive( jQuery( view.el ).find( '.setting' )[0] );\t\t\t\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldDisplayCalc',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-calc_var' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\t// console.log( 'render!' );\n\t\t},\n\n\t\tgetProductFields: function( settingModel ) {\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn productFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Creates and stores a collection of action types. This includes all of the settings shown when editing a field.\n *\n * Loops over our preloaded data and adds that to our action type collection\n *\n * Also responds to requests for data about action types\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/types',[ 'models/app/typeCollection' ], function( TypeCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\t/*\n\t\t\t * Instantiate \"installed\" actions collection.\n\t\t\t */\n\t\t\tthis.installedActions = new TypeCollection(\n\t\t\t\t_.filter( actionTypeData, function( type ) {\n\t\t\t\t\treturn type.section == 'installed';\n\t\t\t\t\t} \n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tslug: 'installed',\n\t\t\t\t\tnicename: nfi18n.installed\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.availableActions = new TypeCollection(\n\t\t\t\t_.filter( actionTypeData, function( type ) {\n\t\t\t\t\treturn type.section == 'available';\n\t\t\t\t\t} \n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tslug: 'available',\n\t\t\t\t\tnicename: nfi18n.available\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:type', this.getType, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:installedActions', this.getInstalledActions, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:availableActions', this.getAvailableActions, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetType: function( id ) {\n\t\t\t// Search our installed actions first\n\t\t\tvar type = this.installedActions.get( id );\n\t\t\tif ( ! type ) {\n\t\t\t\ttype = this.availableActions.get( id );\n\t\t\t}\n        \treturn type;\n        },\n\n        /**\n         * Return the installed action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetInstalledActions: function() {\n        \treturn this.installedActions;\n        },\n\n        /**\n         * Return the available action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetAvailableActions: function() {\n        \treturn this.availableActions;\n        },\n\n        /**\n         * Add a field type to our staging area when the field type button is clicked.\n         *\n         * @since 3.0\n         * @param Object e event\n         * @return void\n         */\n        addStagedField: function( e ) {\n        \tvar type = jQuery( e.target ).data( 'id' );\n        \tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n        },\n\n        /**\n         * Return our field type settings sections\n         *\n         * @since  3.0\n         * @return backbone.collection field type settings sections\n         */\n        getTypeSections: function() {\n            return this.fieldTypeSections;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form action.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/actionModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Action',\n\t\t\tobjectDomain: 'actions',\n\t\t\teditActive: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.on( 'change', this.changeSetting, this );\n\n\t\t\t// Get our parent field type.\n\t\t\tvar actionType = nfRadio.channel( 'actions' ).request( 'get:type', this.get( 'type' ) );\n\n\t\t\tif( 'undefined' == typeof actionType ) return;\n\n\t\t\t// Loop through our action type \"settingDefaults\" and add any default settings.\n\t\t\tvar that = this;\n\t\t\t_.each( actionType.get( 'settingDefaults' ), function( val, key ) {\n\t\t\t\tif ( ! that.get( key ) ) {\n\t\t\t\t\tthat.set( key, val, { silent: true } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\t\n\t\t\t/*\n\t\t\t * Trigger an init event on three channels:\n\t\t\t * \n\t\t\t * actions\n\t\t\t * action-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'actions' ).trigger( 'init:actionModel', this );\n\t\t\tnfRadio.channel( 'actions-' + this.get( 'type' ) ).trigger( 'init:actionModel', this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options ) {\n            nfRadio.channel( 'actionSetting-' + _.keys( this.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\n\t\t\tnfRadio.channel( 'actions').trigger( 'update:setting', this, options.settingModel );\n            nfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our action models. \n * This is the actual action data created by the user.\n *\n * We listen to the add and remove events so that we can push the new id to either the new action or removed action property.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/actionCollection',['models/actions/actionModel'], function( actionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: actionModel,\n\t\tcomparator: 'order',\n\t\ttmpNum: 1,\n\n\t\tinitialize: function() {\n\t\t\tthis.on( 'add', this.addAction, this );\n\t\t\tthis.on( 'remove', this.removeAction, this );\n\t\t\tthis.newIDs = [];\n\t\t},\n\n\t\t/**\n\t\t * When we add a field, push the id onto our new action property.\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\taddAction: function( model ) {\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * When we remove a field, push the id onto our removed action property.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\tremoveAction: function( model ) {\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Handles interactions with our actions collection.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/data',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Load our action collection from our localized form data\n\t\t\tthis.collection = new actionCollection( preloadedFormData.actions );\n\t\t\tthis.collection.tmpNum = 1;\n\n\t\t\tif ( 0 != this.collection.models.length ) {\n\t\t\t\tvar that = this;\n\t\t\t\t_.each( this.collection.models, function( action ) {\n\t\t\t\t\tif ( ! jQuery.isNumeric( action.get( 'id' ) ) ) {\n\t\t\t\t\t\tthat.collection.tmpNum++;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a action is removed so that we can add it to our 'deleted_actions' object.\n\t\t\tthis.collection.removedIDs = {};\n\n\t\t\t// Respond to requests for data about actions and to update/change/delete actions from our collection.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:collection', this.getCollection, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:action', this.getAction, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:tmpID', this.getTmpID, this );\n\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add', this.addAction, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'delete', this.deleteAction, this );\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetAction: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\t/**\n\t\t * Add a action to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \taction data to insert\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\n\t\t */\n\t\taddAction: function( data, silent ) {\n\t\t\tsilent = silent || false;\n\n\t\t\tif ( false === data instanceof Backbone.Model ) {\n\t\t\t\tvar model = new actionModel( data );\n\t\t\t} else {\n\t\t\t\tvar model = data;\n\t\t\t}\n\n\t\t\tthis.collection.add( model, { silent: silent } );\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Delete a action from our collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \taction model to be deleted\n\t\t * @return void\n\t\t */\n\t\tdeleteAction: function( model ) {\n\t\t\tthis.collection.remove( model );\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t},\n\n\n\t\t/**\n\t\t * Return a new tmp id for our actions.\n\t\t * Gets the action collection length, adds 1, then returns that prepended with 'tmp-'.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return string\n\t\t */\n\t\tgetTmpID: function() {\n\t\t\tvar tmpNum = this.collection.tmpNum;\n\t\t\tthis.collection.tmpNum++;\n\t\t\treturn 'tmp-' + tmpNum;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/actionSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( actionSettings, { objectType: 'actions' } );\n\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:settingModel', this.getSettingModel, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from a action currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - Edit Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our actions.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our actions collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n            _.each( actionCollection.models, function( action ) {\n\t\t\t\taction.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Handles clicks and dragging for our action types.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/addActionTypes',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'click:addAction', this.addAction );\n\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add:actionType', this.addAction, this );\n\t\t},\n\n\t\t/**\n\t\t * Add an action to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \taction data to insert\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\n\t\t */\n\t\taddAction: function( type ) {\n\n\t\t\tvar data = {\n\t\t\t\tid: nfRadio.channel( 'actions' ).request( 'get:tmpID' ),\n\t\t\t\ttype: type.get( 'id' ),\n\t\t\t\tlabel: type.get( 'settingDefaults').label || type.get( 'nicename' )\n\t\t\t}\n\n\t\t\tvar newModel = nfRadio.channel( 'actions' ).request( 'add', data );\n\n\t\t\tvar label = {\n\t\t\t\tobject: 'Action',\n\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'actions' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', {}, newModel );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the logic for our action type draggables.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/typeDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our action type draggables and run the appropriate function.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'startDrag:type', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'stopDrag:type', this.stopDrag );\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'drawer-addAction' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging:\n\t\t * get our drawer element\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\n\t\t * get our main element\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\n\t\t * set our dragging helper clone\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\n\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return {[type]}         [description]\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t},\n\n\t\tgetCurrentDraggableHelperClone: function() {\n\t\t\treturn this.draggableHelperClone;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the logic for our action type droppable.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/droppable',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'app' ).reply( 'drop:actionType', this.dropActionType, this );\n\t\t},\n\n\t\tdropActionType: function( e, ui ) {\n\t\t\tvar type_slug = jQuery( ui.helper ).data( 'type' );\n\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', type_slug );\n\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', type );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our action type\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/typeModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our action type models. \n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/typeCollection',['models/actions/typeModel'], function( actionTypeModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: actionTypeModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Filters our action type collection.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/filterTypes',['models/actions/typeCollection'], function( typeCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our change filter event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'change:filter', this.filterActionTypes );\n\t\t},\n\n\t\t/**\n\t\t * Filter our action types in the add new action drawer\n\t\t * \n\t\t * Takes a search string and finds any action types that match either the name or alias.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string\t search \tstring being searched for\n\t\t * @param  object \t e      \tKeyup event\n\t\t * @return void\n\t\t */\n\t\tfilterActionTypes: function( search, e ) {\n\n\t\t\t// Make sure that we aren't dealing with an empty string.\n\t\t\tif ( '' != jQuery.trim( search ) ) {\n\n        \t\tvar filteredInstalled = [];\n        \t\t/**\n        \t\t * Call the function that actually filters our collection,\n        \t\t * and then loop through our collection, adding each model to our filteredInstalled array.\n        \t\t */\n\t\t\t\tvar installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\n        \t\t_.each( this.filterCollection( search, installedActions ), function( model ) {\n        \t\t\tfilteredInstalled.push( model );\n        \t\t} );\n\n        \t\tvar filteredAvailable = [];\n        \t\tvar availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n        \t\t_.each( this.filterCollection( search, availableActions ), function( model ) {\n        \t\t\tfilteredAvailable.push( model );\n        \t\t} );\n\n        \t\t// Create a new Action Type Section collection with the filtered array.\n        \t\tvar newInstalled = new typeCollection( filteredInstalled );\n        \t\tnewInstalled.slug = 'installed';\n        \t\tnewInstalled.nicename = 'Installed';\n\n        \t\tvar newAvailable = new typeCollection( filteredAvailable );\n        \t\tnewAvailable.slug = 'available';\n        \t\tnewAvailable.nicename = 'Available';\n\n        \t\t// Request that our action types filter be applied, passing the collection we created above.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:actionTypes', newInstalled, newAvailable );\n        \t\t// If we've pressed the 'enter' key, add the action to staging and clear the filter.\n        \t\tif ( e.addObject ) {\n        \t\t\tif ( 0 < newInstalled.length ) {\n        \t\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', newInstalled.models[0] );\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n        \t\t\t}\n        \t\t}\n        \t} else {\n        \t\t// Clear our filter if the search text is empty.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\n        \t}\n        },\n\n        /**\n         * Search our action type collection for the search string.\n         * \n         * @since  3.0\n         * @param  string\t search \tstring being searched for\n         * @return backbone.collection\n         */\n        filterCollection: function( search, collection ) {\n        \tsearch = search.toLowerCase();\n        \t/*\n        \t * Backbone collections have a 'filter' method that loops through every model,\n        \t * waiting for you to return true or false. If you return true, the model is kept.\n        \t * If you return false, it's removed from the filtered result.\n        \t */\n\t\t\tvar filtered = collection.filter( function( model ) {\n\t\t\t\tvar found = false;\n\t\t\t\t\n\t\t\t\t// If we match either the ID or nicename, return true.\n\t\t\t\tif ( model.get( 'id' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\n\t\t\t\t */\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we match any of the aliases, return true.\n\t\t\t\tif ( model.get( 'alias' ) ) {\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn found;\n\t\t\t} );\n\n\t\t\t// Return our filtered collection.\n\t\t\treturn filtered;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/newsletterList',[], function( ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'setting-newsletter_list' ),             'show:setting',      this.defaultFields );\n            this.listenTo( nfRadio.channel( 'setting-type-newsletter_list' ),        'click:extra',       this.clickListUpdate );\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderFields );\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderGroups );\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_fields' ), 'init:settingModel', this.registerFieldsListener );\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_groups' ), 'init:settingModel', this.registerGroupsListener );\n        },\n\n        defaultFields: function( settingModel, dataModel ) {\n            this.maybeRenderFields( dataModel, settingModel );\n            this.maybeRenderGroups( dataModel, settingModel );\n        },\n\n        registerFieldsListener: function ( model ) {\n            model.listenTo( nfRadio.channel( 'newsletter_list_fields' ), 'update:fieldMapping', this.updateFieldMapping, model );\n        },\n\n        registerGroupsListener: function ( model ) {\n            model.listenTo( nfRadio.channel( 'newsletter_list_groups' ), 'update:interestGroups', this.updateInterestGroups, model );\n        },\n\n        clickListUpdate: function( e, settingModel, dataModel, settingView ) {\n\n            var data = {\n                action: 'nf_' + dataModel.attributes.type + '_get_lists',\n                security: nfAdmin.ajaxNonce\n            };\n\n            var that = this;\n            jQuery( e.srcElement ).addClass( 'spin' );\n            jQuery.post( ajaxurl, data, function( response ){\n                var response = JSON.parse( response );\n                that.updateLists( settingModel, response.lists, settingView, dataModel );\n                dataModel.set( 'newsletter_list', response.lists[0].value, { settingModel: settingModel } );\n            }).always( function() {\n                jQuery( e.srcElement ).removeClass( 'spin' );\n            });\n        },\n\n        updateLists: function( settingModel, lists, settingView, dataModel ) {\n            settingModel.set( 'options', lists );\n            settingView.render();\n        },\n\n        maybeRenderFields: function( dataModel, settingModel ) {\n\n            if( 'undefined' == typeof settingModel ) return;\n\n            var selectedList = dataModel.get( 'newsletter_list' );\n            var lists = settingModel.get( 'options' );\n            _.each( lists, function( list ) {\n                if ( selectedList == list.value ) {\n                    nfRadio.channel( 'newsletter_list_fields').trigger( 'update:fieldMapping', list.fields );\n                }\n            } );\n\n            dataModel.set( 'newsletter_list_fields', 0 );\n        },\n\n        maybeRenderGroups: function( dataModel, settingModel ) {\n            if( 'undefined' == typeof settingModel ) return;\n\n            var selectedList = dataModel.get( 'newsletter_list' );\n            var lists = settingModel.get( 'options' );\n            _.each( lists, function( list ) {\n                if ( selectedList == list.value ) {\n                    nfRadio.channel( 'newsletter_list_groups').trigger( 'update:interestGroups', list.groups );\n                }\n            } );\n\n            dataModel.set( 'newsletter_list_fields', 0 );\n        },\n\n        updateFieldMapping: function( fields ) {\n           var settings = this.get( 'settings' );\n            settings.reset();\n            _.each( fields, function( field ){\n\n                settings.add({\n                    name: field.value,\n                    type: 'textbox',\n                    label: field.label,\n                    width: 'full',\n                    use_merge_tags: { exclude: [ 'user', 'post', 'system', 'querystrings' ] }\n                });\n            });\n            this.set( 'settings', settings );\n        },\n\n        updateInterestGroups: function( groups ) {\n            var settings = this.get( 'settings' );\n            settings.reset();\n            _.each( groups, function( group ){\n\n                settings.add({\n                    name: group.value,\n                    type: 'toggle',\n                    label: group.label,\n                    width: 'full',\n                });\n            });\n            this.set( 'settings', settings );\n        },\n\n    });\n\n    return controller;\n} );\n\n","/**\n * Creates and stores a collection of form setting types. This includes all of the settings shown when editing a field.\n *\n * Loops over our preloaded data and adds that to our form setting type collection\n *\n * Also responds to requests for data about form setting types\n *\n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/types',[\n\t\t'models/app/typeCollection'\n\t],\n\tfunction(\n\t\tTypeCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Create our field type collection\n\t\t\tthis.collection = new TypeCollection( formSettingTypeData );\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:type', this.getType, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:typeCollection', this.getCollection, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetType: function( id ) {\n\t\t\treturn this.collection.get( id );\n        },\n\n        /**\n         * Return the installed action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetCollection: function() {\n        \treturn this.collection;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form settings.\n * \n * @package Ninja Forms builder\n * @subpackage Form Settings\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/advanced/settingsModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Form Setting',\n\t\t\teditActive: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.bind( 'change', this.changeSetting, this );\n\t\t\t/*\n\t\t\t * Check to see if we have any setting defaults to set.\n\t\t\t */\n\t\t\tvar formSettings = nfRadio.channel( 'settings' ).request( 'get:collection' );\n\t\t\t_.each( formSettings.models, function( settingModel ) {\n\t\t\t\tif ( 'undefined' == typeof this.get( settingModel.get( 'name' ) ) ) {\n\t\t\t\t\tthis.set( settingModel.get( 'name' ), settingModel.get( 'value' ), { silent: true } );\n\t\t\t\t}\n\t\t\t\tnfRadio.channel( settingModel.get( 'type' ) ).trigger( 'init:dataModel', this, settingModel );\n\t\t\t}, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Handles interactions with our form settings collection.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/data',['models/advanced/settingsModel'], function( settingsModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Load our action collection from our localized form data\n\t\t\tthis.model = new settingsModel( preloadedFormData.settings );\n\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settings', this.getSettings, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:setting', this.getSetting, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'update:setting', this.updateSetting, this );\n\t\t},\n\n\t\tgetSettings: function() {\n\t\t\treturn this.model;\n\t\t},\n\n\t\tupdateSetting: function( name, value, silent ) {\n\t\t\tsilent = silent || false;\n\t\t\tthis.model.set( name, value, { silent: silent } );\n\t\t},\n\n\t\tgetSetting: function( name ) {\n\t\t\treturn this.model.get( name );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/formSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( formSettings, { objectType: 'settings' } );\n\t\t\t\t\t\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settingModel', this.getSettingModel, this );\n\n\t\t\t// Responds to requests for our setting collection\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:collection', this.getSettingCollection, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t},\n\n\t\tgetSettingCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from form settings currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our fields.\n\t\t\tnfRadio.channel( 'settings' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\n            _.each( collection.models, function( field ) {\n\t\t\t\tfield.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listens for clicks on our form settings sections.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/clickEdit',['models/advanced/settingsModel'], function( settingsModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'settings' ), 'click:edit', this.clickEdit );\n\t\t},\n\n\t\tclickEdit: function( e, typeModel ) {\n\t\t\tvar model = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: typeModel.get( 'settingGroups' ), typeModel: typeModel } );\n\t\t\tvar preventClose = nfRadio.channel( 'drawer' ).request( 'get:preventClose' );\n\t\t\tif ( ! preventClose ) {\n\t\t\t\ttypeModel.set( 'editActive', true );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Makes sure that calculations don't reference calculations with a lower order.\n *\n * For example, our first caclulation can't reference the second, but the second can reference the first.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/calculations',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When someone types in the \"name\" or \"eq\" portion of our calculation, we need to make sure\n\t\t\t * that they haven't duplicated a name or made a bad EQ reference.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'keyup:option', this.keyUp );\n\t\t\t/*\n\t\t\t * Same thing for when our calculation option is updated\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalc );\n\t\t\t/*\n\t\t\t * When we sort our calcluations, we need to make sure that we don't get any bad EQ\n\t\t\t * references.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'sort:option', this.sortCalc );\n\t\t},\n\n\t\tkeyUp: function( e, optionModel ) {\n\t\t\t// Get our current value\n\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t// Check to see if we're editing a name or eq\n\t\t\tif( 'name' == jQuery( e.target ).data( 'id' ) ) { // We are editing the name field\n\t\t\t\t// Check to see if our name already exists.\n\t\t\t\tthis.checkName( value, optionModel );\n\t\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\n\t\t\t} else { // We're editing the eq\n\t\t\t\t// Check to see if there are any calcs referenced in our eq\n\t\t\t\tthis.checkEQ( value, optionModel );\n\t\t\t}\n\t\t},\n\n\t\tupdateCalc: function( optionModel ) {\n\t\t\tthis.checkName( optionModel.get( 'name' ), optionModel, false );\n\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\n\t\t},\n\n\t\tsortCalc: function( optionModel, setting ) {\n\t\t\tthis.checkAllCalcs( setting.collection );\n\t\t},\n\n\t\t/**\n\t\t * Check to see if a calc name exists.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \t\t\tname        calc name to check\n\t\t * @param  backbone.model \toptionModel \n\t\t * @return void\n\t\t */\n\t\tcheckName: function( name, optionModel, silent ) {\n\t\t\tsilent = silent || true;\n\t\t\t// Get our current errors, if any.\n\t\t\tvar errors = optionModel.get( 'errors' );\n\t\t\t// Search our calc collection for our name\n\t\t\tvar found = optionModel.collection.where( { name: jQuery.trim( name ) } );\n\n\t\t\t// If the name that was passed is the same as our current name, return false.\n\t\t\tif ( name == optionModel.get( 'name' ) ) {\n\t\t\t\tfound = [];\n\t\t\t}\n\n\t\t\t// If our name exists, add an errors to the option model\n\t\t\tif ( 0 != found.length ) {\n\t\t\t\terrors.nameExists = 'Calculation names must be unique. Please enter another name.';\n\t\t\t} else {\n\t\t\t\toptionModel.set( 'name', name, { silent: silent } );\n\t\t\t\tdelete errors.nameExists;\n\t\t\t}\n\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n\t\t},\n\n\t\t/**\n\t\t * Check to see if an eq contains a reference to a calc at a lower priority.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\teq          our equation\n\t\t * @param  backbone.model \toptionModel\n\t\t * @return void\n\t\t */\n\t\tcheckEQ: function( eq, optionModel ) {\n\t\t\t// Get any current errors on our optionModel\n\t\t\tvar errors = optionModel.get( 'errors' );\n\t\t\t/*\n\t\t\t * We're looking for two errors:\n\t\t\t * - Calculations that are below the current one can't be processed.\n\t\t\t * - Calculations can't refer to themselves.\n\t\t\t */ \n\t\t\tvar errorSelfRef = false;\n\t\t\tvar errorFutureCalc = false;\n\t\t\t// Regex that searches for {calc:key}\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\t/*\n\t\t\t * Calcs will be an array like:\n\t\t\t * ['{calc:test}'], ['{calc:another}']\n\t\t\t * \n\t\t\t * If we have any calcs in the eq, loop through them and search for the errors.\n\t\t\t */\n\t\t\tif ( calcs ) {\n\t\t\t\tvar calculations = optionModel.collection;\n\t\t\t\t// Maps a function to each item in our calcs array.\n\t\t\t\tcalcs = calcs.map( function( calc ) {\n\t\t\t\t\t// calc will be {calc:name}\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\n\t\t\t\t\t// Get our optionModel from our calculations collection.\n\t\t\t\t\tvar targetCalc = calculations.findWhere( { name: name } );\n\t\t\t\t\tif ( name == optionModel.get( 'name' ) ) {\n\t\t\t\t\t\t// If we already have a calc with this name, set an error.\n\t\t\t\t\t\terrors.selfRef = 'A calculation can\\'t reference itself!';\n\t\t\t\t\t\terrorSelfRef = true;\n\t\t\t\t\t} else if ( targetCalc && targetCalc.get( 'order' ) > optionModel.get( 'order' ) ) {\n\t\t\t\t\t\t// If the calc is after this one, set an error. \n\t\t\t\t\t\terrorFutureCalc = true;\n\t\t\t\t\t\terrors.futureCalc = 'Can\\'t reference a future calculation!';\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// If we didn't find any self ref errors, remove the key.\n\t\t\tif ( ! errorSelfRef ) {\n\t\t\t\tdelete errors.selfRef;\n\t\t\t}\n\n\t\t\t// If we didn't find any future calc errors, remove the key.\n\t\t\tif ( ! errorFutureCalc ) {\n\t\t\t\tdelete errors.futureCalc;\n\t\t\t}\n\n\t\t\t// Set errors and trigger our optionModel change.\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n\n\t\t},\n\n\t\tcheckAllCalcs: function( collection ) {\n\t\t\tvar that = this;\n\t\t\tcollection.models.map( function( opt ) {\n\t\t\t\tthat.checkName( opt.get( 'name' ), opt );\n\t\t\t\tthat.checkEQ( opt.get( 'eq' ), opt );\n\t\t\t} );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Loads all of our controllers using Require JS.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine(\n\t'controllers/loadControllers',[\n\t\t/*\n\t\t * Application controllers\n\t\t */\n\t\t'controllers/app/remote',\n\t\t'controllers/app/drawer',\n\t\t'controllers/app/drawerConfig',\n\t\t'controllers/app/domainConfig',\n\t\t'controllers/app/data',\t\t\n\t\t'controllers/app/drawerToggleSettingGroup',\n\t\t'controllers/app/updateDB',\n\t\t'controllers/app/formData',\n\t\t'controllers/app/previewLink',\n\t\t'controllers/app/menuButtons',\n\t\t'controllers/app/trackChanges',\n\t\t'controllers/app/undoChanges',\n\t\t'controllers/app/publishResponse',\n\t\t'controllers/app/changeDomain',\n\t\t'controllers/app/pushstate',\n\t\t'controllers/app/hotkeys',\n\t\t'controllers/app/cleanState',\n\t\t'controllers/app/coreUndo',\n\t\t'controllers/app/cloneModelDeep',\n\t\t'controllers/app/getSettingChildView',\n\t\t'controllers/app/changeSettingDefault',\n\t\t'controllers/app/fieldset',\n\t\t'controllers/app/toggleSetting',\n\t\t'controllers/app/itemControls',\n\t\t'controllers/app/mergeTags',\n\t\t'controllers/app/itemSettingFill',\n\t\t'controllers/app/confirmPublish',\n\t\t'controllers/app/rte',\n\t\t'controllers/app/settingFieldSelect',\n\t\t'controllers/app/settingFieldList',\n\t\t'controllers/app/settingHTML',\n\t\t'controllers/app/settingColor',\n\t\t'controllers/app/changeMenu',\n\t\t'controllers/app/mobile',\n\t\t'controllers/app/notices',\n\t\t'controllers/app/unloadCheck',\n\t\t'controllers/app/formContentFilters',\n\t\t'controllers/app/formContentGutterFilters',\n\t\t'controllers/app/cloneCollectionDeep',\n\t\t'controllers/app/trackKeyDown',\n\t\t'controllers/app/perfectScroll',\n\t\t'controllers/app/getNewSettingGroupCollection',\n\t\t/*\n\t\t * Fields domain controllers\n\t\t */\n\t\t'controllers/fields/types',\n\t\t'controllers/fields/fieldTypeDrag',\n\t\t'controllers/fields/stagingDrag',\n\t\t'controllers/fields/staging',\n\t\t'controllers/fields/stagingSortable',\n\t\t'controllers/fields/filterTypes',\n\t\t'controllers/fields/sortable',\n\t\t'controllers/fields/data',\n\t\t'controllers/app/optionRepeater',\n\t\t'controllers/fields/editActive',\n\t\t'controllers/fields/fieldSettings',\n\t\t'controllers/fields/fieldCreditCard',\n\t\t'controllers/fields/fieldList',\n\t\t'controllers/fields/fieldPassword',\n\t\t'controllers/fields/fieldQuantity',\n\t\t'controllers/fields/fieldShipping',\n\t\t'controllers/fields/key',\n\t\t'controllers/fields/notices',\n\t\t'controllers/fields/mobile',\n\t\t'controllers/fields/savedFields',\n\t\t'controllers/fields/fieldDatepicker',\n\t\t'controllers/fields/fieldDisplayCalc',\n\n\t\t/*\n\t\t * TODO: Actions domain controllers\n\t\t */\n\t\t'controllers/actions/types',\n\t\t'controllers/actions/data',\n\t\t'controllers/actions/actionSettings',\n\t\t'controllers/actions/editActive',\n\t\t'controllers/actions/addActionTypes',\n\t\t'controllers/actions/typeDrag',\n\t\t'controllers/actions/droppable',\n\t\t'controllers/actions/filterTypes',\n\t\t'controllers/actions/newsletterList',\n\n\t\t/*\n\t\t * TODO: Settings domain controllers\n\t\t */\n\t\t'controllers/advanced/types',\n\t\t'controllers/advanced/data',\n\t\t'controllers/advanced/formSettings',\n\t\t'controllers/advanced/editActive',\n\t\t'controllers/advanced/clickEdit',\n\t\t'controllers/advanced/calculations'\n\t],\n\tfunction(\n\t\t/*\n\t\t * Application controllers\n\t\t */\n\t\tRemote,\n\t\tDrawer,\n\t\tDrawerConfig,\n\t\tDomainConfig,\n\t\tAppData,\n\t\tDrawerToggleSettingGroup,\n\t\tUpdateDB,\n\t\tFormData,\n\t\tPreviewLink,\n\t\tAppMenuButtons,\n\t\tAppTrackChanges,\n\t\tAppUndoChanges,\n\t\tAppPublishResponse,\n\t\tAppChangeDomain,\n\t\tPushstate,\n\t\tHotkeys,\n\t\tCleanState,\n\t\tCoreUndo,\n\t\tCloneModelDeep,\n\t\tDrawerSettingChildView,\n\t\tChangeSettingDefault,\n\t\tFieldset,\n\t\tToggleSetting,\n\t\tItemControls,\n\t\tMergeTags,\n\t\tItemSettingFill,\n\t\tConfirmPublish,\n\t\tRTE,\n\t\tSettingFieldSelect,\n\t\tSettingFieldList,\n\t\tSettingHTML,\n\t\tSettingColor,\n\t\tChangeMenu,\n\t\tAppMobile,\n\t\tAppNotices,\n\t\tAppUnloadCheck,\n\t\tFormContentFilters,\n\t\tFormContentGutterFilters,\n\t\tCloneCollectionDeep,\n\t\tTrackKeyDown,\n\t\tPerfectScroll,\n\t\tGetNewSettingGroupCollection,\n\t\t/*\n\t\t * Fields domain controllers\n\t\t */\n\t\tFieldTypes,\n\t\tFieldTypeDrag,\n\t\tFieldStagingDrag,\n\t\tStagedFieldsData,\n\t\tStagedFieldsSortable,\n\t\tDrawerFilterFieldTypes,\n\t\tMainContentFieldsSortable,\n\t\tFieldData,\n\t\tOptionRepeater,\n\t\tFieldsEditActive,\n\t\tFieldSettings,\n\t\tFieldCreditCard,\n\t\tFieldList,\n\t\tFieldPassword,\n\t\tFieldQuantity,\n\t\tFieldShipping,\n\t\tFieldKey,\n\t\tNotices,\n\t\tFieldsMobile,\n\t\tSavedFields,\n\t\tFieldDatepicker,\n\t\tFieldDisplayCalc,\n\t\t/*\n\t\t * TODO: Actions domain controllers\n\t\t */\n\t\tActionTypes,\n\t\tActionData,\n\t\tActionSettings,\n\t\tActionEditActive,\n\t\tActionAddTypes,\n\t\tActionTypeDrag,\n\t\tActionDroppable,\n\t\tActionFilterTypes,\n\t\tActionNewsletterList,\n\t\t/*\n\t\t * TODO: Settings domain controllers\n\t\t */\n\t\tSettingTypes,\n\t\tSettingData,\n\t\tFormSettings,\n\t\tSettingsEditActive,\n\t\tSettingsClickEdit,\n\t\tAdvancedCalculations\n\t\t\n\t) {\n\t\tvar controller = Marionette.Object.extend( {\n\t\t\tinitialize: function() {\n\t\t\t\t/*\n\t\t\t\t * Application controllers\n\t\t\t\t */\n\t\t\t\tnew FormContentFilters();\n\t\t\t\tnew FormContentGutterFilters();\n\t\t\t\tnew Hotkeys();\n\t\t\t\tnew Remote();\n\t\t\t\tnew Drawer();\n\t\t\t\tnew DrawerConfig();\n\t\t\t\tnew DomainConfig();\n\t\t\t\tnew DrawerToggleSettingGroup();\n\t\t\t\tnew PreviewLink();\n\t\t\t\tnew AppMenuButtons();\n\t\t\t\tnew AppTrackChanges();\n\t\t\t\tnew AppUndoChanges();\n\t\t\t\tnew AppPublishResponse();\n\t\t\t\tnew AppChangeDomain();\n\t\t\t\tnew CleanState();\n\t\t\t\tnew CoreUndo();\n\t\t\t\tnew CloneModelDeep();\n\t\t\t\tnew ItemControls();\n\t\t\t\tnew ConfirmPublish();\n\t\t\t\tnew RTE();\n\t\t\t\tnew SettingFieldSelect();\n\t\t\t\tnew SettingFieldList();\n\t\t\t\tnew SettingHTML();\n\t\t\t\tnew SettingColor();\n\t\t\t\tnew ChangeMenu();\n\t\t\t\tnew AppMobile();\n\t\t\t\tnew AppNotices();\n\t\t\t\tnew AppUnloadCheck();\n\t\t\t\tnew UpdateDB();\n\t\t\t\tnew CloneCollectionDeep();\n\t\t\t\tnew TrackKeyDown();\n\t\t\t\tnew PerfectScroll();\n\t\t\t\tnew GetNewSettingGroupCollection();\n\t\t\t\t// new Pushstate();\n\t\t\t\t/*\n\t\t\t\t * Fields domain controllers\n\t\t\t\t * \n\t\t\t\t * Field-specific controllers should be loaded before our field type controller.\n\t\t\t\t * This ensures that any 'init' hooks are properly registered.\n\t\t\t\t */\n\t\t\t\tnew Fieldset();\n\t\t\t\tnew OptionRepeater();\n\n\t\t\t\tnew FieldTypes();\n\t\t\t\tnew FieldTypeDrag();\n\t\t\t\tnew FieldStagingDrag();\n\t\t\t\tnew StagedFieldsData();\n\t\t\t\tnew StagedFieldsSortable();\n\t\t\t\tnew DrawerFilterFieldTypes();\n\t\t\t\tnew MainContentFieldsSortable();\n\t\t\t\tnew ChangeSettingDefault();\n\t\t\t\tnew ToggleSetting();\n\t\t\t\tnew DrawerSettingChildView();\n\t\t\t\tnew FieldsEditActive();\n\t\t\t\tnew FieldSettings();\n\t\t\t\tnew FieldCreditCard();\n\t\t\t\tnew FieldList();\n\t\t\t\tnew FieldPassword;\n\t\t\t\tnew FieldQuantity();\n\t\t\t\tnew FieldShipping();\n\t\t\t\tnew FieldKey();\n\t\t\t\tnew Notices();\n\t\t\t\tnew FieldsMobile();\n\t\t\t\tnew SavedFields();\n\t\t\t\tnew FieldDatepicker();\n\t\t\t\tnew FieldDisplayCalc();\n\t\t\t\t/*\n\t\t\t\t * TODO: Actions domain controllers\n\t\t\t\t */\n\t\t\t\tnew ActionNewsletterList();\n\t\t\t\tnew ActionTypes();\n\t\t\t\tnew ActionData();\n\t\t\t\tnew ActionSettings();\n\t\t\t\tnew ActionEditActive();\n\t\t\t\tnew ActionAddTypes();\n\t\t\t\tnew ActionTypeDrag();\n\t\t\t\tnew ActionDroppable();\n\t\t\t\tnew ActionFilterTypes();\n\t\t\t\t/*\n\t\t\t\t * TODO: Settings domain controllers\n\t\t\t\t */\n\t\t\t\tnew SettingTypes();\n\t\t\t\tnew FormSettings();\n\t\t\t\tnew AdvancedCalculations();\n\t\t\t\tnew SettingData();\n\t\t\t\tnew SettingsEditActive();\n\t\t\t\tnew SettingsClickEdit();\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Data controllers need to be set after every other controller has been setup, even if they aren't domain-specific.\n\t\t\t\t * AppData() was after FormData();\n\t\t\t\t */\n\t\t\t\tnew AppData();\n\t\t\t\tnew FieldData();\n\t\t\t\tnew FormData();\n\t\t\t\tnew MergeTags();\n\t\t\t\tnew ItemSettingFill();\n\t\t\t}\n\t\t});\n\n\t\treturn controller;\n} );\n\n","define( 'views/fields/fieldItem',['views/app/itemControls'], function( itemControlsView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-field',\n\t\tdoingShortcut: false,\n\n\t\tregions: {\n\t\t\titemControls: '.nf-item-controls'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\n\t\t\tthis.model.on( 'change:label', this.render, this );\n\t\t\tthis.model.on( 'change:required', this.render, this );\n\t\t\tthis.model.on( 'change:id', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:editActive', this.render );\n\t\t\tthis.model.off( 'change:label', this.render );\n\t\t\tthis.model.off( 'change:required', this.render );\n\t\t\tthis.model.off( 'change:id', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\n\t\t\tjQuery( this.el ).disableSelection();\n\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).on( 'taphold', function( e, touch ) {\n\t\t\t\t\tif ( ! jQuery( e.target ).hasClass( 'nf-edit-settings' ) ) {\n\t\t\t\t\t\tjQuery( this ).addClass( 'ui-sortable-helper drag-selected' );\n\t\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderClasses: function() {\n\t    \t\t\tvar classes = 'nf-field-wrap';\n\t    \t\t\tif ( this.editActive ) {\n\t    \t\t\t\tclasses += ' active';\n\t    \t\t\t}\n\t    \t\t\treturn classes;\n\t    \t\t},\n\t    \t\trenderRequired: function() {\n\t    \t\t\tif ( 1 == this.required ) {\n\t    \t\t\t\treturn '<span class=\"required\">*</span>';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\t    \t\tgetFieldID: function() {\n\t\t\t\t\tif ( jQuery.isNumeric( this.id ) ) {\n\t\t\t\t\t\treturn 'field-' + this.id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.id;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trenderIcon: function() {\n\t\t\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', this.type );\n\t\t\t\t\treturn '<span class=\"fa fa-' + type.get( 'icon' ) + '\"></span>';\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\n\t\t\t'mousedown': 'maybeShortcut',\n\t\t\t'click': 'maybeClickEdit',\n\t\t\t'singletap': 'maybeTapEdit',\n\t\t\t'swipeleft': 'swipeLeft',\n\t\t\t'swiperight': 'swipeRight',\n\t\t\t'tapend': 'tapend'\n\t\t},\n\n\t\tmaybeClickEdit: function( e ) {\n\t\t\tif ( this.doingShortcut ) {\n\t\t\t\tthis.doingShortcut = false;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) || jQuery( e.target ).parent().hasClass( 'nf-field-wrap' ) || jQuery( e.target ).hasClass( 'nf-field-wrap' ) ) && ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ':focus' ).blur();\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tmaybeShortcut: function( e ) {\n\t\t\tvar keys = nfRadio.channel( 'app' ).request( 'get:keydown' );\n\t\t\t/*\n\t\t\t * If the shift key isn't held down, return.\n\t\t\t */\n\t\t\tif ( -1 == keys.indexOf( 16 ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t/*\n\t\t\t * If we are pressing D, delete this field.\n\t\t\t */\n\t\t\tif ( -1 != keys.indexOf( 68 ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\n\t\t\t\tthis.doingShortcut = true;\n\t\t\t\treturn false;\n\t\t\t} else if ( -1 != keys.indexOf( 67 ) ) {\n\t\t\t\tthis.doingShortcut = true;\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\tmaybeTapEdit: function( e ) {\n\t\t\tif ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tswipeLeft: function( e, touch ) {\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).show();\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).show();\n\t\t},\n\n\t\tswipeRight: function( e, touch ) {\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).hide();\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).hide();\n\t\t},\n\n\t\ttapend: function( e, touch ) {\n\t\t\tjQuery( this.el ).ClassyWiggle( 'stop' );\n\t\t\tjQuery( this.el ).removeClass( 'ui-sortable-helper drag-selected' );\n\t\t},\n\n\t\tremove: function(){\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:removing' ) ) {\n\t\t\t\tthis.$el.hide( 'clip', function(){\n\t\t\t\t\tjQuery( this ).remove();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.$el.remove();\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:removing', false );\n\t\t},\n\n\t\tmouseoverItemControl: function( e ) {\n\t\t\tjQuery( this.el ).find( '.nf-item-control' ).css( 'display', '' );\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-fields-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t\tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t}\n\t\t\tjQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\tjQuery( this.el ).parent().droppable( {\n\t\t\t\taccept: function( draggable ) {\n\t\t\t\t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t},\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our form title.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/formTitle',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-header-form-title',\n\n\t\tinitialize: function() {\n\t\t\t// When we change the model (to disable it, for example), re-render.\n\t\t\tthis.model.on( 'change:title', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderTitle: function(){\n\t    \t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t    \t\t\treturn formData.get( 'settings' ).get( 'title' );\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Return views that might be used in extensions.\n * These are un-instantiated views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/loadViews',[ 'views/fields/fieldItem', 'views/fields/mainContentEmpty', 'views/app/formTitle' ], function( fieldItemView, mainContentEmptyView, FormTitleView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Reply to requests for our field item view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldItem', this.getFieldItem );\n\t\t\n\t\t\t// Reply to requests for our empty content view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:mainContentEmpty', this.getMainContentEmpty );\n\t\t\n\t\t\t// Reply to requests for our form title view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:formTitle', this.getFormTitle );\n\t\t},\n\n\t\tgetFieldItem: function( model ) {\n\t\t\treturn fieldItemView;\n\t\t},\n\n\t\tgetMainContentEmpty: function() {\n\t\t\treturn mainContentEmptyView;\n\t\t},\n\n\t\tgetFormTitle: function() {\n\t\t\treturn FormTitleView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","var nfRadio = Backbone.Radio;\n\njQuery( document ).ready( function( $ ) {\n\trequire( ['views/app/builder', 'controllers/loadControllers', 'views/loadViews'], function( BuilderView, LoadControllers, LoadViews ) {\n\n\t\tvar NinjaForms = Marionette.Application.extend( {\n\n\t\t\tinitialize: function( options ) {\n\n\t\t\t\tvar that = this;\n\t\t\t\tMarionette.Renderer.render = function(template, data){\n\t\t\t\t\tvar template = that.template( template );\n\t\t\t\t\treturn template( data );\n\t\t\t\t};\n\n\t\t\t\t// Trigger an event before we load our controllers.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadControllers', this );\n\t\t\t\t// Load our controllers.\n\t\t\t\tvar loadControllers = new LoadControllers();\n\t\t\t\t// Trigger an event after we load our controllers.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadControllers', this );\n\n\t\t\t\t// Trigger an event before we load un-instantiated views\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadViews', this );\n\t\t\t\tvar loadViews = new LoadViews();\n\t\t\t\t// Trigger an event after we load un-instantiated views.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadViews', this );\n\n\t\t\t\tnfRadio.channel( 'app' ).reply( 'get:template', this.template );\n\t\t\t},\n\n\t\t\tonStart: function() {\n\t\t\t\tvar builderView = new BuilderView();\n\t\t\t\t// Trigger our after start event.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:appStart', this );\n\t\t\t},\n\n\t\t\ttemplate: function( template ) {\n\t\t\t\treturn _.template( $( template ).html(),  {\n\t\t\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\n\t\t\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n\t\t\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n\t\t\t\t\tvariable:    'data'\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t\n\t\tvar ninjaForms = new NinjaForms();\n\t\tninjaForms.start();\n\t} );\n} );\ndefine(\"main\", function(){});\n\n"],"sourceRoot":"/source/"}