{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/access-nyc-patterns/src/js/modules/utility.js","node_modules/access-nyc-patterns/src/js/modules/toggle.js","node_modules/access-nyc-patterns/src/components/accordion/accordion.js","node_modules/access-nyc-patterns/src/components/filter/filter.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/src/js/modules/utility.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_freeGlobal.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_root.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_Symbol.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_getRawTag.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_objectToString.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseGetTag.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isObject.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isFunction.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_coreJsData.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_isMasked.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_toSource.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseIsNative.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_getValue.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_getNative.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_defineProperty.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseAssignValue.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/eq.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_assignValue.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_copyObject.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/identity.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_apply.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_overRest.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/constant.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseSetToString.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_shortOut.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_setToString.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseRest.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isLength.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isArrayLike.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_isIndex.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_isIterateeCall.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_createAssigner.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseTimes.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isObjectLike.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseIsArguments.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isArguments.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isArray.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/stubFalse.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isBuffer.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseIsTypedArray.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseUnary.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_nodeUtil.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isTypedArray.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_arrayLikeKeys.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_isPrototype.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_nativeKeysIn.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseKeysIn.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/keysIn.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/assignInWith.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_overArg.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_getPrototype.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isPlainObject.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isError.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/attempt.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_arrayMap.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseValues.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_customDefaultsAssignIn.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_escapeStringChar.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_nativeKeys.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseKeys.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/keys.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_reInterpolate.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_basePropertyOf.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_escapeHtmlChar.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/isSymbol.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseToString.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/toString.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/escape.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_reEscape.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_reEvaluate.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/templateSettings.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/template.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_arrayEach.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_createBaseFor.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseFor.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseForOwn.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_createBaseEach.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_baseEach.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/_castFunction.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/node_modules/lodash-es/forEach.js","node_modules/access-nyc-patterns/dist/components/nearby-stops/node_modules/access-nyc-patterns/src/components/nearby-stops/nearby-stops.js","node_modules/access-nyc-patterns/node_modules/nserializejson/dist/esm/src/Util.js","node_modules/access-nyc-patterns/node_modules/nserializejson/dist/esm/src/ParserList.js","node_modules/access-nyc-patterns/node_modules/nserializejson/dist/esm/src/Constants.js","node_modules/access-nyc-patterns/node_modules/nserializejson/dist/esm/src/NSerializeJson.js","node_modules/access-nyc-patterns/src/objects/newsletter/newsletter.js","node_modules/cleave.js/dist/addons/cleave-phone.us.js","node_modules/cleave.js/dist/cleave.min.js","node_modules/es6-promise/dist/es6-promise.auto.js","node_modules/jquery/dist/jquery.js","node_modules/js-cookie/src/js.cookie.js","node_modules/process/browser.js","node_modules/underscore/underscore.js","src/js/main.js","src/js/modules/office-filter.js","src/js/modules/office-location.js","src/js/modules/office-map.js","src/js/modules/polyfill-foreach.js","src/js/modules/polyfill-matches.js","src/js/modules/polyfill-remove.js","src/js/modules/screener-household.js","src/js/modules/screener-person.js","src/js/modules/screener.js","src/js/modules/share-form.js","src/js/modules/static-map.js","src/js/modules/text-sizer.js","src/js/modules/tooltip.js","src/js/modules/utility.js","src/js/variables.json"],"names":[],"mappings":"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","file":"main.01ce876f1abb389b292e71d35311709f.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The Utility class\n * @class\n */\nclass Utility {\n  /**\n   * The Utility constructor\n   * @return {object} The Utility class\n   */\n  constructor() {\n    return this;\n  }\n}\n\n/**\n * Boolean for debug mode\n * @return {boolean} wether or not the front-end is in debug mode.\n */\nUtility.debug = () => (Utility.getUrlParameter(Utility.PARAMS.DEBUG) === '1');\n\n/**\n * Returns the value of a given key in a URL query string. If no URL query\n * string is provided, the current URL location is used.\n * @param  {string}  name        - Key name.\n * @param  {?string} queryString - Optional query string to check.\n * @return {?string} Query parameter value.\n */\nUtility.getUrlParameter = (name, queryString) => {\n  const query = queryString || window.location.search;\n  const param = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  const regex = new RegExp('[\\\\?&]' + param + '=([^&#]*)');\n  const results = regex.exec(query);\n\n  return results === null ? '' :\n    decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\n\n/**\n * For translating strings, there is a global LOCALIZED_STRINGS array that\n * is defined on the HTML template level so that those strings are exposed to\n * WPML translation. The LOCALIZED_STRINGS array is composed of objects with a\n * `slug` key whose value is some constant, and a `label` value which is the\n * translated equivalent. This function takes a slug name and returns the\n * label.\n * @param  {string} slug\n * @return {string} localized value\n */\nUtility.localize = function(slug) {\n  let text = slug || '';\n  const strings = window.LOCALIZED_STRINGS || [];\n  const match = strings.filter(\n    (s) => (s.hasOwnProperty('slug') && s['slug'] === slug) ? s : false\n  );\n  return (match[0] && match[0].hasOwnProperty('label')) ? match[0].label : text;\n};\n\n/**\n * Takes a a string and returns whether or not the string is a valid email\n * by using native browser validation if available. Otherwise, does a simple\n * Regex test.\n * @param {string} email\n * @return {boolean}\n */\nUtility.validateEmail = function(email) {\n  const input = document.createElement('input');\n  input.type = 'email';\n  input.value = email;\n\n  return typeof input.checkValidity === 'function' ?\n    input.checkValidity() : /\\S+@\\S+\\.\\S+/.test(email);\n};\n\n/**\n * Map toggled checkbox values to an input.\n * @param  {Object} event The parent click event.\n * @return {Element}      The target element.\n */\nUtility.joinValues = function(event) {\n  if (!event.target.matches('input[type=\"checkbox\"]'))\n    return;\n\n  if (!event.target.closest('[data-js-join-values]'))\n    return;\n\n  let el = event.target.closest('[data-js-join-values]');\n  let target = document.querySelector(el.dataset.jsJoinValues);\n\n  target.value = Array.from(\n      el.querySelectorAll('input[type=\"checkbox\"]')\n    )\n    .filter((e) => (e.value && e.checked))\n    .map((e) => e.value)\n    .join(', ');\n\n  return target;\n};\n\n/**\n * A simple form validation class that uses native form validation. It will\n * add appropriate form feedback for each input that is invalid and native\n * localized browser messaging.\n *\n * See https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\n * See https://caniuse.com/#feat=form-validation for support\n *\n * @param  {Event}         event The form submission event.\n * @return {Event/Boolean}       The original event or false if invalid.\n */\nUtility.valid = function(event) {\n  event.preventDefault();\n\n  if (Utility.debug())\n    // eslint-disable-next-line no-console\n    console.dir({init: 'Validation', event: event});\n\n  let validity = event.target.checkValidity();\n  let elements = event.target.querySelectorAll('input[required=\"true\"]');\n\n  for (let i = 0; i < elements.length; i++) {\n    // Remove old messaging if it exists\n    let el = elements[i];\n    let container = el.parentNode;\n    let message = container.querySelector('.error-message');\n\n    container.classList.remove('error');\n    if (message) message.remove();\n\n    // If this input valid, skip messaging\n    if (el.validity.valid) continue;\n\n    // Create the new error message.\n    message = document.createElement('div');\n\n    // Get the error message from localized strings.\n    if (el.validity.valueMissing)\n      message.innerHTML = Utility.localize('VALID_REQUIRED');\n    else if (!el.validity.valid)\n      message.innerHTML = Utility.localize(\n        `VALID_${el.type.toUpperCase()}_INVALID`\n      );\n    else\n      message.innerHTML = el.validationMessage;\n\n    message.setAttribute('aria-live', 'polite');\n    message.classList.add('error-message');\n\n    // Add the error class and error message.\n    container.classList.add('error');\n    container.insertBefore(message, container.childNodes[0]);\n  }\n\n  if (Utility.debug())\n    // eslint-disable-next-line no-console\n    console.dir({complete: 'Validation', valid: validity, event: event});\n\n  return (validity) ? event : validity;\n};\n\n/**\n * A markdown parsing method. It relies on the dist/markdown.min.js script\n * which is a browser compatible version of markdown-js\n * @url https://github.com/evilstreak/markdown-js\n * @return {Object} The iteration over the markdown DOM parents\n */\nUtility.parseMarkdown = () => {\n  if (typeof markdown === 'undefined') return false;\n\n  const mds = document.querySelectorAll(Utility.SELECTORS.parseMarkdown);\n\n  for (let i = 0; i < mds.length; i++) {\n    let element = mds[i];\n    fetch(element.dataset.jsMarkdown)\n      .then((response) => {\n        if (response.ok)\n          return response.text();\n        else {\n          element.innerHTML = '';\n          // eslint-disable-next-line no-console\n          if (Utility.debug()) console.dir(response);\n        }\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        if (Utility.debug()) console.dir(error);\n      })\n      .then((data) => {\n        try {\n          element.classList.toggle('animated');\n          element.classList.toggle('fadeIn');\n          element.innerHTML = markdown.toHTML(data);\n        } catch (error) {}\n      });\n  }\n};\n\n/**\n * Application parameters\n * @type {Object}\n */\nUtility.PARAMS = {\n  DEBUG: 'debug'\n};\n\n/**\n * Selectors for the Utility module\n * @type {Object}\n */\nUtility.SELECTORS = {\n  parseMarkdown: '[data-js=\"markdown\"]'\n};\n\nexport default Utility;\n","'use strict';\n\nimport Utility from './utility';\n\n/**\n * The Simple Toggle class\n * This uses the .matches() method which will require a polyfill for IE\n * https://polyfill.io/v2/docs/features/#Element_prototype_matches\n * @class\n */\nclass Toggle {\n  /**\n   * @constructor\n   * @param  {object} s Settings for this Toggle instance\n   * @return {object}   The class\n   */\n  constructor(s) {\n    s = (!s) ? {} : s;\n\n    this._settings = {\n      selector: (s.selector) ? s.selector : Toggle.selector,\n      namespace: (s.namespace) ? s.namespace : Toggle.namespace,\n      inactiveClass: (s.inactiveClass) ? s.inactiveClass : Toggle.inactiveClass,\n      activeClass: (s.activeClass) ? s.activeClass : Toggle.activeClass,\n    };\n\n    return this;\n  }\n\n  /**\n   * Initializes the module\n   * @return {object}   The class\n   */\n  init() {\n    // Initialization logging\n    // eslint-disable-next-line no-console\n    if (Utility.debug()) console.dir({\n        'init': this._settings.namespace,\n        'settings': this._settings\n      });\n\n    const body = document.querySelector('body');\n\n    body.addEventListener('click', (event) => {\n      if (!event.target.matches(this._settings.selector))\n        return;\n\n      // Click event logging\n      // eslint-disable-next-line no-console\n      if (Utility.debug()) console.dir({\n          'event': event,\n          'settings': this._settings\n        });\n\n      event.preventDefault();\n\n      this._toggle(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * Logs constants to the debugger\n   * @param  {object} event  The main click event\n   * @return {object}        The class\n   */\n  _toggle(event) {\n    let el = event.target;\n    const selector = el.getAttribute('href') ?\n      el.getAttribute('href') : el.dataset[`${this._settings.namespace}Target`];\n    const target = document.querySelector(selector);\n\n    /**\n     * Main\n     */\n    this.elementToggle(el, target);\n\n    /**\n     * Location\n     * Change the window location\n     */\n    if (el.dataset[`${this._settings.namespace}Location`])\n      window.location.hash = el.dataset[`${this._settings.namespace}Location`];\n\n    /**\n     * Undo\n     * Add toggling event to the element that undoes the toggle\n     */\n    if (el.dataset[`${this._settings.namespace}Undo`]) {\n      const undo = document.querySelector(\n        el.dataset[`${this._settings.namespace}Undo`]\n      );\n      undo.addEventListener('click', (event) => {\n        event.preventDefault();\n        this.elementToggle(el, target);\n        undo.removeEventListener('click');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * The main toggling method\n   * @param  {object} el     The current element to toggle active\n   * @param  {object} target The target element to toggle active/hidden\n   * @return {object}        The class\n   */\n  elementToggle(el, target) {\n    el.classList.toggle(this._settings.activeClass);\n    target.classList.toggle(this._settings.activeClass);\n    target.classList.toggle(this._settings.inactiveClass);\n    target.setAttribute('aria-hidden',\n      target.classList.contains(this._settings.inactiveClass));\n    return this;\n  }\n}\n\n\n/** @type {String} The main selector to add the toggling function to */\nToggle.selector = '[data-js=\"toggle\"]';\n\n/** @type {String} The namespace for our data attribute settings */\nToggle.namespace = 'toggle';\n\n/** @type {String} The hide class */\nToggle.inactiveClass = 'hidden';\n\n/** @type {String} The active class */\nToggle.activeClass = 'active';\n\nexport default Toggle;\n","'use strict';\n\nimport Toggle from '../../js/modules/toggle';\n\n/**\n * The Accordion module\n * @class\n */\nclass Accordion {\n  /**\n   * @constructor\n   * @return {object} The class\n   */\n  constructor() {\n    this._toggle = new Toggle({\n      selector: Accordion.selector,\n      namespace: Accordion.namespace,\n      inactiveClass: Accordion.inactiveClass\n    }).init();\n\n    return this;\n  }\n}\n\n/**\n * The dom selector for the module\n * @type {String}\n */\nAccordion.selector = '[data-js=\"accordion\"]';\n\n/**\n * The namespace for the components JS options\n * @type {String}\n */\nAccordion.namespace = 'accordion';\n\n/**\n * The incactive class name\n * @type {String}\n */\nAccordion.inactiveClass = 'inactive';\n\nexport default Accordion;\n","'use strict';\n\nimport Toggle from '../../js/modules/toggle';\n\n/**\n * The Filter module\n * @class\n */\nclass Filter {\n  /**\n   * @constructor\n   * @return {object}   The class\n   */\n  constructor() {\n    this._toggle = new Toggle({\n      selector: Filter.selector,\n      namespace: Filter.namespace,\n      inactiveClass: Filter.inactiveClass\n    }).init();\n\n    return this;\n  }\n}\n\n/**\n * The dom selector for the module\n * @type {String}\n */\nFilter.selector = '[data-js=\"filter\"]';\n\n/**\n * The namespace for the components JS options\n * @type {String}\n */\nFilter.namespace = 'filter';\n\n/**\n * The incactive class name\n * @type {String}\n */\nFilter.inactiveClass = 'inactive';\n\nexport default Filter;\n","/**\n * The Utility class\n * @class\n */\nclass Utility {\n  /**\n   * The Utility constructor\n   * @return {object} The Utility class\n   */\n  constructor() {\n    return this;\n  }\n}\n\n/**\n * Boolean for debug mode\n * @return {boolean} wether or not the front-end is in debug mode.\n */\nUtility.debug = () => (Utility.getUrlParameter(Utility.PARAMS.DEBUG) === '1');\n\n/**\n * Returns the value of a given key in a URL query string. If no URL query\n * string is provided, the current URL location is used.\n * @param  {string}  name        - Key name.\n * @param  {?string} queryString - Optional query string to check.\n * @return {?string} Query parameter value.\n */\nUtility.getUrlParameter = (name, queryString) => {\n  const query = queryString || window.location.search;\n  const param = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  const regex = new RegExp('[\\\\?&]' + param + '=([^&#]*)');\n  const results = regex.exec(query);\n\n  return results === null ? '' :\n    decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\n\n/**\n * For translating strings, there is a global LOCALIZED_STRINGS array that\n * is defined on the HTML template level so that those strings are exposed to\n * WPML translation. The LOCALIZED_STRINGS array is composed of objects with a\n * `slug` key whose value is some constant, and a `label` value which is the\n * translated equivalent. This function takes a slug name and returns the\n * label.\n * @param  {string} slug\n * @return {string} localized value\n */\nUtility.localize = function(slug) {\n  let text = slug || '';\n  const strings = window.LOCALIZED_STRINGS || [];\n  const match = strings.filter(\n    (s) => (s.hasOwnProperty('slug') && s['slug'] === slug) ? s : false\n  );\n  return (match[0] && match[0].hasOwnProperty('label')) ? match[0].label : text;\n};\n\n/**\n * Takes a a string and returns whether or not the string is a valid email\n * by using native browser validation if available. Otherwise, does a simple\n * Regex test.\n * @param {string} email\n * @return {boolean}\n */\nUtility.validateEmail = function(email) {\n  const input = document.createElement('input');\n  input.type = 'email';\n  input.value = email;\n\n  return typeof input.checkValidity === 'function' ?\n    input.checkValidity() : /\\S+@\\S+\\.\\S+/.test(email);\n};\n\n/**\n * Map toggled checkbox values to an input.\n * @param  {Object} event The parent click event.\n * @return {Element}      The target element.\n */\nUtility.joinValues = function(event) {\n  if (!event.target.matches('input[type=\"checkbox\"]'))\n    return;\n\n  if (!event.target.closest('[data-js-join-values]'))\n    return;\n\n  let el = event.target.closest('[data-js-join-values]');\n  let target = document.querySelector(el.dataset.jsJoinValues);\n\n  target.value = Array.from(\n      el.querySelectorAll('input[type=\"checkbox\"]')\n    )\n    .filter((e) => (e.value && e.checked))\n    .map((e) => e.value)\n    .join(', ');\n\n  return target;\n};\n\n/**\n * A simple form validation class that uses native form validation. It will\n * add appropriate form feedback for each input that is invalid and native\n * localized browser messaging.\n *\n * See https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\n * See https://caniuse.com/#feat=form-validation for support\n *\n * @param  {Event}         event The form submission event.\n * @return {Event/Boolean}       The original event or false if invalid.\n */\nUtility.valid = function(event) {\n  event.preventDefault();\n\n  if (Utility.debug())\n    // eslint-disable-next-line no-console\n    console.dir({init: 'Validation', event: event});\n\n  let validity = event.target.checkValidity();\n  let elements = event.target.querySelectorAll('input[required=\"true\"]');\n\n  for (let i = 0; i < elements.length; i++) {\n    // Remove old messaging if it exists\n    let el = elements[i];\n    let container = el.parentNode;\n    let message = container.querySelector('.error-message');\n\n    container.classList.remove('error');\n    if (message) message.remove();\n\n    // If this input valid, skip messaging\n    if (el.validity.valid) continue;\n\n    // Create the new error message.\n    message = document.createElement('div');\n\n    // Get the error message from localized strings.\n    if (el.validity.valueMissing)\n      message.innerHTML = Utility.localize('VALID_REQUIRED');\n    else if (!el.validity.valid)\n      message.innerHTML = Utility.localize(\n        `VALID_${el.type.toUpperCase()}_INVALID`\n      );\n    else\n      message.innerHTML = el.validationMessage;\n\n    message.setAttribute('aria-live', 'polite');\n    message.classList.add('error-message');\n\n    // Add the error class and error message.\n    container.classList.add('error');\n    container.insertBefore(message, container.childNodes[0]);\n  }\n\n  if (Utility.debug())\n    // eslint-disable-next-line no-console\n    console.dir({complete: 'Validation', valid: validity, event: event});\n\n  return (validity) ? event : validity;\n};\n\n/**\n * A markdown parsing method. It relies on the dist/markdown.min.js script\n * which is a browser compatible version of markdown-js\n * @url https://github.com/evilstreak/markdown-js\n * @return {Object} The iteration over the markdown DOM parents\n */\nUtility.parseMarkdown = () => {\n  if (typeof markdown === 'undefined') return false;\n\n  const mds = document.querySelectorAll(Utility.SELECTORS.parseMarkdown);\n\n  for (let i = 0; i < mds.length; i++) {\n    let element = mds[i];\n    fetch(element.dataset.jsMarkdown)\n      .then((response) => {\n        if (response.ok)\n          return response.text();\n        else {\n          element.innerHTML = '';\n          // eslint-disable-next-line no-console\n          if (Utility.debug()) console.dir(response);\n        }\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        if (Utility.debug()) console.dir(error);\n      })\n      .then((data) => {\n        try {\n          element.classList.toggle('animated');\n          element.classList.toggle('fadeIn');\n          element.innerHTML = markdown.toHTML(data);\n        } catch (error) {}\n      });\n  }\n};\n\n/**\n * Application parameters\n * @type {Object}\n */\nUtility.PARAMS = {\n  DEBUG: 'debug'\n};\n\n/**\n * Selectors for the Utility module\n * @type {Object}\n */\nUtility.SELECTORS = {\n  parseMarkdown: '[data-js=\"markdown\"]'\n};\n\nexport default Utility;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport keysIn from './keysIn.js';\n\n/**\n * This method is like `_.assignIn` except that it accepts `customizer`\n * which is invoked to produce the assigned values. If `customizer` returns\n * `undefined`, assignment is handled by the method instead. The `customizer`\n * is invoked with five arguments: (objValue, srcValue, key, object, source).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extendWith\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} [customizer] The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @see _.assignWith\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   return _.isUndefined(objValue) ? srcValue : objValue;\n * }\n *\n * var defaults = _.partialRight(_.assignInWith, customizer);\n *\n * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n  copyObject(source, keysIn(source), object, customizer);\n});\n\nexport default assignInWith;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n\n/** `Object#toString` result references. */\nvar domExcTag = '[object DOMException]',\n    errorTag = '[object Error]';\n\n/**\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n * `SyntaxError`, `TypeError`, or `URIError` object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n * @example\n *\n * _.isError(new Error);\n * // => true\n *\n * _.isError(Error);\n * // => false\n */\nfunction isError(value) {\n  if (!isObjectLike(value)) {\n    return false;\n  }\n  var tag = baseGetTag(value);\n  return tag == errorTag || tag == domExcTag ||\n    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n}\n\nexport default isError;\n","import apply from './_apply.js';\nimport baseRest from './_baseRest.js';\nimport isError from './isError.js';\n\n/**\n * Attempts to invoke `func`, returning either the result or the caught error\n * object. Any additional arguments are provided to `func` when it's invoked.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Util\n * @param {Function} func The function to attempt.\n * @param {...*} [args] The arguments to invoke `func` with.\n * @returns {*} Returns the `func` result or error object.\n * @example\n *\n * // Avoid throwing errors for invalid selectors.\n * var elements = _.attempt(function(selector) {\n *   return document.querySelectorAll(selector);\n * }, '>_>');\n *\n * if (_.isError(elements)) {\n *   elements = [];\n * }\n */\nvar attempt = baseRest(function(func, args) {\n  try {\n    return apply(func, undefined, args);\n  } catch (e) {\n    return isError(e) ? e : new Error(e);\n  }\n});\n\nexport default attempt;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","import arrayMap from './_arrayMap.js';\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nexport default baseValues;\n","import eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n * of source objects to the destination object for all destination properties\n * that resolve to `undefined`.\n *\n * @private\n * @param {*} objValue The destination value.\n * @param {*} srcValue The source value.\n * @param {string} key The key of the property to assign.\n * @param {Object} object The parent object of `objValue`.\n * @returns {*} Returns the value to assign.\n */\nfunction customDefaultsAssignIn(objValue, srcValue, key, object) {\n  if (objValue === undefined ||\n      (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n    return srcValue;\n  }\n  return objValue;\n}\n\nexport default customDefaultsAssignIn;\n","/** Used to escape characters for inclusion in compiled string literals. */\nvar stringEscapes = {\n  '\\\\': '\\\\',\n  \"'\": \"'\",\n  '\\n': 'n',\n  '\\r': 'r',\n  '\\u2028': 'u2028',\n  '\\u2029': 'u2029'\n};\n\n/**\n * Used by `_.template` to escape characters for inclusion in compiled string literals.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nfunction escapeStringChar(chr) {\n  return '\\\\' + stringEscapes[chr];\n}\n\nexport default escapeStringChar;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","/** Used to match template delimiters. */\nvar reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\nexport default reInterpolate;\n","/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nexport default basePropertyOf;\n","import basePropertyOf from './_basePropertyOf.js';\n\n/** Used to map characters to HTML entities. */\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n\nexport default escapeHtmlChar;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","import escapeHtmlChar from './_escapeHtmlChar.js';\nimport toString from './toString.js';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"']/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nexport default escape;\n","/** Used to match template delimiters. */\nvar reEscape = /<%-([\\s\\S]+?)%>/g;\n\nexport default reEscape;\n","/** Used to match template delimiters. */\nvar reEvaluate = /<%([\\s\\S]+?)%>/g;\n\nexport default reEvaluate;\n","import escape from './escape.js';\nimport reEscape from './_reEscape.js';\nimport reEvaluate from './_reEvaluate.js';\nimport reInterpolate from './_reInterpolate.js';\n\n/**\n * By default, the template delimiters used by lodash are like those in\n * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n * following template settings to use alternative delimiters.\n *\n * @static\n * @memberOf _\n * @type {Object}\n */\nvar templateSettings = {\n\n  /**\n   * Used to detect `data` property values to be HTML-escaped.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'escape': reEscape,\n\n  /**\n   * Used to detect code to be evaluated.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'evaluate': reEvaluate,\n\n  /**\n   * Used to detect `data` property values to inject.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'interpolate': reInterpolate,\n\n  /**\n   * Used to reference the data object in the template text.\n   *\n   * @memberOf _.templateSettings\n   * @type {string}\n   */\n  'variable': '',\n\n  /**\n   * Used to import variables into the compiled template.\n   *\n   * @memberOf _.templateSettings\n   * @type {Object}\n   */\n  'imports': {\n\n    /**\n     * A reference to the `lodash` function.\n     *\n     * @memberOf _.templateSettings.imports\n     * @type {Function}\n     */\n    '_': { 'escape': escape }\n  }\n};\n\nexport default templateSettings;\n","import assignInWith from './assignInWith.js';\nimport attempt from './attempt.js';\nimport baseValues from './_baseValues.js';\nimport customDefaultsAssignIn from './_customDefaultsAssignIn.js';\nimport escapeStringChar from './_escapeStringChar.js';\nimport isError from './isError.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keys from './keys.js';\nimport reInterpolate from './_reInterpolate.js';\nimport templateSettings from './templateSettings.js';\nimport toString from './toString.js';\n\n/** Used to match empty string literals in compiled template source. */\nvar reEmptyStringLeading = /\\b__p \\+= '';/g,\n    reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n    reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n/**\n * Used to match\n * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n */\nvar reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n/** Used to ensure capturing order of template delimiters. */\nvar reNoMatch = /($^)/;\n\n/** Used to match unescaped characters in compiled string literals. */\nvar reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n/**\n * Creates a compiled template function that can interpolate data properties\n * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n * properties may be accessed as free variables in the template. If a setting\n * object is given, it takes precedence over `_.templateSettings` values.\n *\n * **Note:** In the development build `_.template` utilizes\n * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n * for easier debugging.\n *\n * For more information on precompiling templates see\n * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n *\n * For more information on Chrome extension sandboxes see\n * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The template string.\n * @param {Object} [options={}] The options object.\n * @param {RegExp} [options.escape=_.templateSettings.escape]\n *  The HTML \"escape\" delimiter.\n * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n *  The \"evaluate\" delimiter.\n * @param {Object} [options.imports=_.templateSettings.imports]\n *  An object to import into the template as free variables.\n * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n *  The \"interpolate\" delimiter.\n * @param {string} [options.sourceURL='templateSources[n]']\n *  The sourceURL of the compiled template.\n * @param {string} [options.variable='obj']\n *  The data object variable name.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Function} Returns the compiled template function.\n * @example\n *\n * // Use the \"interpolate\" delimiter to create a compiled template.\n * var compiled = _.template('hello <%= user %>!');\n * compiled({ 'user': 'fred' });\n * // => 'hello fred!'\n *\n * // Use the HTML \"escape\" delimiter to escape data property values.\n * var compiled = _.template('<b><%- value %></b>');\n * compiled({ 'value': '<script>' });\n * // => '<b>&lt;script&gt;</b>'\n *\n * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n * compiled({ 'users': ['fred', 'barney'] });\n * // => '<li>fred</li><li>barney</li>'\n *\n * // Use the internal `print` function in \"evaluate\" delimiters.\n * var compiled = _.template('<% print(\"hello \" + user); %>!');\n * compiled({ 'user': 'barney' });\n * // => 'hello barney!'\n *\n * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n * // Disable support by replacing the \"interpolate\" delimiter.\n * var compiled = _.template('hello ${ user }!');\n * compiled({ 'user': 'pebbles' });\n * // => 'hello pebbles!'\n *\n * // Use backslashes to treat delimiters as plain text.\n * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n * compiled({ 'value': 'ignored' });\n * // => '<%- value %>'\n *\n * // Use the `imports` option to import `jQuery` as `jq`.\n * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n * compiled({ 'users': ['fred', 'barney'] });\n * // => '<li>fred</li><li>barney</li>'\n *\n * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n * compiled(data);\n * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n *\n * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n * compiled.source;\n * // => function(data) {\n * //   var __t, __p = '';\n * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n * //   return __p;\n * // }\n *\n * // Use custom template delimiters.\n * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n * var compiled = _.template('hello {{ user }}!');\n * compiled({ 'user': 'mustache' });\n * // => 'hello mustache!'\n *\n * // Use the `source` property to inline compiled templates for meaningful\n * // line numbers in error messages and stack traces.\n * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n *   var JST = {\\\n *     \"main\": ' + _.template(mainText).source + '\\\n *   };\\\n * ');\n */\nfunction template(string, options, guard) {\n  // Based on John Resig's `tmpl` implementation\n  // (http://ejohn.org/blog/javascript-micro-templating/)\n  // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n  var settings = templateSettings.imports._.templateSettings || templateSettings;\n\n  if (guard && isIterateeCall(string, options, guard)) {\n    options = undefined;\n  }\n  string = toString(string);\n  options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n      importsKeys = keys(imports),\n      importsValues = baseValues(imports, importsKeys);\n\n  var isEscaping,\n      isEvaluating,\n      index = 0,\n      interpolate = options.interpolate || reNoMatch,\n      source = \"__p += '\";\n\n  // Compile the regexp to match each delimiter.\n  var reDelimiters = RegExp(\n    (options.escape || reNoMatch).source + '|' +\n    interpolate.source + '|' +\n    (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n    (options.evaluate || reNoMatch).source + '|$'\n  , 'g');\n\n  // Use a sourceURL for easier debugging.\n  var sourceURL = 'sourceURL' in options ? '//# sourceURL=' + options.sourceURL + '\\n' : '';\n\n  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n    interpolateValue || (interpolateValue = esTemplateValue);\n\n    // Escape characters that can't be included in string literals.\n    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n    // Replace delimiters with snippets.\n    if (escapeValue) {\n      isEscaping = true;\n      source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n    }\n    if (evaluateValue) {\n      isEvaluating = true;\n      source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n    }\n    if (interpolateValue) {\n      source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n    }\n    index = offset + match.length;\n\n    // The JS engine embedded in Adobe products needs `match` returned in\n    // order to produce the correct `offset` value.\n    return match;\n  });\n\n  source += \"';\\n\";\n\n  // If `variable` is not specified wrap a with-statement around the generated\n  // code to add the data object to the top of the scope chain.\n  var variable = options.variable;\n  if (!variable) {\n    source = 'with (obj) {\\n' + source + '\\n}\\n';\n  }\n  // Cleanup code by stripping empty strings.\n  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n    .replace(reEmptyStringMiddle, '$1')\n    .replace(reEmptyStringTrailing, '$1;');\n\n  // Frame code as the function body.\n  source = 'function(' + (variable || 'obj') + ') {\\n' +\n    (variable\n      ? ''\n      : 'obj || (obj = {});\\n'\n    ) +\n    \"var __t, __p = ''\" +\n    (isEscaping\n       ? ', __e = _.escape'\n       : ''\n    ) +\n    (isEvaluating\n      ? ', __j = Array.prototype.join;\\n' +\n        \"function print() { __p += __j.call(arguments, '') }\\n\"\n      : ';\\n'\n    ) +\n    source +\n    'return __p\\n}';\n\n  var result = attempt(function() {\n    return Function(importsKeys, sourceURL + 'return ' + source)\n      .apply(undefined, importsValues);\n  });\n\n  // Provide the compiled function's source by its `toString` method or\n  // the `source` property as a convenience for inlining compiled templates.\n  result.source = source;\n  if (isError(result)) {\n    throw result;\n  }\n  return result;\n}\n\nexport default template;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nexport default createBaseFor;\n","import createBaseFor from './_createBaseFor.js';\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nexport default baseFor;\n","import baseFor from './_baseFor.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nexport default baseForOwn;\n","import isArrayLike from './isArrayLike.js';\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nexport default createBaseEach;\n","import baseForOwn from './_baseForOwn.js';\nimport createBaseEach from './_createBaseEach.js';\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nexport default baseEach;\n","import identity from './identity.js';\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nexport default castFunction;\n","import arrayEach from './_arrayEach.js';\nimport baseEach from './_baseEach.js';\nimport castFunction from './_castFunction.js';\nimport isArray from './isArray.js';\n\n/**\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\n * The iteratee is invoked with three arguments: (value, index|key, collection).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n * property are iterated like arrays. To avoid this behavior use `_.forIn`\n * or `_.forOwn` for object iteration.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias each\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see _.forEachRight\n * @example\n *\n * _.forEach([1, 2], function(value) {\n *   console.log(value);\n * });\n * // => Logs `1` then `2`.\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forEach(collection, iteratee) {\n  var func = isArray(collection) ? arrayEach : baseEach;\n  return func(collection, castFunction(iteratee));\n}\n\nexport default forEach;\n","'use strict';\n\nimport Utility from '../../js/modules/utility.js';\nimport {default as _template} from 'lodash-es/template';\nimport {default as _forEach} from 'lodash-es/forEach';\n\n/**\n * The NearbyStops Module\n * @class\n */\nclass NearbyStops {\n  /**\n   * @constructor\n   * @return {object} The NearbyStops class\n   */\n  constructor() {\n    /** @type {Array} Collection of nearby stops DOM elements */\n    this._elements = document.querySelectorAll(NearbyStops.selector);\n\n    /** @type {Array} The collection all stops from the data */\n    this._stops = [];\n\n    /** @type {Array} The currated collection of stops that will be rendered */\n    this._locations = [];\n\n    // Loop through DOM Components.\n    _forEach(this._elements, (el) => {\n      // Fetch the data for the element.\n      this._fetch(el, (status, data) => {\n        if (status !== 'success') return;\n\n        this._stops = data;\n        // Get stops closest to the location.\n        this._locations = this._locate(el, this._stops);\n        // Assign the color names from patterns stylesheet.\n        this._locations = this._assignColors(this._locations);\n        // Render the markup for the stops.\n        this._render(el, this._locations);\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * This compares the latitude and longitude with the Subway Stops data, sorts\n   * the data by distance from closest to farthest, and returns the stop and\n   * distances of the stations.\n   * @param  {object} el    The DOM Component with the data attr options\n   * @param  {object} stops All of the stops data to compare to\n   * @return {object}       A collection of the closest stops with distances\n   */\n  _locate(el, stops) {\n    const amount = parseInt(this._opt(el, 'AMOUNT'))\n      || NearbyStops.defaults.AMOUNT;\n    let loc = JSON.parse(this._opt(el, 'LOCATION'));\n    let geo = [];\n    let distances = [];\n\n    // 1. Compare lat and lon of current location with list of stops\n    for (let i = 0; i < stops.length; i++) {\n      geo = stops[i][this._key('ODATA_GEO')][this._key('ODATA_COOR')];\n      geo = geo.reverse();\n      distances.push({\n        'distance': this._equirectangular(loc[0], loc[1], geo[0], geo[1]),\n        'stop': i, // index of stop in the data\n      });\n    }\n\n    // 2. Sort the distances shortest to longest\n    distances.sort((a, b) => (a.distance < b.distance) ? -1 : 1);\n    distances = distances.slice(0, amount);\n\n    // 3. Return the list of closest stops (number based on Amount option)\n    // and replace the stop index with the actual stop data\n    for (let x = 0; x < distances.length; x++)\n      distances[x].stop = stops[distances[x].stop];\n\n    return distances;\n  }\n\n  /**\n   * Fetches the stop data from a local source\n   * @param  {object}   el       The NearbyStops DOM element\n   * @param  {function} callback The function to execute on success\n   * @return {funciton}          the fetch promise\n   */\n  _fetch(el, callback) {\n    const headers = {\n      'method': 'GET'\n    };\n\n    return fetch(this._opt(el, 'ENDPOINT'), headers)\n      .then((response) => {\n        if (response.ok)\n          return response.json();\n        else {\n          // eslint-disable-next-line no-console\n          if (Utility.debug()) console.dir(response);\n          callback('error', response);\n        }\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        if (Utility.debug()) console.dir(error);\n        callback('error', error);\n      })\n      .then((data) => callback('success', data));\n  }\n\n  /**\n   * Returns distance in miles comparing the latitude and longitude of two\n   * points using decimal degrees.\n   * @param  {float} lat1 Latitude of point 1 (in decimal degrees)\n   * @param  {float} lon1 Longitude of point 1 (in decimal degrees)\n   * @param  {float} lat2 Latitude of point 2 (in decimal degrees)\n   * @param  {float} lon2 Longitude of point 2 (in decimal degrees)\n   * @return {float}      [description]\n   */\n  _equirectangular(lat1, lon1, lat2, lon2) {\n    Math.deg2rad = (deg) => deg * (Math.PI / 180);\n    let alpha = Math.abs(lon2) - Math.abs(lon1);\n    let x = Math.deg2rad(alpha) * Math.cos(Math.deg2rad(lat1 + lat2) / 2);\n    let y = Math.deg2rad(lat1 - lat2);\n    let R = 3959; // earth radius in miles;\n    let distance = Math.sqrt(x * x + y * y) * R;\n\n    return distance;\n  }\n\n  /**\n   * Assigns colors to the data using the NearbyStops.truncks dictionary.\n   * @param  {object} locations Object of closest locations\n   * @return {object}           Same object with colors assigned to each loc\n   */\n  _assignColors(locations) {\n    let locationLines = [];\n    let line = 'S';\n    let lines = ['S'];\n\n    // Loop through each location that we are going to display\n    for (let i = 0; i < locations.length; i++) {\n      // assign the line to a variable to lookup in our color dictionary\n      locationLines = locations[i].stop[this._key('ODATA_LINE')].split('-');\n\n      for (let x = 0; x < locationLines.length; x++) {\n        line = locationLines[x];\n\n        for (let y = 0; y < NearbyStops.trunks.length; y++) {\n          lines = NearbyStops.trunks[y]['LINES'];\n\n          if (lines.indexOf(line) > -1)\n            locationLines[x] = {\n              'line': line,\n              'trunk': NearbyStops.trunks[y]['TRUNK']\n            };\n        }\n      }\n\n      // Add the trunk to the location\n      locations[i].trunks = locationLines;\n    }\n\n    return locations;\n  }\n\n  /**\n   * The function to compile and render the location template\n   * @param  {object} element The parent DOM element of the component\n   * @param  {object} data    The data to pass to the template\n   * @return {object}         The NearbyStops class\n   */\n  _render(element, data) {\n    let compiled = _template(NearbyStops.templates.SUBWAY, {\n      'imports': {\n        '_each': _forEach\n      }\n    });\n\n    element.innerHTML = compiled({'stops': data});\n\n    return this;\n  }\n\n  /**\n   * Get data attribute options\n   * @param  {object} element The element to pull the setting from.\n   * @param  {string} opt     The key reference to the attribute.\n   * @return {string}         The setting of the data attribute.\n   */\n  _opt(element, opt) {\n    return element.dataset[\n      `${NearbyStops.namespace}${NearbyStops.options[opt]}`\n    ];\n  }\n\n  /**\n   * A proxy function for retrieving the proper key\n   * @param  {string} key The reference for the stored keys.\n   * @return {string}     The desired key.\n   */\n  _key(key) {\n    return NearbyStops.keys[key];\n  }\n}\n\n/**\n * The dom selector for the module\n * @type {String}\n */\nNearbyStops.selector = '[data-js=\"nearby-stops\"]';\n\n/**\n * The namespace for the component's JS options. It's primarily used to lookup\n * attributes in an element's dataset.\n * @type {String}\n */\nNearbyStops.namespace = 'nearbyStops';\n\n/**\n * A list of options that can be assigned to the component. It's primarily used\n * to lookup attributes in an element's dataset.\n * @type {Object}\n */\nNearbyStops.options = {\n  LOCATION: 'Location',\n  AMOUNT: 'Amount',\n  ENDPOINT: 'Endpoint'\n};\n\n/**\n * The documentation for the data attr options.\n * @type {Object}\n */\nNearbyStops.definition = {\n  LOCATION: 'The current location to compare distance to stops.',\n  AMOUNT: 'The amount of stops to list.',\n  ENDPOINT: 'The endopoint for the data feed.'\n};\n\n/**\n * [defaults description]\n * @type {Object}\n */\nNearbyStops.defaults = {\n  AMOUNT: 3\n};\n\n/**\n * Storage for some of the data keys.\n * @type {Object}\n */\nNearbyStops.keys = {\n  ODATA_GEO: 'the_geom',\n  ODATA_COOR: 'coordinates',\n  ODATA_LINE: 'line'\n};\n\n/**\n * Templates for the Nearby Stops Component\n * @type {Object}\n */\nNearbyStops.templates = {\n  SUBWAY: [\n  '<% _each(stops, function(stop) { %>',\n  '<div class=\"c-nearby-stops__stop\">',\n    '<% var lines = stop.stop.line.split(\"-\") %>',\n    '<% _each(stop.trunks, function(trunk) { %>',\n    '<% var exp = (trunk.line.indexOf(\"Express\") > -1) ? true : false %>',\n    '<% if (exp) trunk.line = trunk.line.split(\" \")[0] %>',\n    '<span class=\"',\n      'c-nearby-stops__subway ',\n      'icon-subway<% if (exp) { %>-express<% } %> ',\n      '<% if (exp) { %>border-<% } else { %>bg-<% } %><%- trunk.trunk %>',\n      '\">',\n      '<%- trunk.line %>',\n      '<% if (exp) { %> <span class=\"sr-only\">Express</span><% } %>',\n    '</span>',\n    '<% }); %>',\n    '<span class=\"c-nearby-stops__description\">',\n      '<%- stop.distance.toString().slice(0, 3) %> Miles, ',\n      '<%- stop.stop.name %>',\n    '</span>',\n  '</div>',\n  '<% }); %>'\n  ].join('')\n};\n\n/**\n * Color assignment for Subway Train lines, used in cunjunction with the\n * background colors defined in config/variables.js.\n * Based on the nomenclature described here;\n * @url // https://en.wikipedia.org/wiki/New_York_City_Subway#Nomenclature\n * @type {Array}\n */\nNearbyStops.trunks = [\n  {\n    TRUNK: 'eighth-avenue',\n    LINES: ['A', 'C', 'E'],\n  },\n  {\n    TRUNK: 'sixth-avenue',\n    LINES: ['B', 'D', 'F', 'M'],\n  },\n  {\n    TRUNK: 'crosstown',\n    LINES: ['G'],\n  },\n  {\n    TRUNK: 'canarsie',\n    LINES: ['L'],\n  },\n  {\n    TRUNK: 'nassau',\n    LINES: ['J', 'Z'],\n  },\n  {\n    TRUNK: 'broadway',\n    LINES: ['N', 'Q', 'R', 'W'],\n  },\n  {\n    TRUNK: 'broadway-seventh-avenue',\n    LINES: ['1', '2', '3'],\n  },\n  {\n    TRUNK: 'lexington-avenue',\n    LINES: ['4', '5', '6', '6 Express'],\n  },\n  {\n    TRUNK: 'flushing',\n    LINES: ['7', '7 Express'],\n  },\n  {\n    TRUNK: 'shuttles',\n    LINES: ['S']\n  }\n];\n\nexport default NearbyStops;\n","export function isStringJsonObject(arg) {\r\n    try {\r\n        JSON.parse(arg);\r\n        return true;\r\n    }\r\n    catch (e) { }\r\n    return false;\r\n}\r\nexport function isArray(arg) {\r\n    return Array.isArray(arg);\r\n}\r\nexport function isStringNumber(arg) {\r\n    return typeof arg == 'number' || /^[-+]?\\d+([Ee][+-]?\\d+)?(\\.\\d+)?$/.test(arg);\r\n}\r\nexport function isStringInteger(arg) {\r\n    return /^[-+]?\\d+([Ee][+-]?\\d+)?$/.test(arg);\r\n}\r\nexport function isStringNullOrEmpty(arg) {\r\n    return arg == null || arg.trim() === \"\";\r\n}\r\nexport var nodeListToArray = function (nodeList) {\r\n    return Array.prototype.slice.call(nodeList);\r\n};\r\n//# sourceMappingURL=Util.js.map","import { isStringNumber, isStringJsonObject, isStringNullOrEmpty } from \"./Util\";\r\nexport var parserList = [\r\n    {\r\n        name: \"auto\",\r\n        parse: function (val, forceNull) {\r\n            if (isStringNullOrEmpty(val)) {\r\n                return forceNull ? null : val;\r\n            }\r\n            var result = val.toString().trim();\r\n            if (result.toLowerCase() === \"null\")\r\n                return null;\r\n            try {\r\n                result = JSON.parse(result);\r\n                return result;\r\n            }\r\n            catch (e) {\r\n            }\r\n            var array = result.split(\",\");\r\n            if (array.length > 1) {\r\n                result = array.map(function (x) {\r\n                    if (isStringNumber(x)) {\r\n                        return parseFloat(x);\r\n                    }\r\n                    else if (isStringJsonObject(x)) {\r\n                        return JSON.parse(x);\r\n                    }\r\n                    return x.trim();\r\n                });\r\n            }\r\n            return result;\r\n        }\r\n    },\r\n    {\r\n        name: \"number\",\r\n        parse: function (val, forceNull) {\r\n            if (isStringNullOrEmpty(val)) {\r\n                return forceNull ? null : 0;\r\n            }\r\n            if (isStringNumber(val)) {\r\n                return parseFloat(val);\r\n            }\r\n            return 0;\r\n        }\r\n    },\r\n    {\r\n        name: \"boolean\",\r\n        parse: function (val, forceNull) {\r\n            if (isStringNullOrEmpty(val)) {\r\n                return forceNull ? null : false;\r\n            }\r\n            val = val.toString().toLowerCase();\r\n            if (val === \"true\" || val === \"1\") {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    {\r\n        name: \"string\",\r\n        parse: function (val, forceNull) {\r\n            if (isStringNullOrEmpty(val)) {\r\n                return null;\r\n            }\r\n            var result = val.toString().trim();\r\n            if (result.toLowerCase() === \"null\" || (result === \"\" && forceNull))\r\n                return null;\r\n            return result;\r\n        }\r\n    },\r\n    {\r\n        name: \"array[auto]\",\r\n        parse: function (val, forceNull) {\r\n            if (isStringNullOrEmpty(val)) {\r\n                if (forceNull)\r\n                    return null;\r\n                return [];\r\n            }\r\n            return val.split(\",\").map(function (x) {\r\n                var parser = parserList.filter(function (x) { return x.name === \"auto\"; })[0];\r\n                return parser.parse(x.trim(), forceNull);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"array[string]\",\r\n        parse: function (val, forceNull) {\r\n            if (isStringNullOrEmpty(val)) {\r\n                if (forceNull)\r\n                    return null;\r\n                return [];\r\n            }\r\n            return val.split(\",\").map(function (x) { return x.trim().toString(); });\r\n        }\r\n    },\r\n    {\r\n        name: \"array[number]\",\r\n        parse: function (val, forceNull) {\r\n            if (isStringNullOrEmpty(val)) {\r\n                if (forceNull)\r\n                    return null;\r\n                return [];\r\n            }\r\n            return val.split(\",\").map(function (x) { return parseFloat(x.trim()); });\r\n        }\r\n    },\r\n    {\r\n        name: \"json\",\r\n        parse: function (val, forceNull) {\r\n            if (isStringNullOrEmpty(val)) {\r\n                if (forceNull)\r\n                    return null;\r\n                return {};\r\n            }\r\n            return JSON.parse(val);\r\n        }\r\n    }\r\n];\r\n//# sourceMappingURL=ParserList.js.map","export var pluginName = \"NSerializeJson\";\r\n//# sourceMappingURL=Constants.js.map","import { isStringNullOrEmpty, isStringInteger, isArray, nodeListToArray } from \"./Util\";\r\nimport { parserList } from \"./ParserList\";\r\nimport { pluginName } from \"./Constants\";\r\nvar NSerializeJson = (function () {\r\n    function NSerializeJson() {\r\n    }\r\n    NSerializeJson.parseValue = function (value, type) {\r\n        if (isStringNullOrEmpty(type)) {\r\n            var autoParser = this.parsers.filter(function (x) { return x.name === \"auto\"; })[0];\r\n            return autoParser.parse(value, this.options.forceNullOnEmpty);\r\n        }\r\n        var parser = this.parsers.filter(function (x) { return x.name === type; })[0];\r\n        if (parser == null) {\r\n            throw pluginName + \": couldn't find ther parser for type '\" + type + \"'.\";\r\n        }\r\n        return parser.parse(value, this.options.forceNullOnEmpty);\r\n    };\r\n    NSerializeJson.serializeForm = function (htmlFormElement) {\r\n        var _this = this;\r\n        var nodeList = htmlFormElement.querySelectorAll(\"input, select, textarea\");\r\n        var htmlInputElements = nodeListToArray(nodeList);\r\n        var checkedElements = htmlInputElements.filter(function (x) {\r\n            if (x.disabled ||\r\n                ((x.getAttribute(\"type\") === \"radio\" && !x.checked) ||\r\n                    (x.getAttribute(\"type\") === \"checkbox\" && !x.checked))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        var resultObject = {};\r\n        checkedElements.forEach(function (x) { return _this.serializeIntoObject(resultObject, x); });\r\n        return resultObject;\r\n    };\r\n    NSerializeJson.serializeIntoObject = function (obj, htmlElement) {\r\n        var value = null;\r\n        if (htmlElement.tagName.toLowerCase() === \"select\") {\r\n            var firstSelectOpt = Array.from(htmlElement.options).filter(function (x) { return x.selected; })[0];\r\n            if (firstSelectOpt) {\r\n                value = firstSelectOpt.getAttribute(\"value\");\r\n            }\r\n        }\r\n        else {\r\n            value = htmlElement.value;\r\n        }\r\n        var pathStr = htmlElement.getAttribute(\"name\");\r\n        if (isStringNullOrEmpty(pathStr))\r\n            return obj;\r\n        var path = [];\r\n        var type = null;\r\n        var typeIndex = pathStr.indexOf(\":\");\r\n        if (typeIndex > -1) {\r\n            type = pathStr.substring(typeIndex + 1, pathStr.length);\r\n            if (type === \"skip\") {\r\n                return obj;\r\n            }\r\n            pathStr = pathStr.substring(0, typeIndex);\r\n        }\r\n        else {\r\n            type = htmlElement.getAttribute(\"data-value-type\");\r\n        }\r\n        if (this.options.onBeforeParseValue != null) {\r\n            value = this.options.onBeforeParseValue(value, type);\r\n        }\r\n        var parsedValue = this.parseValue(value, type);\r\n        var pathLength = 0;\r\n        if (this.options.useDotSeparatorInPath) {\r\n            var addArrayToPath = false;\r\n            path = pathStr.split(\".\");\r\n            pathLength = path.length;\r\n            path.forEach(function (step, index) {\r\n                var indexOfBrackets = step.indexOf(\"[]\");\r\n                if (index !== pathLength - 1) {\r\n                    if (indexOfBrackets > -1) {\r\n                        throw pluginName + \": error in path '\" + pathStr + \"' empty values in the path mean array and should be at the end.\";\r\n                    }\r\n                }\r\n                else {\r\n                    if (indexOfBrackets > -1) {\r\n                        path[index] = step.replace(\"[]\", \"\");\r\n                        addArrayToPath = true;\r\n                    }\r\n                }\r\n            });\r\n            if (addArrayToPath) {\r\n                path.push(\"\");\r\n            }\r\n        }\r\n        else {\r\n            path = pathStr.split(\"[\").map(function (x, i) { return x.replace(\"]\", \"\"); });\r\n            pathLength = path.length;\r\n            path.forEach(function (step, index) {\r\n                if (index !== pathLength - 1 && isStringNullOrEmpty(step))\r\n                    throw pluginName + \": error in path '\" + pathStr + \"' empty values in the path mean array and should be at the end.\";\r\n            });\r\n        }\r\n        this.searchAndSet(obj, path, 0, parsedValue);\r\n        return obj;\r\n    };\r\n    NSerializeJson.searchAndSet = function (currentObj, path, pathIndex, parsedValue, arrayInternalIndex) {\r\n        if (arrayInternalIndex === void 0) { arrayInternalIndex = 0; }\r\n        var step = path[pathIndex];\r\n        var isFinalStep = pathIndex === path.length - 1;\r\n        var nextStep = path[pathIndex + 1];\r\n        if (currentObj == null || typeof currentObj == \"string\") {\r\n            path = path.map(function (x) { return isStringNullOrEmpty(x) ? \"[]\" : x; });\r\n            console.log(pluginName + \": there was an error in path '\" + path + \"' in step '\" + step + \"'.\");\r\n            throw pluginName + \": error.\";\r\n        }\r\n        var isArrayStep = isStringNullOrEmpty(step);\r\n        var isIntegerStep = isStringInteger(step);\r\n        var isNextStepAnArray = isStringInteger(nextStep) || isStringNullOrEmpty(nextStep);\r\n        if (isArrayStep) {\r\n            if (isFinalStep) {\r\n                currentObj.push(parsedValue);\r\n                return;\r\n            }\r\n            else {\r\n                if (currentObj[arrayInternalIndex] == null) {\r\n                    currentObj[arrayInternalIndex] = {};\r\n                }\r\n                step = arrayInternalIndex;\r\n                arrayInternalIndex++;\r\n            }\r\n        }\r\n        else if (isIntegerStep && this.options.useNumKeysAsArrayIndex) {\r\n            step = parseInt(step);\r\n            if (!isArray(currentObj)) {\r\n                currentObj = [];\r\n            }\r\n            if (isFinalStep) {\r\n                currentObj[step] = parsedValue;\r\n                return;\r\n            }\r\n            else {\r\n                if (currentObj[step] == null)\r\n                    currentObj[step] = {};\r\n            }\r\n        }\r\n        else {\r\n            if (isFinalStep) {\r\n                currentObj[step] = parsedValue;\r\n                return;\r\n            }\r\n            else {\r\n                if (this.options.useNumKeysAsArrayIndex) {\r\n                    if (isNextStepAnArray) {\r\n                        if (!isArray(currentObj[step]))\r\n                            currentObj[step] = [];\r\n                    }\r\n                    else {\r\n                        if (currentObj[step] == null)\r\n                            currentObj[step] = {};\r\n                    }\r\n                }\r\n                else {\r\n                    if (currentObj[step] == null)\r\n                        currentObj[step] = {};\r\n                }\r\n            }\r\n        }\r\n        pathIndex++;\r\n        this.searchAndSet(currentObj[step], path, pathIndex, parsedValue, arrayInternalIndex);\r\n    };\r\n    NSerializeJson.options = {\r\n        useNumKeysAsArrayIndex: true,\r\n        useDotSeparatorInPath: false,\r\n        forceNullOnEmpty: false\r\n    };\r\n    NSerializeJson.parsers = parserList.slice();\r\n    return NSerializeJson;\r\n}());\r\nexport { NSerializeJson };\r\n//# sourceMappingURL=NSerializeJson.js.map","'use strict';\n\nimport Utility from '../../js/modules/utility.js';\nimport {NSerializeJson as Serialize} from 'nserializejson';\n\n/**\n * The Newsletter module\n * @class\n */\nclass Newsletter {\n  /**\n   * [constructor description]\n   */\n  /**\n   * The class constructor\n   * @param  {Object} element The Newsletter DOM Object\n   * @return {Class}          The instanciated Newsletter object\n   */\n  constructor(element) {\n    this._el = element;\n\n    // Map toggled checkbox values to an input.\n    this._el.addEventListener('click', Utility.joinValues);\n\n    // This sets the script callback function to a global function that\n    // can be accessed by the the requested script.\n    window[Newsletter.callback] = (data) => {\n      this._callback(data);\n    };\n\n    this._el.querySelector('form').addEventListener('submit', (event) =>\n      (Utility.valid(event)) ?\n        this._submit(event).then(this._onload).catch(this._onerror) : false\n    );\n\n    return this;\n  }\n\n  /**\n   * The form submission method. Requests a script with a callback function\n   * to be executed on our page. The callback function will be passed the\n   * response as a JSON object (function parameter).\n   * @param  {Event}   event The form submission event\n   * @return {Promise}       A promise containing the new script call\n   */\n  _submit(event) {\n    event.preventDefault();\n\n    // Store the data.\n    this._data = Serialize.serializeForm(event.target);\n\n    // Switch the action to post-json. This creates an endpoint for mailchimp\n    // that acts as a script that can be loaded onto our page.\n    let action = event.target.action.replace(\n      `${Newsletter.endpoints.MAIN}?`, `${Newsletter.endpoints.MAIN_JSON}?`\n    );\n\n    let keys = Object.keys(this._data);\n    for (let i = 0; i < keys.length; i++)\n      action = action + `&${keys[i]}=${this._data[keys[i]]}`;\n\n    // Append the callback reference. Mailchimp will wrap the JSON response in\n    // our callback method. Once we load the script the callback will execute.\n    action = `${action}&c=window.${Newsletter.callback}`;\n\n    // Create a promise that appends the script response of the post-json method\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      document.body.appendChild(script);\n      script.onload = resolve;\n      script.onerror = reject;\n      script.async = true;\n      script.src = encodeURI(action);\n    });\n  }\n\n  /**\n   * The script onload resolution\n   * @param  {Event} event The script on load event\n   * @return {Class}       The Newsletter class\n   */\n  _onload(event) {\n    event.path[0].remove();\n    return this;\n  }\n\n  /**\n   * The script on error resolution\n   * @param  {Object} error The script on error load event\n   * @return {Class}        The Newsletter class\n   */\n  _onerror(error) {\n    // eslint-disable-next-line no-console\n    if (Utility.debug()) console.dir(error);\n    return this;\n  }\n\n  /**\n   * The callback function for the MailChimp Script call\n   * @param  {Object} data The success/error message from MailChimp\n   * @return {Class}       The Newsletter class\n   */\n  _callback(data) {\n    if (this[`_${data[this._key('MC_RESULT')]}`])\n      this[`_${data[this._key('MC_RESULT')]}`](data.msg);\n    else\n      // eslint-disable-next-line no-console\n      if (Utility.debug()) console.dir(data);\n    return this;\n  }\n\n  /**\n   * Submission error handler\n   * @param  {string} msg The error message\n   * @return {Class}      The Newsletter class\n   */\n  _error(msg) {\n    this._elementsReset();\n    this._messaging('WARNING', msg);\n    return this;\n  }\n\n  /**\n   * Submission success handler\n   * @param  {string} msg The success message\n   * @return {Class}      The Newsletter class\n   */\n  _success(msg) {\n    this._elementsReset();\n    this._messaging('SUCCESS', msg);\n    return this;\n  }\n\n  /**\n   * Present the response message to the user\n   * @param  {String} type The message type\n   * @param  {String} msg  The message\n   * @return {Class}       Newsletter\n   */\n  _messaging(type, msg = 'no message') {\n    let strings = Object.keys(Newsletter.strings);\n    let handled = false;\n    let alertBox = this._el.querySelector(\n      Newsletter.selectors[`${type}_BOX`]\n    );\n\n    let alertBoxMsg = alertBox.querySelector(\n      Newsletter.selectors.ALERT_BOX_TEXT\n    );\n\n    // Get the localized string, these should be written to the DOM already.\n    // The utility contains a global method for retrieving them.\n    for (let i = 0; i < strings.length; i++)\n      if (msg.indexOf(Newsletter.strings[strings[i]]) > -1) {\n        msg = Utility.localize(strings[i]);\n        handled = true;\n      }\n\n    // Replace string templates with values from either our form data or\n    // the Newsletter strings object.\n    for (let x = 0; x < Newsletter.templates.length; x++) {\n      let template = Newsletter.templates[x];\n      let key = template.replace('{{ ', '').replace(' }}', '');\n      let value = this._data[key] || Newsletter.strings[key];\n      let reg = new RegExp(template, 'gi');\n      msg = msg.replace(reg, (value) ? value : '');\n    }\n\n    if (handled)\n      alertBoxMsg.innerHTML = msg;\n    else if (type === 'ERROR')\n      alertBoxMsg.innerHTML = Utility.localize(\n        Newsletter.strings.ERR_PLEASE_TRY_LATER\n      );\n\n    if (alertBox) this._elementShow(alertBox, alertBoxMsg);\n\n    return this;\n  }\n\n  /**\n   * The main toggling method\n   * @return {Class}         Newsletter\n   */\n  _elementsReset() {\n    let targets = this._el.querySelectorAll(Newsletter.selectors.ALERT_BOXES);\n\n    for (let i = 0; i < targets.length; i++)\n      if (!targets[i].classList.contains(Newsletter.classes.HIDDEN)) {\n        targets[i].classList.add(Newsletter.classes.HIDDEN);\n\n        Newsletter.classes.ANIMATE.split(' ').forEach((item) =>\n          targets[i].classList.remove(item)\n        );\n\n        // Screen Readers\n        targets[i].setAttribute('aria-hidden', 'true');\n        targets[i].querySelector(Newsletter.selectors.ALERT_BOX_TEXT)\n          .setAttribute('aria-live', 'off');\n      }\n\n    return this;\n  }\n\n  /**\n   * The main toggling method\n   * @param  {object} target  Message container\n   * @param  {object} content Content that changes dynamically that should\n   *                          be announced to screen readers.\n   * @return {Class}          Newsletter\n   */\n  _elementShow(target, content) {\n    target.classList.toggle(Newsletter.classes.HIDDEN);\n    Newsletter.classes.ANIMATE.split(' ').forEach((item) =>\n      target.classList.toggle(item)\n    );\n    // Screen Readers\n    target.setAttribute('aria-hidden', 'true');\n    if (content) content.setAttribute('aria-live', 'polite');\n\n    return this;\n  }\n\n  /**\n   * A proxy function for retrieving the proper key\n   * @param  {string} key The reference for the stored keys.\n   * @return {string}     The desired key.\n   */\n  _key(key) {\n    return Newsletter.keys[key];\n  }\n}\n\n/** @type {Object} API data keys */\nNewsletter.keys = {\n  MC_RESULT: 'result',\n  MC_MSG: 'msg'\n};\n\n/** @type {Object} API endpoints */\nNewsletter.endpoints = {\n  MAIN: '/post',\n  MAIN_JSON: '/post-json'\n};\n\n/** @type {String} The Mailchimp callback reference. */\nNewsletter.callback = 'AccessNycNewsletterCallback';\n\n/** @type {Object} DOM selectors for the instance's concerns */\nNewsletter.selectors = {\n  ELEMENT: '[data-js=\"newsletter\"]',\n  ALERT_BOXES: '[data-js-newsletter*=\"alert-box-\"]',\n  WARNING_BOX: '[data-js-newsletter=\"alert-box-warning\"]',\n  SUCCESS_BOX: '[data-js-newsletter=\"alert-box-success\"]',\n  ALERT_BOX_TEXT: '[data-js-newsletter=\"alert-box__text\"]'\n};\n\n/** @type {String} The main DOM selector for the instance */\nNewsletter.selector = Newsletter.selectors.ELEMENT;\n\n/** @type {Object} String references for the instance */\nNewsletter.strings = {\n  ERR_PLEASE_TRY_LATER: 'ERR_PLEASE_TRY_LATER',\n  SUCCESS_CONFIRM_EMAIL: 'Almost finished...',\n  ERR_PLEASE_ENTER_VALUE: 'Please enter a value',\n  ERR_TOO_MANY_RECENT: 'too many recent signup requests',\n  ERR_ALREADY_SUBSCRIBED: 'is already subscribed',\n  ERR_INVALID_EMAIL: 'looks fake or invalid',\n  LIST_NAME: 'ACCESS NYC - Newsletter'\n};\n\n/** @type {Array} Placeholders that will be replaced in message strings */\nNewsletter.templates = [\n  '{{ EMAIL }}',\n  '{{ LIST_NAME }}'\n];\n\nNewsletter.classes = {\n  ANIMATE: 'animated fadeInUp',\n  HIDDEN: 'hidden'\n};\n\nexport default Newsletter;\n","!function(){function t(t,n){var e=t.split(\".\"),r=H;e[0]in r||!r.execScript||r.execScript(\"var \"+e[0]);for(var i;e.length&&(i=e.shift());)e.length||void 0===n?r=r[i]?r[i]:r[i]={}:r[i]=n}function n(t,n){function e(){}e.prototype=n.prototype,t.M=n.prototype,t.prototype=new e,t.prototype.constructor=t,t.N=function(t,e,r){for(var i=Array(arguments.length-2),a=2;a<arguments.length;a++)i[a-2]=arguments[a];return n.prototype[e].apply(t,i)}}function e(t,n){null!=t&&this.a.apply(this,arguments)}function r(t){t.b=\"\"}function i(t,n){t.sort(n||a)}function a(t,n){return t>n?1:n>t?-1:0}function l(t){var n,e=[],r=0;for(n in t)e[r++]=t[n];return e}function o(t,n){this.b=t,this.a={};for(var e=0;e<n.length;e++){var r=n[e];this.a[r.b]=r}}function u(t){return t=l(t.a),i(t,function(t,n){return t.b-n.b}),t}function s(t,n){switch(this.b=t,this.g=!!n.G,this.a=n.c,this.j=n.type,this.h=!1,this.a){case q:case J:case L:case O:case k:case Y:case K:this.h=!0}this.f=n.defaultValue}function f(){this.a={},this.f=this.i().a,this.b=this.g=null}function p(t,n){for(var e=u(t.i()),r=0;r<e.length;r++){var i=e[r],a=i.b;if(null!=n.a[a]){t.b&&delete t.b[i.b];var l=11==i.a||10==i.a;if(i.g)for(var i=c(n,a)||[],o=0;o<i.length;o++){var s=t,f=a,h=l?i[o].clone():i[o];s.a[f]||(s.a[f]=[]),s.a[f].push(h),s.b&&delete s.b[f]}else i=c(n,a),l?(l=c(t,a))?p(l,i):m(t,a,i.clone()):m(t,a,i)}}}function c(t,n){var e=t.a[n];if(null==e)return null;if(t.g){if(!(n in t.b)){var r=t.g,i=t.f[n];if(null!=e)if(i.g){for(var a=[],l=0;l<e.length;l++)a[l]=r.b(i,e[l]);e=a}else e=r.b(i,e);return t.b[n]=e}return t.b[n]}return e}function h(t,n,e){var r=c(t,n);return t.f[n].g?r[e||0]:r}function g(t,n){var e;if(null!=t.a[n])e=h(t,n,void 0);else t:{if(e=t.f[n],void 0===e.f){var r=e.j;if(r===Boolean)e.f=!1;else if(r===Number)e.f=0;else{if(r!==String){e=new r;break t}e.f=e.h?\"0\":\"\"}}e=e.f}return e}function b(t,n){return t.f[n].g?null!=t.a[n]?t.a[n].length:0:null!=t.a[n]?1:0}function m(t,n,e){t.a[n]=e,t.b&&(t.b[n]=e)}function y(t,n){var e,r=[];for(e in n)0!=e&&r.push(new s(e,n[e]));return new o(t,r)}/*\n\n Protocol Buffer 2 Copyright 2008 Google Inc.\n All other code copyright its respective owners.\n Copyright (C) 2010 The Libphonenumber Authors\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\nfunction v(){f.call(this)}function d(){f.call(this)}function _(){f.call(this)}function S(){}function w(){}function A(){}/*\n\n Copyright (C) 2010 The Libphonenumber Authors.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\nfunction x(){this.a={}}function N(t,n){if(null==n)return null;n=n.toUpperCase();var e=t.a[n];if(null==e){if(e=tt[n],null==e)return null;e=(new A).a(_.i(),e),t.a[n]=e}return e}function j(t){return t=W[t],null==t?\"ZZ\":t[0]}function $(t){this.H=RegExp(\" \"),this.B=\"\",this.m=new e,this.v=\"\",this.h=new e,this.u=new e,this.j=!0,this.w=this.o=this.D=!1,this.F=x.b(),this.s=0,this.b=new e,this.A=!1,this.l=\"\",this.a=new e,this.f=[],this.C=t,this.J=this.g=C(this,this.C)}function C(t,n){var e;if(null!=n&&isNaN(n)&&n.toUpperCase()in tt){if(e=N(t.F,n),null==e)throw\"Invalid region code: \"+n;e=g(e,10)}else e=0;return e=N(t.F,j(e)),null!=e?e:at}function B(t){for(var n=t.f.length,e=0;n>e;++e){var i=t.f[e],a=g(i,1);if(t.v==a)return!1;var l;l=t;var o=i,u=g(o,1);if(-1!=u.indexOf(\"|\"))l=!1;else{u=u.replace(lt,\"\\\\d\"),u=u.replace(ot,\"\\\\d\"),r(l.m);var s;s=l;var o=g(o,2),f=\"999999999999999\".match(u)[0];f.length<s.a.b.length?s=\"\":(s=f.replace(new RegExp(u,\"g\"),o),s=s.replace(RegExp(\"9\",\"g\"),\" \")),0<s.length?(l.m.a(s),l=!0):l=!1}if(l)return t.v=a,t.A=st.test(h(i,4)),t.s=0,!0}return t.j=!1}function E(t,n){for(var e=[],r=n.length-3,i=t.f.length,a=0;i>a;++a){var l=t.f[a];0==b(l,3)?e.push(t.f[a]):(l=h(l,3,Math.min(r,b(l,3)-1)),0==n.search(l)&&e.push(t.f[a]))}t.f=e}function R(t,n){t.h.a(n);var e=n;if(rt.test(e)||1==t.h.b.length&&et.test(e)){var i,e=n;\"+\"==e?(i=e,t.u.a(e)):(i=nt[e],t.u.a(i),t.a.a(i)),n=i}else t.j=!1,t.D=!0;if(!t.j){if(!t.D)if(V(t)){if(P(t))return D(t)}else if(0<t.l.length&&(e=t.a.toString(),r(t.a),t.a.a(t.l),t.a.a(e),e=t.b.toString(),i=e.lastIndexOf(t.l),r(t.b),t.b.a(e.substring(0,i))),t.l!=U(t))return t.b.a(\" \"),D(t);return t.h.toString()}switch(t.u.b.length){case 0:case 1:case 2:return t.h.toString();case 3:if(!V(t))return t.l=U(t),F(t);t.w=!0;default:return t.w?(P(t)&&(t.w=!1),t.b.toString()+t.a.toString()):0<t.f.length?(e=T(t,n),i=I(t),0<i.length?i:(E(t,t.a.toString()),B(t)?G(t):t.j?M(t,e):t.h.toString())):F(t)}}function D(t){return t.j=!0,t.w=!1,t.f=[],t.s=0,r(t.m),t.v=\"\",F(t)}function I(t){for(var n=t.a.toString(),e=t.f.length,r=0;e>r;++r){var i=t.f[r],a=g(i,1);if(new RegExp(\"^(?:\"+a+\")$\").test(n))return t.A=st.test(h(i,4)),n=n.replace(new RegExp(a,\"g\"),h(i,2)),M(t,n)}return\"\"}function M(t,n){var e=t.b.b.length;return t.A&&e>0&&\" \"!=t.b.toString().charAt(e-1)?t.b+\" \"+n:t.b+n}function F(t){var n=t.a.toString();if(3<=n.length){for(var e=t.o&&0<b(t.g,20)?c(t.g,20)||[]:c(t.g,19)||[],r=e.length,i=0;r>i;++i){var a,l=e[i];(a=null==t.g.a[12]||t.o||h(l,6))||(a=g(l,4),a=0==a.length||it.test(a)),a&&ut.test(g(l,2))&&t.f.push(l)}return E(t,n),n=I(t),0<n.length?n:B(t)?G(t):t.h.toString()}return M(t,n)}function G(t){var n=t.a.toString(),e=n.length;if(e>0){for(var r=\"\",i=0;e>i;i++)r=T(t,n.charAt(i));return t.j?M(t,r):t.h.toString()}return t.b.toString()}function U(t){var n,e=t.a.toString(),i=0;return 1!=h(t.g,10)?n=!1:(n=t.a.toString(),n=\"1\"==n.charAt(0)&&\"0\"!=n.charAt(1)&&\"1\"!=n.charAt(1)),n?(i=1,t.b.a(\"1\").a(\" \"),t.o=!0):null!=t.g.a[15]&&(n=new RegExp(\"^(?:\"+h(t.g,15)+\")\"),n=e.match(n),null!=n&&null!=n[0]&&0<n[0].length&&(t.o=!0,i=n[0].length,t.b.a(e.substring(0,i)))),r(t.a),t.a.a(e.substring(i)),e.substring(0,i)}function V(t){var n=t.u.toString(),e=new RegExp(\"^(?:\\\\+|\"+h(t.g,11)+\")\"),e=n.match(e);return null!=e&&null!=e[0]&&0<e[0].length?(t.o=!0,e=e[0].length,r(t.a),t.a.a(n.substring(e)),r(t.b),t.b.a(n.substring(0,e)),\"+\"!=n.charAt(0)&&t.b.a(\" \"),!0):!1}function P(t){if(0==t.a.b.length)return!1;var n,i=new e;t:{if(n=t.a.toString(),0!=n.length&&\"0\"!=n.charAt(0))for(var a,l=n.length,o=1;3>=o&&l>=o;++o)if(a=parseInt(n.substring(0,o),10),a in W){i.a(n.substring(o)),n=a;break t}n=0}return 0==n?!1:(r(t.a),t.a.a(i.toString()),i=j(n),\"001\"==i?t.g=N(t.F,\"\"+n):i!=t.C&&(t.g=C(t,i)),t.b.a(\"\"+n).a(\" \"),t.l=\"\",!0)}function T(t,n){var e=t.m.toString();if(0<=e.substring(t.s).search(t.H)){var i=e.search(t.H),e=e.replace(t.H,n);return r(t.m),t.m.a(e),t.s=i,e.substring(0,t.s+1)}return 1==t.f.length&&(t.j=!1),t.v=\"\",t.h.toString()}var H=this;e.prototype.b=\"\",e.prototype.set=function(t){this.b=\"\"+t},e.prototype.a=function(t,n,e){if(this.b+=String(t),null!=n)for(var r=1;r<arguments.length;r++)this.b+=arguments[r];return this},e.prototype.toString=function(){return this.b};var K=1,Y=2,q=3,J=4,L=6,O=16,k=18;f.prototype.set=function(t,n){m(this,t.b,n)},f.prototype.clone=function(){var t=new this.constructor;return t!=this&&(t.a={},t.b&&(t.b={}),p(t,this)),t};var Z;n(v,f);var z;n(d,f);var X;n(_,f),v.prototype.i=function(){return Z||(Z=y(v,{0:{name:\"NumberFormat\",I:\"i18n.phonenumbers.NumberFormat\"},1:{name:\"pattern\",required:!0,c:9,type:String},2:{name:\"format\",required:!0,c:9,type:String},3:{name:\"leading_digits_pattern\",G:!0,c:9,type:String},4:{name:\"national_prefix_formatting_rule\",c:9,type:String},6:{name:\"national_prefix_optional_when_formatting\",c:8,type:Boolean},5:{name:\"domestic_carrier_code_formatting_rule\",c:9,type:String}})),Z},v.ctor=v,v.ctor.i=v.prototype.i,d.prototype.i=function(){return z||(z=y(d,{0:{name:\"PhoneNumberDesc\",I:\"i18n.phonenumbers.PhoneNumberDesc\"},2:{name:\"national_number_pattern\",c:9,type:String},3:{name:\"possible_number_pattern\",c:9,type:String},6:{name:\"example_number\",c:9,type:String},7:{name:\"national_number_matcher_data\",c:12,type:String},8:{name:\"possible_number_matcher_data\",c:12,type:String}})),z},d.ctor=d,d.ctor.i=d.prototype.i,_.prototype.i=function(){return X||(X=y(_,{0:{name:\"PhoneMetadata\",I:\"i18n.phonenumbers.PhoneMetadata\"},1:{name:\"general_desc\",c:11,type:d},2:{name:\"fixed_line\",c:11,type:d},3:{name:\"mobile\",c:11,type:d},4:{name:\"toll_free\",c:11,type:d},5:{name:\"premium_rate\",c:11,type:d},6:{name:\"shared_cost\",c:11,type:d},7:{name:\"personal_number\",c:11,type:d},8:{name:\"voip\",c:11,type:d},21:{name:\"pager\",c:11,type:d},25:{name:\"uan\",c:11,type:d},27:{name:\"emergency\",c:11,type:d},28:{name:\"voicemail\",c:11,type:d},24:{name:\"no_international_dialling\",c:11,type:d},9:{name:\"id\",required:!0,c:9,type:String},10:{name:\"country_code\",c:5,type:Number},11:{name:\"international_prefix\",c:9,type:String},17:{name:\"preferred_international_prefix\",c:9,type:String},12:{name:\"national_prefix\",c:9,type:String},13:{name:\"preferred_extn_prefix\",c:9,type:String},15:{name:\"national_prefix_for_parsing\",c:9,type:String},16:{name:\"national_prefix_transform_rule\",c:9,type:String},18:{name:\"same_mobile_and_fixed_line_pattern\",c:8,defaultValue:!1,type:Boolean},19:{name:\"number_format\",G:!0,c:11,type:v},20:{name:\"intl_number_format\",G:!0,c:11,type:v},22:{name:\"main_country_for_code\",c:8,defaultValue:!1,type:Boolean},23:{name:\"leading_digits\",c:9,type:String},26:{name:\"leading_zero_possible\",c:8,defaultValue:!1,type:Boolean}})),X},_.ctor=_,_.ctor.i=_.prototype.i,S.prototype.a=function(t){throw new t.b,Error(\"Unimplemented\")},S.prototype.b=function(t,n){if(11==t.a||10==t.a)return n instanceof f?n:this.a(t.j.prototype.i(),n);if(14==t.a){if(\"string\"==typeof n&&Q.test(n)){var e=Number(n);if(e>0)return e}return n}if(!t.h)return n;if(e=t.j,e===String){if(\"number\"==typeof n)return String(n)}else if(e===Number&&\"string\"==typeof n&&(\"Infinity\"===n||\"-Infinity\"===n||\"NaN\"===n||Q.test(n)))return Number(n);return n};var Q=/^-?[0-9]+$/;n(w,S),w.prototype.a=function(t,n){var e=new t.b;return e.g=this,e.a=n,e.b={},e},n(A,w),A.prototype.b=function(t,n){return 8==t.a?!!n:S.prototype.b.apply(this,arguments)},A.prototype.a=function(t,n){return A.M.a.call(this,t,n)};/*\n\n Copyright (C) 2010 The Libphonenumber Authors\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\nvar W={1:\"US AG AI AS BB BM BS CA DM DO GD GU JM KN KY LC MP MS PR SX TC TT VC VG VI\".split(\" \")},tt={US:[null,[null,null,\"[2-9]\\\\d{9}\",\"\\\\d{7}(?:\\\\d{3})?\"],[null,null,\"(?:2(?:0[1-35-9]|1[02-9]|2[04589]|3[149]|4[08]|5[1-46]|6[0279]|7[026]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[014679]|4[67]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|69|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-37]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[16]|5[017]|6[0-279]|78|8[12])|7(?:0[1-46-8]|1[02-9]|2[0457]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|28|3[0-25]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[01678]|4[0179]|5[12469]|7[0-3589]|8[0459]))[2-9]\\\\d{6}\",\"\\\\d{7}(?:\\\\d{3})?\",null,null,\"2015555555\"],[null,null,\"(?:2(?:0[1-35-9]|1[02-9]|2[04589]|3[149]|4[08]|5[1-46]|6[0279]|7[026]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[014679]|4[67]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|69|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-37]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[16]|5[017]|6[0-279]|78|8[12])|7(?:0[1-46-8]|1[02-9]|2[0457]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|28|3[0-25]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[01678]|4[0179]|5[12469]|7[0-3589]|8[0459]))[2-9]\\\\d{6}\",\"\\\\d{7}(?:\\\\d{3})?\",null,null,\"2015555555\"],[null,null,\"8(?:00|44|55|66|77|88)[2-9]\\\\d{6}\",\"\\\\d{10}\",null,null,\"8002345678\"],[null,null,\"900[2-9]\\\\d{6}\",\"\\\\d{10}\",null,null,\"9002345678\"],[null,null,\"NA\",\"NA\"],[null,null,\"5(?:00|33|44|66|77|88)[2-9]\\\\d{6}\",\"\\\\d{10}\",null,null,\"5002345678\"],[null,null,\"NA\",\"NA\"],\"US\",1,\"011\",\"1\",null,null,\"1\",null,null,1,[[null,\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",null,null,null,1],[null,\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",null,null,null,1]],[[null,\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\"]],[null,null,\"NA\",\"NA\"],1,null,[null,null,\"NA\",\"NA\"],[null,null,\"NA\",\"NA\"],null,null,[null,null,\"NA\",\"NA\"]]};x.b=function(){return x.a?x.a:x.a=new x};var nt={0:\"0\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\",\"０\":\"0\",\"１\":\"1\",\"２\":\"2\",\"３\":\"3\",\"４\":\"4\",\"５\":\"5\",\"６\":\"6\",\"７\":\"7\",\"８\":\"8\",\"９\":\"9\",\"٠\":\"0\",\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"۰\":\"0\",\"۱\":\"1\",\"۲\":\"2\",\"۳\":\"3\",\"۴\":\"4\",\"۵\":\"5\",\"۶\":\"6\",\"۷\":\"7\",\"۸\":\"8\",\"۹\":\"9\"},et=RegExp(\"[+＋]+\"),rt=RegExp(\"([0-9０-９٠-٩۰-۹])\"),it=/^\\(?\\$1\\)?$/,at=new _;m(at,11,\"NA\");var lt=/\\[([^\\[\\]])*\\]/g,ot=/\\d(?=[^,}][^,}])/g,ut=RegExp(\"^[-x‐-―−ー－-／  ­​⁠　()（）［］.\\\\[\\\\]/~⁓∼～]*(\\\\$\\\\d[-x‐-―−ー－-／  ­​⁠　()（）［］.\\\\[\\\\]/~⁓∼～]*)+$\"),st=/[- ]/;$.prototype.K=function(){this.B=\"\",r(this.h),r(this.u),r(this.m),this.s=0,this.v=\"\",r(this.b),this.l=\"\",r(this.a),this.j=!0,this.w=this.o=this.D=!1,this.f=[],this.A=!1,this.g!=this.J&&(this.g=C(this,this.C))},$.prototype.L=function(t){return this.B=R(this,t)},t(\"Cleave.AsYouTypeFormatter\",$),t(\"Cleave.AsYouTypeFormatter.prototype.inputDigit\",$.prototype.L),t(\"Cleave.AsYouTypeFormatter.prototype.clear\",$.prototype.K)}.call(\"object\"==typeof global&&global?global:window);","/*!\n * cleave.js - 0.7.23\n * https://github.com/nosir/cleave.js\n * Apache License Version 2.0\n *\n * Copyright (C) 2012-2017 Max Huang https://github.com/nosir/\n */\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Cleave=t():e.Cleave=t()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p=\"\",t(0)}([function(e,t,r){(function(t){\"use strict\";var n=function(e,t){var r=this;if(\"string\"==typeof e?r.element=document.querySelector(e):r.element=\"undefined\"!=typeof e.length&&e.length>0?e[0]:e,!r.element)throw new Error(\"[cleave.js] Please check the element\");t.initValue=r.element.value,r.properties=n.DefaultProperties.assign({},t),r.init()};n.prototype={init:function(){var e=this,t=e.properties;(t.numeral||t.phone||t.creditCard||t.date||0!==t.blocksLength||t.prefix)&&(t.maxLength=n.Util.getMaxLength(t.blocks),e.isAndroid=n.Util.isAndroid(),e.lastInputValue=\"\",e.onChangeListener=e.onChange.bind(e),e.onKeyDownListener=e.onKeyDown.bind(e),e.onCutListener=e.onCut.bind(e),e.onCopyListener=e.onCopy.bind(e),e.element.addEventListener(\"input\",e.onChangeListener),e.element.addEventListener(\"keydown\",e.onKeyDownListener),e.element.addEventListener(\"cut\",e.onCutListener),e.element.addEventListener(\"copy\",e.onCopyListener),e.initPhoneFormatter(),e.initDateFormatter(),e.initNumeralFormatter(),e.onInput(t.initValue))},initNumeralFormatter:function(){var e=this,t=e.properties;t.numeral&&(t.numeralFormatter=new n.NumeralFormatter(t.numeralDecimalMark,t.numeralIntegerScale,t.numeralDecimalScale,t.numeralThousandsGroupStyle,t.numeralPositiveOnly,t.delimiter))},initDateFormatter:function(){var e=this,t=e.properties;t.date&&(t.dateFormatter=new n.DateFormatter(t.datePattern),t.blocks=t.dateFormatter.getBlocks(),t.blocksLength=t.blocks.length,t.maxLength=n.Util.getMaxLength(t.blocks))},initPhoneFormatter:function(){var e=this,t=e.properties;if(t.phone)try{t.phoneFormatter=new n.PhoneFormatter(new t.root.Cleave.AsYouTypeFormatter(t.phoneRegionCode),t.delimiter)}catch(r){throw new Error(\"[cleave.js] Please include phone-type-formatter.{country}.js lib\")}},onKeyDown:function(e){var t=this,r=t.properties,i=e.which||e.keyCode,a=n.Util,o=t.element.value;return a.isAndroidBackspaceKeydown(t.lastInputValue,o)&&(i=8),t.lastInputValue=o,8===i&&a.isDelimiter(o.slice(-r.delimiterLength),r.delimiter,r.delimiters)?void(r.backspace=!0):void(r.backspace=!1)},onChange:function(){this.onInput(this.element.value)},onCut:function(e){this.copyClipboardData(e),this.onInput(\"\")},onCopy:function(e){this.copyClipboardData(e)},copyClipboardData:function(e){var t=this,r=t.properties,i=n.Util,a=t.element.value,o=\"\";o=r.copyDelimiter?a:i.stripDelimiters(a,r.delimiter,r.delimiters);try{e.clipboardData?e.clipboardData.setData(\"Text\",o):window.clipboardData.setData(\"Text\",o),e.preventDefault()}catch(l){}},onInput:function(e){var t=this,r=t.properties,i=e,a=n.Util;return r.numeral||!r.backspace||a.isDelimiter(e.slice(-r.delimiterLength),r.delimiter,r.delimiters)||(e=a.headStr(e,e.length-r.delimiterLength)),r.phone?(r.result=r.phoneFormatter.format(e),void t.updateValueState()):r.numeral?(r.result=r.prefix+r.numeralFormatter.format(e),void t.updateValueState()):(r.date&&(e=r.dateFormatter.getValidatedDate(e)),e=a.stripDelimiters(e,r.delimiter,r.delimiters),e=a.getPrefixStrippedValue(e,r.prefix,r.prefixLength),e=r.numericOnly?a.strip(e,/[^\\d]/g):e,e=r.uppercase?e.toUpperCase():e,e=r.lowercase?e.toLowerCase():e,r.prefix&&(e=r.prefix+e,0===r.blocksLength)?(r.result=e,void t.updateValueState()):(r.creditCard&&t.updateCreditCardPropsByValue(e),e=a.headStr(e,r.maxLength),r.result=a.getFormattedValue(e,r.blocks,r.blocksLength,r.delimiter,r.delimiters),void(i===r.result&&i!==r.prefix||t.updateValueState())))},updateCreditCardPropsByValue:function(e){var t,r=this,i=r.properties,a=n.Util;a.headStr(i.result,4)!==a.headStr(e,4)&&(t=n.CreditCardDetector.getInfo(e,i.creditCardStrictMode),i.blocks=t.blocks,i.blocksLength=i.blocks.length,i.maxLength=a.getMaxLength(i.blocks),i.creditCardType!==t.type&&(i.creditCardType=t.type,i.onCreditCardTypeChanged.call(r,i.creditCardType)))},updateValueState:function(){var e=this;return e.isAndroid?void window.setTimeout(function(){e.element.value=e.properties.result},1):void(e.element.value=e.properties.result)},setPhoneRegionCode:function(e){var t=this,r=t.properties;r.phoneRegionCode=e,t.initPhoneFormatter(),t.onChange()},setRawValue:function(e){var t=this,r=t.properties;e=void 0!==e&&null!==e?e.toString():\"\",r.numeral&&(e=e.replace(\".\",r.numeralDecimalMark)),t.element.value=e,t.onInput(e)},getRawValue:function(){var e=this,t=e.properties,r=n.Util,i=e.element.value;return t.rawValueTrimPrefix&&(i=r.getPrefixStrippedValue(i,t.prefix,t.prefixLength)),i=t.numeral?t.numeralFormatter.getRawValue(i):r.stripDelimiters(i,t.delimiter,t.delimiters)},getFormattedValue:function(){return this.element.value},destroy:function(){var e=this;e.element.removeEventListener(\"input\",e.onChangeListener),e.element.removeEventListener(\"keydown\",e.onKeyDownListener),e.element.removeEventListener(\"cut\",e.onCutListener),e.element.removeEventListener(\"copy\",e.onCopyListener)},toString:function(){return\"[Cleave Object]\"}},n.NumeralFormatter=r(1),n.DateFormatter=r(2),n.PhoneFormatter=r(3),n.CreditCardDetector=r(4),n.Util=r(5),n.DefaultProperties=r(6),(\"object\"==typeof t&&t?t:window).Cleave=n,e.exports=n}).call(t,function(){return this}())},function(e,t){\"use strict\";var r=function(e,t,n,i,a,o){var l=this;l.numeralDecimalMark=e||\".\",l.numeralIntegerScale=t>=0?t:10,l.numeralDecimalScale=n>=0?n:2,l.numeralThousandsGroupStyle=i||r.groupStyle.thousand,l.numeralPositiveOnly=!!a,l.delimiter=o||\"\"===o?o:\",\",l.delimiterRE=o?new RegExp(\"\\\\\"+o,\"g\"):\"\"};r.groupStyle={thousand:\"thousand\",lakh:\"lakh\",wan:\"wan\"},r.prototype={getRawValue:function(e){return e.replace(this.delimiterRE,\"\").replace(this.numeralDecimalMark,\".\")},format:function(e){var t,n,i=this,a=\"\";switch(e=e.replace(/[A-Za-z]/g,\"\").replace(i.numeralDecimalMark,\"M\").replace(/[^\\dM-]/g,\"\").replace(/^\\-/,\"N\").replace(/\\-/g,\"\").replace(\"N\",i.numeralPositiveOnly?\"\":\"-\").replace(\"M\",i.numeralDecimalMark).replace(/^(-)?0+(?=\\d)/,\"$1\"),n=e,e.indexOf(i.numeralDecimalMark)>=0&&(t=e.split(i.numeralDecimalMark),n=t[0],a=i.numeralDecimalMark+t[1].slice(0,i.numeralDecimalScale)),i.numeralIntegerScale>0&&(n=n.slice(0,i.numeralIntegerScale+(\"-\"===e.slice(0,1)?1:0))),i.numeralThousandsGroupStyle){case r.groupStyle.lakh:n=n.replace(/(\\d)(?=(\\d\\d)+\\d$)/g,\"$1\"+i.delimiter);break;case r.groupStyle.wan:n=n.replace(/(\\d)(?=(\\d{4})+$)/g,\"$1\"+i.delimiter);break;default:n=n.replace(/(\\d)(?=(\\d{3})+$)/g,\"$1\"+i.delimiter)}return n.toString()+(i.numeralDecimalScale>0?a.toString():\"\")}},e.exports=r},function(e,t){\"use strict\";var r=function(e){var t=this;t.blocks=[],t.datePattern=e,t.initBlocks()};r.prototype={initBlocks:function(){var e=this;e.datePattern.forEach(function(t){\"Y\"===t?e.blocks.push(4):e.blocks.push(2)})},getBlocks:function(){return this.blocks},getValidatedDate:function(e){var t=this,r=\"\";return e=e.replace(/[^\\d]/g,\"\"),t.blocks.forEach(function(n,i){if(e.length>0){var a=e.slice(0,n),o=a.slice(0,1),l=e.slice(n);switch(t.datePattern[i]){case\"d\":\"00\"===a?a=\"01\":parseInt(o,10)>3?a=\"0\"+o:parseInt(a,10)>31&&(a=\"31\");break;case\"m\":\"00\"===a?a=\"01\":parseInt(o,10)>1?a=\"0\"+o:parseInt(a,10)>12&&(a=\"12\")}r+=a,e=l}}),r}},e.exports=r},function(e,t){\"use strict\";var r=function(e,t){var r=this;r.delimiter=t||\"\"===t?t:\" \",r.delimiterRE=t?new RegExp(\"\\\\\"+t,\"g\"):\"\",r.formatter=e};r.prototype={setFormatter:function(e){this.formatter=e},format:function(e){var t=this;t.formatter.clear(),e=e.replace(/[^\\d+]/g,\"\"),e=e.replace(t.delimiterRE,\"\");for(var r,n=\"\",i=!1,a=0,o=e.length;o>a;a++)r=t.formatter.inputDigit(e.charAt(a)),/[\\s()-]/g.test(r)?(n=r,i=!0):i||(n=r);return n=n.replace(/[()]/g,\"\"),n=n.replace(/[\\s-]/g,t.delimiter)}},e.exports=r},function(e,t){\"use strict\";var r={blocks:{uatp:[4,5,6],amex:[4,6,5],diners:[4,6,4],discover:[4,4,4,4],mastercard:[4,4,4,4],dankort:[4,4,4,4],instapayment:[4,4,4,4],jcb:[4,4,4,4],maestro:[4,4,4,4],visa:[4,4,4,4],general:[4,4,4,4],generalStrict:[4,4,4,7]},re:{uatp:/^(?!1800)1\\d{0,14}/,amex:/^3[47]\\d{0,13}/,discover:/^(?:6011|65\\d{0,2}|64[4-9]\\d?)\\d{0,12}/,diners:/^3(?:0([0-5]|9)|[689]\\d?)\\d{0,11}/,mastercard:/^(5[1-5]|2[2-7])\\d{0,14}/,dankort:/^(5019|4175|4571)\\d{0,12}/,instapayment:/^63[7-9]\\d{0,13}/,jcb:/^(?:2131|1800|35\\d{0,2})\\d{0,12}/,maestro:/^(?:5[0678]\\d{0,2}|6304|67\\d{0,2})\\d{0,12}/,visa:/^4\\d{0,15}/},getInfo:function(e,t){var n=r.blocks,i=r.re;return t=!!t,i.amex.test(e)?{type:\"amex\",blocks:n.amex}:i.uatp.test(e)?{type:\"uatp\",blocks:n.uatp}:i.diners.test(e)?{type:\"diners\",blocks:n.diners}:i.discover.test(e)?{type:\"discover\",blocks:t?n.generalStrict:n.discover}:i.mastercard.test(e)?{type:\"mastercard\",blocks:n.mastercard}:i.dankort.test(e)?{type:\"dankort\",blocks:n.dankort}:i.instapayment.test(e)?{type:\"instapayment\",blocks:n.instapayment}:i.jcb.test(e)?{type:\"jcb\",blocks:n.jcb}:i.maestro.test(e)?{type:\"maestro\",blocks:t?n.generalStrict:n.maestro}:i.visa.test(e)?{type:\"visa\",blocks:t?n.generalStrict:n.visa}:{type:\"unknown\",blocks:t?n.generalStrict:n.general}}};e.exports=r},function(e,t){\"use strict\";var r={noop:function(){},strip:function(e,t){return e.replace(t,\"\")},isDelimiter:function(e,t,r){return 0===r.length?e===t:r.some(function(t){return e===t?!0:void 0})},getDelimiterREByDelimiter:function(e){return new RegExp(e.replace(/([.?*+^$[\\]\\\\(){}|-])/g,\"\\\\$1\"),\"g\")},stripDelimiters:function(e,t,r){var n=this;if(0===r.length){var i=t?n.getDelimiterREByDelimiter(t):\"\";return e.replace(i,\"\")}return r.forEach(function(t){e=e.replace(n.getDelimiterREByDelimiter(t),\"\")}),e},headStr:function(e,t){return e.slice(0,t)},getMaxLength:function(e){return e.reduce(function(e,t){return e+t},0)},getPrefixStrippedValue:function(e,t,r){if(e.slice(0,r)!==t){var n=this.getFirstDiffIndex(t,e.slice(0,r));e=t+e.slice(n,n+1)+e.slice(r+1)}return e.slice(r)},getFirstDiffIndex:function(e,t){for(var r=0;e.charAt(r)===t.charAt(r);)if(\"\"===e.charAt(r++))return-1;return r},getFormattedValue:function(e,t,r,n,i){var a,o=\"\",l=i.length>0;return 0===r?e:(t.forEach(function(t,s){if(e.length>0){var c=e.slice(0,t),u=e.slice(t);o+=c,a=l?i[s]||a:n,c.length===t&&r-1>s&&(o+=a),e=u}}),o)},isAndroid:function(){return!(!navigator||!/android/i.test(navigator.userAgent))},isAndroidBackspaceKeydown:function(e,t){return this.isAndroid()?t===e.slice(0,-1):!1}};e.exports=r},function(e,t){(function(t){\"use strict\";var r={assign:function(e,r){return e=e||{},r=r||{},e.creditCard=!!r.creditCard,e.creditCardStrictMode=!!r.creditCardStrictMode,e.creditCardType=\"\",e.onCreditCardTypeChanged=r.onCreditCardTypeChanged||function(){},e.phone=!!r.phone,e.phoneRegionCode=r.phoneRegionCode||\"AU\",e.phoneFormatter={},e.date=!!r.date,e.datePattern=r.datePattern||[\"d\",\"m\",\"Y\"],e.dateFormatter={},e.numeral=!!r.numeral,e.numeralIntegerScale=r.numeralIntegerScale>=0?r.numeralIntegerScale:10,e.numeralDecimalScale=r.numeralDecimalScale>=0?r.numeralDecimalScale:2,e.numeralDecimalMark=r.numeralDecimalMark||\".\",e.numeralThousandsGroupStyle=r.numeralThousandsGroupStyle||\"thousand\",e.numeralPositiveOnly=!!r.numeralPositiveOnly,e.numericOnly=e.creditCard||e.date||!!r.numericOnly,e.uppercase=!!r.uppercase,e.lowercase=!!r.lowercase,e.prefix=e.creditCard||e.phone||e.date?\"\":r.prefix||\"\",e.prefixLength=e.prefix.length,e.rawValueTrimPrefix=!!r.rawValueTrimPrefix,e.copyDelimiter=!!r.copyDelimiter,e.initValue=void 0===r.initValue?\"\":r.initValue.toString(),e.delimiter=r.delimiter||\"\"===r.delimiter?r.delimiter:r.date?\"/\":r.numeral?\",\":(r.phone,\" \"),e.delimiterLength=e.delimiter.length,e.delimiters=r.delimiters||[],e.blocks=r.blocks||[],e.blocksLength=e.blocks.length,e.root=\"object\"==typeof t&&t?t:window,e.maxLength=0,e.backspace=!1,e.result=\"\",e}};e.exports=r}).call(t,function(){return this}())}])});","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.5+7f2b526d\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$2) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$2 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$2.prototype.then = then;\nPromise$2.all = all;\nPromise$2.race = race;\nPromise$2.resolve = resolve$1;\nPromise$2.reject = reject$1;\nPromise$2._setScheduler = setScheduler;\nPromise$2._setAsap = setAsap;\nPromise$2._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$2;\n}\n\n// Strange compat..\nPromise$2.polyfill = polyfill;\nPromise$2.Promise = Promise$2;\n\nPromise$2.polyfill();\n\nreturn Promise$2;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.auto.map\n","/*!\n * jQuery JavaScript Library v3.3.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2018-01-20T17:24Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, doc, node ) {\n\t\tdoc = doc || document;\n\n\t\tvar i,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\t\tif ( node[ i ] ) {\n\t\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.3.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc, node );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = div.offsetWidth === 36 || \"absolute\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\t\t) );\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\t\tval = curCSS( elem, dimension, styles ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox;\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = valueIsBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ dimension ] );\n\n\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\tif ( val === \"auto\" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) {\n\n\t\tval = elem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];\n\n\t\t// offsetWidth/offsetHeight provide border-box values\n\t\tvalueIsBorderBox = true;\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\t\t\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra && boxModelAdjustment(\n\t\t\t\t\telem,\n\t\t\t\t\tdimension,\n\t\t\t\t\textra,\n\t\t\t\t\tisBorderBox,\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && support.scrollboxSize() === styles.position ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","/*!\n * JavaScript Cookie v2.2.0\n * https://github.com/js-cookie/js-cookie\n *\n * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\n * Released under the MIT license\n */\n;(function (factory) {\n\tvar registeredInModuleLoader = false;\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (!registeredInModuleLoader) {\n\t\tvar OldCookies = window.Cookies;\n\t\tvar api = window.Cookies = factory();\n\t\tapi.noConflict = function () {\n\t\t\twindow.Cookies = OldCookies;\n\t\t\treturn api;\n\t\t};\n\t}\n}(function () {\n\tfunction extend () {\n\t\tvar i = 0;\n\t\tvar result = {};\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar attributes = arguments[ i ];\n\t\t\tfor (var key in attributes) {\n\t\t\t\tresult[key] = attributes[key];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction init (converter) {\n\t\tfunction api (key, value, attributes) {\n\t\t\tvar result;\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Write\n\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tattributes = extend({\n\t\t\t\t\tpath: '/'\n\t\t\t\t}, api.defaults, attributes);\n\n\t\t\t\tif (typeof attributes.expires === 'number') {\n\t\t\t\t\tvar expires = new Date();\n\t\t\t\t\texpires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);\n\t\t\t\t\tattributes.expires = expires;\n\t\t\t\t}\n\n\t\t\t\t// We're using \"expires\" because \"max-age\" is not supported by IE\n\t\t\t\tattributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';\n\n\t\t\t\ttry {\n\t\t\t\t\tresult = JSON.stringify(value);\n\t\t\t\t\tif (/^[\\{\\[]/.test(result)) {\n\t\t\t\t\t\tvalue = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\n\t\t\t\tif (!converter.write) {\n\t\t\t\t\tvalue = encodeURIComponent(String(value))\n\t\t\t\t\t\t.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = converter.write(value, key);\n\t\t\t\t}\n\n\t\t\t\tkey = encodeURIComponent(String(key));\n\t\t\t\tkey = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);\n\t\t\t\tkey = key.replace(/[\\(\\)]/g, escape);\n\n\t\t\t\tvar stringifiedAttributes = '';\n\n\t\t\t\tfor (var attributeName in attributes) {\n\t\t\t\t\tif (!attributes[attributeName]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstringifiedAttributes += '; ' + attributeName;\n\t\t\t\t\tif (attributes[attributeName] === true) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstringifiedAttributes += '=' + attributes[attributeName];\n\t\t\t\t}\n\t\t\t\treturn (document.cookie = key + '=' + value + stringifiedAttributes);\n\t\t\t}\n\n\t\t\t// Read\n\n\t\t\tif (!key) {\n\t\t\t\tresult = {};\n\t\t\t}\n\n\t\t\t// To prevent the for loop in the first place assign an empty array\n\t\t\t// in case there are no cookies at all. Also prevents odd result when\n\t\t\t// calling \"get()\"\n\t\t\tvar cookies = document.cookie ? document.cookie.split('; ') : [];\n\t\t\tvar rdecode = /(%[0-9A-Z]{2})+/g;\n\t\t\tvar i = 0;\n\n\t\t\tfor (; i < cookies.length; i++) {\n\t\t\t\tvar parts = cookies[i].split('=');\n\t\t\t\tvar cookie = parts.slice(1).join('=');\n\n\t\t\t\tif (!this.json && cookie.charAt(0) === '\"') {\n\t\t\t\t\tcookie = cookie.slice(1, -1);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar name = parts[0].replace(rdecode, decodeURIComponent);\n\t\t\t\t\tcookie = converter.read ?\n\t\t\t\t\t\tconverter.read(cookie, name) : converter(cookie, name) ||\n\t\t\t\t\t\tcookie.replace(rdecode, decodeURIComponent);\n\n\t\t\t\t\tif (this.json) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tcookie = JSON.parse(cookie);\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key === name) {\n\t\t\t\t\t\tresult = cookie;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!key) {\n\t\t\t\t\t\tresult[name] = cookie;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tapi.set = api;\n\t\tapi.get = function (key) {\n\t\t\treturn api.call(api, key);\n\t\t};\n\t\tapi.getJSON = function () {\n\t\t\treturn api.apply({\n\t\t\t\tjson: true\n\t\t\t}, [].slice.call(arguments));\n\t\t};\n\t\tapi.defaults = {};\n\n\t\tapi.remove = function (key, attributes) {\n\t\t\tapi(key, '', extend(attributes, {\n\t\t\t\texpires: -1\n\t\t\t}));\n\t\t};\n\n\t\tapi.withConverter = init;\n\n\t\treturn api;\n\t}\n\n\treturn init(function () {});\n}));\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            this ||\n            {};\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n  if (typeof exports != 'undefined' && !exports.nodeType) {\n    if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.9.1';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee;\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  };\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n  _.iteratee = builtinIteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  var restArguments = function(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function(obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  }\n\n  var deepGet = function(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  var createReduce = function(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return _.map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection.\n  _.shuffle = function(obj) {\n    return _.sample(obj, Infinity);\n  };\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, Boolean);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = restArguments(function(array, otherArrays) {\n    return _.difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = restArguments(function(arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  });\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = restArguments(_.unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions.\n  var createPredicateIndexFinder = function(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  };\n\n  // Returns the first index on an array-like that passes a predicate test.\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions.\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  _.chunk = function(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = restArguments(function(func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  _.partial = restArguments(function(func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  _.partial.placeholder = _;\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  });\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  _.restArguments = restArguments;\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  };\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test.\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Internal pick helper function to determine if `obj` has key `key`.\n  var keyInObj = function(value, key, obj) {\n    return key in obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  });\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq, deepEq;\n  eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  deepEq = function(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n  _.property = function(path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  _.result = function(obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var chainResult = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define == 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}());\n","/* eslint-env browser */\nimport jQuery from 'jquery';\nimport 'es6-promise/dist/es6-promise.auto';\nimport Matches from 'modules/polyfill-matches';\nimport Remove from 'modules/polyfill-remove';\nimport ForEach from 'modules/polyfill-foreach';\nimport OfficeMap from 'modules/office-map';\nimport Screener from 'modules/screener';\nimport ShareForm from 'modules/share-form';\nimport StaticMap from 'modules/static-map';\nimport TextSizer from 'modules/text-sizer';\nimport Tooltip from 'modules/tooltip';\nimport Utility from 'modules/utility';\nimport Accordion from 'components/accordion/accordion.common';\nimport Filter from 'components/filter/filter.common';\nimport NearbyStops from 'components/nearby-stops/nearby-stops.common';\nimport Newsletter from 'objects/newsletter/newsletter.common';\n\n(function(window, $) {\n  'use strict';\n\n\n  Utility.configErrorTracking(window);\n\n  // Polyfills\n  // new Promise; // Promise\n  new Matches; // Element.prototype.matches()\n  new Remove; // Element.prototype.removes()\n  new ForEach; // Array.prototype.forEach()\n\n  // Get SVG sprite file.\n  // See: https://css-tricks.com/ajaxing-svg-sprite/\n  $.get('/wp-content/themes/access/assets/svg/icons.svg', Utility.svgSprites);\n\n  let $body = $('body');\n\n  // Attach site-wide event listeners.\n  $body.on(\n    'click',\n    '.js-simple-toggle, [data-js=\"toggle\"]', // use the data attr selector\n    Utility.simpleToggle\n  ).on('click', '[data-js=\"toggle-nav\"]', (event) => {\n    let element = $(event.currentTarget);\n    // Shows/hides the mobile nav and overlay.\n    event.preventDefault();\n    $('body').toggleClass('active:overlay');\n    $(element.attr('href')).toggleClass('active:o-mobile-nav');\n  }).on('click', '.js-toggle-search', (e) => {\n    // Shows/hides the search drawer in the main nav.\n    e.preventDefault();\n    const $search = $('#search');\n    $search.toggleClass('active');\n    if ($search.hasClass('active')) {\n      setTimeout(function() {\n        $('#search-field').focus();\n      }, 20);\n    }\n  }).on('click', '.js-hide-search', (e) => {\n    // Hides the search drawer in the main nav.\n    e.preventDefault();\n    $('#search').removeClass('active');\n  });\n\n  // Initialize ACCESS NYC Patterns lib components\n  new Accordion();\n  new Filter();\n  new NearbyStops();\n\n  // Instantiate Newsletter Class\n  let newsletter = document.querySelector(Newsletter.selector);\n  if (newsletter) new Newsletter(newsletter);\n\n  // Show/hide share form disclaimer\n  $body.on('click', '.js-show-disclaimer', ShareForm.ShowDisclaimer);\n\n  // A basic click tracking function\n  $body.on('click', '[data-js*=\"track\"]', (event) => {\n    /* eslint-disable no-console, no-debugger */\n    let key = event.currentTarget.dataset.trackKey;\n    let data = JSON.parse(event.currentTarget.dataset.trackData);\n    Utility.track(key, data);\n    /* eslint-enable no-console, no-debugger */\n  });\n\n  // Capture the queries on Search page\n  $(window).on('load', function() {\n    let $wtSearch = $('[data-js=\"wt-search\"]');\n    if (~window.location.href.indexOf('?s=') && $wtSearch.length) {\n      let key = $wtSearch.data('wtSearchKey');\n      let data = $wtSearch.data('wtSearchData');\n      Utility.webtrends(key, data);\n    }\n  });\n\n  // On the search results page, submits the search form when a category is\n  // chosen.\n  $('.js-program-search-filter').on('change', 'input', (e) => {\n    $(e.currentTarget).closest('form')[0].submit();\n  });\n\n  // TODO: This function and the conditional afterwards should be refactored\n  // and pulled out to its own program detail controller module. The main\n  // unique thing about program details is that they use a ?step=x query\n  // parameter in the URL to determine the visible section. It is still all\n  // the same page. A hash would seem more appropriate, but there were\n  // some supposed issues with WPML where the hash was being stripped when\n  // switching between langauges. Because it is a single page, we don't need\n  // to actually reload the browser, which is why history.pushState is used.\n  /**\n   * Advances Program Page Steps\n   * @param {string} step - the kebab case identifier for the section\n   */\n  function showSection(step) {\n    $('[data-js=\"program-detail-step\"]')\n       .removeClass('active').filter(`#${step}`).addClass('active');\n\n    $('[data-js=\"program-nav\"] a').removeClass('active')\n       .filter(`#nav-link-${step}`).addClass('active');\n  }\n\n  if ($('[data-js=\"program-detail-content\"]').length) {\n    const isMobileView = () => $('[data-js=\"site-desktop-nav\"]')\n      .is(':hidden');\n\n    $('[data-js*=\"program-nav-step-link\"]').on('click', (e) => {\n      if (!history.pushState) {\n        return true;\n      }\n      e.preventDefault();\n\n      const step = Utility.getUrlParameter('step', $(e.target).attr('href'));\n      let linkType = '';\n\n      window.history.pushState(null, null, '?step=' + step);\n\n      if ($(e.target).hasClass('[data-js*=\"jump-to-anchor\"]')) {\n        linkType = 'buttonLink';\n      } else {\n        linkType = 'navLink';\n      }\n      $(window).trigger('popstate', linkType);\n    });\n\n    $(window).on('popstate', (e, linkType) => {\n      const possibleSections = [\n        'how-it-works',\n        'how-to-apply',\n        'determine-your-eligibility',\n        'what-you-need-to-include'\n      ];\n\n      let sectionId = Utility.getUrlParameter('step');\n\n      if (!sectionId || !$.inArray(sectionId, possibleSections)) {\n        sectionId = 'how-it-works';\n      }\n\n      // If the page is in a mobile view, and the user has clicked a button\n      // (as opposed to one of the table of content links) we want to scroll\n      // the browser to the content body as opposed to the top of the page.\n      if (isMobileView() && linkType === 'buttonLink') {\n        $(document).scrollTop(\n          $('[data-js=\"program-detail-content\"]').offset().top\n        );\n      } else {\n        $(document).scrollTop(0);\n      }\n      showSection(sectionId);\n    }).trigger('popstate');\n  }\n  // END TODO\n\n  // Initialize text sizer module.\n  $(`.${TextSizer.CssClass.CONTROLLER}`).each((i, el) => {\n    const textSizer = new TextSizer(el);\n    textSizer.init();\n  });\n\n  // Initialize eligibility screener.\n  $(`.${Screener.CssClass.FORM}`).each((i, el) => {\n    const screener = new Screener(el);\n    screener.init();\n  });\n\n  // Initialize maps if present.\n  const $maps = $('.js-map');\n\n  /**\n   * Callback function for loading the Google maps library.\n   */\n\n  window.initializeMaps = () => {\n    $maps.each((i, el) => {\n      const map = new OfficeMap(el);\n      map.init();\n    });\n  };\n\n  // Initialize simple maps.\n  $('.js-static-map').each((i, el) => {\n    const staticMap = new StaticMap(el);\n    staticMap.init();\n  });\n\n  // For location detail pages, this overwrites the link to the \"back to map\"\n  // button if the previous page was the map. We want the user to return to\n  // the previous state of the map (via the same URL) rather than simply going\n  // back to the default map.\n  $('.js-location-back').each((i, el) => {\n    if (window.document.referrer.indexOf('/locations/?') >= 0) {\n      $(el).attr('href', window.document.referrer);\n    }\n  });\n\n  // Initialize tooltips.\n  $(`.${Tooltip.CssClass.TRIGGER}`).each((i, el) => {\n    const tooltip = new Tooltip(el);\n    tooltip.init();\n  });\n\n  // Initialize share by email/sms forms.\n  $(`.${ShareForm.CssClass.FORM}`).each((i, el) => {\n    const shareForm = new ShareForm(el);\n    shareForm.init();\n  });\n\n  // For pages with \"print-view\" class, print the page on load. Currently only\n  // used on program detail pages after the print link is clicked.\n  if ($('html').hasClass('print-view')) {\n    window.onload = window.print;\n  }\n\n  // Add noopener attribute to new window links if it isn't there.\n  $('a[target=\"_blank\"]').each(Utility.noopener);\n\n  // Enable environment warnings\n  $(window).on('load', () => Utility.warnings());\n})(window, jQuery);\n","/* eslint-env browser */\n'use strict';\n\nimport $ from 'jquery';\nimport _ from 'underscore';\n\n/**\n * This component takes an element that serves as a filter controller for a\n * parent OfficeMap. This handles UI toggle interactions, emits a 'change'\n * event when its state changes, and can return an array of its active checkbox\n * values.\n * @class\n */\nclass OfficeFilter {\n  /**\n   * @param {HTMLElement} el - The HTML element for this component.\n   * @constructor\n   */\n  constructor(el) {\n    /** @private {HTMLElement} The main component element. */\n    this._el = el;\n\n    /** @private {Array<Number>} An array of active program IDs. */\n    this._programs = [];\n\n    /** @private {jQuery} The program inputs in this controller. */\n    this._$programCheckboxes =\n        $(el).find(`input.${OfficeFilter.CssClass.PROGRAM_CHECKBOX}`);\n\n    /** @private {boolean} Whether this control has been initialized. */\n    this._initialized = false;\n  }\n\n  /**\n   * Attach event handlers if this has not been initialized yet.\n   * @return {this} OfficeFilter\n   */\n  init() {\n    if (this._initialized) {\n      return this;\n    }\n\n    $(this._el).on('change', `.${OfficeFilter.CssClass.PROGRAM_CHECKBOX}`,\n        (e) => {\n          this.setCategoryParent(e.currentTarget).updateResults();\n        }).on('change', `.${OfficeFilter.CssClass.PARENT_CHECKBOX}`, (e) => {\n          const $checkbox = $(e.currentTarget);\n          this.toggleCheckGroup($checkbox.data('toggles'),\n              $checkbox.prop('checked')).updateResults();\n        }).on('click', `.${OfficeFilter.CssClass.TOGGLE}`, (e) => {\n          const targetSelector = $(e.currentTarget).data('target') ||\n              $(e.currentTarget).attr('href');\n          e.preventDefault();\n          this.togglePanel($(targetSelector)[0], e.currentTarget);\n        });\n    this._initialized = true;\n\n    return this;\n  }\n\n  /**\n   * Updates this._programs with the value of checked controls.\n   * @method\n   * @return {this} OfficeFilter\n   */\n  updateResults() {\n    this._programs = [];\n    this._$programCheckboxes.each((i, el) => {\n      const $checkbox = $(el);\n      if ($checkbox.prop('checked')) {\n        this._programs.push(parseInt($checkbox.val(), 10));\n      }\n    });\n    $(this._el).trigger(OfficeFilter.Event.UPDATE);\n    return this;\n  }\n\n  /**\n   * Returns the value of this._programs.\n   * @method\n   * @return {Array<Number>} array of matched program IDs.\n   */\n  getPrograms() {\n    return this._programs;\n  }\n\n  /**\n   * Checks any inputs that match the passed array of program IDs and updates\n   * this._programs.\n   * @method\n   * @param {Array<Number>} programs - array of program IDs\n   * @return {this} OfficeFilter\n   */\n  setPrograms(programs) {\n    if(!_.isArray(programs)) {\n      return this;\n    }\n    this._$programCheckboxes.each((i, el) => {\n      const $checkbox = $(el);\n      const checked = programs.indexOf(parseInt($checkbox.val(), 10)) >= 0;\n      $checkbox.prop('checked', checked);\n      if (checked) {\n        this.setCategoryParent(el);\n      }\n    });\n    this._programs = programs;\n    return this;\n  }\n\n  /**\n   * Toggles all inputs in the targeted element.\n   * @method\n   * @param {string} selector - Parent element to target\n   * @param {boolean} toggle - whether to toggle these elements on or off.\n   * @return {this} OfficeFilter\n   */\n  toggleCheckGroup(selector, toggle) {\n    $(this._el).find(selector)\n        .find(`.${OfficeFilter.CssClass.PROGRAM_CHECKBOX}`)\n        .prop('checked', toggle);\n    return this;\n  }\n\n  /**\n   * For a program checkbox, checks its related category checkbox if the\n   * program checkbox is checked, otheriwse if all sibling program checkboxes\n   * are unchecked, unchecks the related category checkbox.\n   * @method\n   * @param {HTMLElement} checkbox - Program checkbox.\n   * @return {this} OfficeFilter\n   */\n  setCategoryParent(checkbox) {\n    const $categoryGroup = $(checkbox)\n        .closest(`.${OfficeFilter.CssClass.PROGRAM_GROUP}`);\n    const $categoryCheckbox = $(this._el)\n        .find(`input[data-toggles=\"#${$categoryGroup.attr('id')}\"]`);\n    if ($(checkbox).prop('checked')) {\n      $categoryCheckbox.prop('checked', true);\n    } else if (!$categoryGroup\n        .find(`input.${OfficeFilter.CssClass.PROGRAM_CHECKBOX}`)\n        .filter(':checked').length) {\n      $categoryCheckbox.prop('checked', false);\n    }\n    return this;\n  }\n\n  /**\n   * Toggles the active class on a target and optionally the triggering element.\n   * @method\n   * @param {HTMLElement} target - the targetted panel element\n   * @param {?HTMLElement} trigger - the element that triggered the toggle\n   * @return {this} OfficeFilter\n   */\n  togglePanel(target, trigger) {\n    const els = [];\n    if (target) {\n      els.push(target);\n    }\n    if (trigger) {\n      els.push(trigger);\n    }\n    $(els).toggleClass(OfficeFilter.CssClass.ACTIVE);\n\n    const targetActive = $(target).hasClass(OfficeFilter.CssClass.ACTIVE);\n    $(target).attr('aria-hidden',\n        !targetActive);\n    if (targetActive) {\n      $(target).find(`.${OfficeFilter.CssClass.PARENT_CHECKBOX},\n          .${OfficeFilter.CssClass.PROGRAM_CHECKBOX},\n          .${OfficeFilter.CssClass.TOGGLE}`).removeAttr('tabindex');\n    } else {\n      $(target).find(`.${OfficeFilter.CssClass.PARENT_CHECKBOX},\n          .${OfficeFilter.CssClass.PROGRAM_CHECKBOX},\n          .${OfficeFilter.CssClass.TOGGLE}`).attr('tabindex', '-1');\n    }\n    return this;\n  }\n}\n\n/**\n * CSS classes used by this component.\n * @enum {string}\n */\nOfficeFilter.CssClass = {\n  ACTIVE: 'active',\n  MAIN_TOGGLE: 'js-main-filter-toggle',\n  PARENT_CHECKBOX: 'js-map-filter-parent-input',\n  PROGRAM_CHECKBOX: 'js-map-filter-program-input',\n  PROGRAM_GROUP: 'js-map-filter-program-group',\n  TOGGLE: 'js-toggle-filter'\n};\n\n/**\n * Events used by this component.\n * @enum {string}\n */\nOfficeFilter.Event = {\n  UPDATE: 'update'\n};\n\n\nexport default OfficeFilter;\n","/* eslint-env browser */\n'use strict';\n\nimport Utility from 'modules/utility';\nimport _ from 'underscore';\n\n/**\n * OfficeLocation objects are used by the OfficeMap and help normalize the\n * JSON data that is passed from the WP API.\n * @class\n */\nclass OfficeLocation {\n  /**\n   * @param {object} obj - a JSON object from the WP api.\n   * @constructor\n   */\n  constructor(obj) {\n    /**  {?this._google} The google map object. */\n    this._google = window.google;\n    // If this is the first time an Office Location is instantiated, define\n    // the marker icon element. Blue markers are used by Government Offices.\n    // Green is used for all others.\n    if (!OfficeLocation.Marker) {\n      OfficeLocation.Marker = {\n        BLUE: {\n          url: Utility.CONFIG.URL_PIN_BLUE_2X,\n          size: new this._google.maps.Size(65, 80),\n          origin: new this._google.maps.Point(0, 0),\n          anchor: new this._google.maps.Point(16, 40),\n          scaledSize: new this._google.maps.Size(33, 40)\n        },\n        GREEN: {\n          url: Utility.CONFIG.URL_PIN_GREEN_2X,\n          size: new this._google.maps.Size(65, 80),\n          origin: new this._google.maps.Point(0, 0),\n          anchor: new this._google.maps.Point(16, 40),\n          scaledSize: new this._google.maps.Size(33, 40)\n        }\n      };\n    }\n\n    /** {Number} The WordPress ID */\n    this.id = obj.id || 0;\n\n    /** {string} The WordPress slug. */\n    this.link = obj.link || '';\n\n    /** {string} The name of the office. */\n    this.name = obj.title || '';\n\n    /** {string} The office type. */\n    this.type = obj.type || '';\n\n    /** {Boolean} If this is a government office. */\n    // We won't need to localize this until we translate locations - DH\n    // this.isGovtOffice = Utility.localize('GOVERNMENT_OFFICE') === this.type;\n    this.isGovtOffice = 'Government Office' === this.type;\n\n    /** {object} The office location. */\n    this.address = {\n      street: obj.address.street || '',\n      location:\n          new this._google.maps.LatLng(obj.address.lat, obj.address.lng)\n    };\n\n    /** {array<Number> A collection of program data. */\n    this.programs = obj.programs || [];\n\n    /** {this._google.maps.Marker} google marker associated with this office. */\n    this.marker = new this._google.maps.Marker({\n      position: this.address.location,\n      icon: this.isGovtOffice ? OfficeLocation.Marker.BLUE :\n          OfficeLocation.Marker.GREEN,\n      title: this.name,\n      id: this.id\n    });\n  }\n\n  /**\n   * Returns true if office has any of the passed programs, identified by ID.\n   * Also returns true if an empty array is passed.\n   * @param {Array<Number>|Number} programIds\n   * @return {boolean} Whether a program has been matched.\n   */\n  hasProgram(programIds) {\n    let result = false;\n    let programs = [];\n    if (_.isNumber(programIds)) {\n      programs.push(programIds);\n    } else if (_.isArray(programIds)) {\n      programs = programIds;\n    }\n    if (programs.length === 0) {\n      result = true;\n    } else {\n      for (let i = 0; i < this.programs.length; i++) {\n        if (_.contains(programs, this.programs[i])) {\n          result = true;\n          break;\n        }\n      }\n    }\n    return result;\n  }\n}\n\nOfficeLocation.Marker = null;\n\nexport default OfficeLocation;\n","/* eslint-env browser */\n'use strict';\n\nimport $ from 'jquery';\nimport OfficeFilter from 'modules/office-filter';\nimport OfficeLocation from 'modules/office-location';\nimport Utility from 'modules/utility';\nimport _ from 'underscore';\n\n/**\n * This is the main controller for the map at the /locations page. This handles\n * rendering the Google map, fetching location details, placing markers, and\n * any map interactions - like filtering and featuring.\n * @class\n */\nclass OfficeMap {\n  /**\n   * @param {HTMLElement} el - The html element for the component.\n   * @constructor\n   */\n  constructor(el) {\n    /** @private {HTMLElement} The component element. */\n    this._el = el;\n\n    /**  {?this._google} The google map object. */\n    this._google = window.google;\n\n    /** @private {HTMLElement} The map element. */\n    this._mapEl = $(el).find(`.${OfficeMap.CssClass.MAP_BOX}`)[0];\n\n    /** @private {HTMLElement} The map element. */\n    this._listEl = $(el).find(`.${OfficeMap.CssClass.RESULT_LIST}`)[0];\n\n    /** @private {HTMLElement} The search box element. */\n    this._searchEl = $(el).find(`.${OfficeMap.CssClass.SEARCH_BOX}`)[0];\n\n    /** @private {HTMLElement} The filter control element. */\n    this._filterEl = $(el).find(`.${OfficeMap.CssClass.FILTER}`)[0];\n\n    /** @private {HTMLElement} The filter control element. */\n    this._paginationEl = $(el).find(`.${OfficeMap.CssClass.PAGINATION}`)[0];\n\n    /** @private {boolean} Whether the map has been initialized. */\n    this._initialized = false;\n\n    /** @private {this._google.maps.LatLng} Map position. */\n    this._mapPosition = Utility.getUrlParameter('lat') &&\n        Utility.getUrlParameter('lng') ?\n        new this._google.maps.LatLng(parseFloat(Utility.getUrlParameter('lat')),\n            parseFloat(Utility.getUrlParameter('lng'))) :\n        new this._google.maps.LatLng(Utility.CONFIG.DEFAULT_LAT,\n            Utility.CONFIG.DEFAULT_LNG);\n\n    /** @private {?this._google.maps.Map} The google map object. */\n    this._map = new this._google.maps.Map(this._mapEl, {\n      zoom: 11,\n      center: this._mapPosition\n    });\n\n    /** @private {this._google.maps.places.SearchBox} Search box controller. */\n    this._searchBox = new this._google.maps.places.SearchBox(this._searchEl);\n\n    /** @private {OfficeFilter} Program filter controller. */\n    this._filter = new OfficeFilter(this._filterEl);\n\n    /** @private {Array<OfficeLocation>} The office locations. */\n    this._locations = [];\n\n    /** @private {Array<OfficeLocation>} The office locations. */\n    this._filteredLocations = [];\n\n    /** @private {Array<Number>} The IDs of programs to filter by. */\n    this._programs = Utility.getUrlParameter('programs') ?\n        _.map(decodeURIComponent(Utility.getUrlParameter('programs'))\n        .split(','), (num) => {\n            return parseInt(num, 10);\n        }) : [];\n  }\n\n  /**\n   * If this form has not yet been initialized, attaches event listeners.\n   * @method\n   * @return {this} OfficeMap\n   */\n  init() {\n    if (this._initialized) {\n      return this;\n    }\n\n    // Set window resize handler for the map.\n    $(window).on('resize', () => {\n      this._google.maps.event.trigger(this._map, 'resize');\n    });\n\n    // Adds handler for highlighting and bouncing a pin when a list item gets\n    // focus.\n    $(this._el).on('focus', `.${OfficeMap.CssClass.LIST_LOCATION}`,\n        (e) => {\n      const markerId = parseInt($(e.currentTarget).data('marker'), 10);\n      const location = _.findWhere(this._locations, {\n        id: markerId\n      });\n      if (location && 'marker' in location) {\n        $('html, body').animate({\n          scrollTop: `${$(this._mapEl).offset().top}px`\n        }, 'fast').promise().then(() => {\n          this.centerOnMarker(location.marker);\n          $(e.delegateTarget).find(`.${OfficeMap.CssClass.LIST_LOCATION}`)\n              .removeClass(OfficeMap.CssClass.ACTIVE);\n          $(e.currentTarget).addClass(OfficeMap.CssClass.ACTIVE);\n        });\n      }\n    }).on('click', `.${OfficeMap.CssClass.MORE}`, (e) => {\n      // Hanlder for the 'Show more' button.\n      e.preventDefault();\n      this.updateList().updateUrl();\n    });\n\n    // Bias the SearchBox results towards current map's viewport when the map\n    // bounds change.\n    this._map.addListener('bounds_changed', _.debounce(() => {\n      this._searchBox.setBounds(this._map.getBounds());\n    }, 100));\n\n    // Attach handler for the autocomplete search box. This updates the map\n    // position and re-sorts locations around that position.\n    this._searchBox.addListener('places_changed', () => {\n      const place = this._searchBox.getPlaces()[0];\n      if (place) {\n        this._mapPosition = place.geometry.location;\n        this._map.panTo(this._mapPosition);\n        this.sortByDistance().clearLocations().updateUrl().updateList()\n            .updateUrl();\n        $(this._searchEl).blur();\n      }\n    });\n\n    // Initialize the filter control and listen for filter updates.\n    this._filter.setPrograms(this._programs).init();\n    $(this._filterEl).on(OfficeFilter.Event.UPDATE, () => {\n      this._programs = this._filter.getPrograms();\n      this.filterLocations().updateUrl().sortByDistance().updateList()\n          .updateUrl();\n    });\n\n    // Load pin data.\n    this.loading(true);\n\n    this.clearLocations(true).fetchLocations().then(() => {\n      this.loading(false);\n      this.filterLocations().sortByDistance();\n      if (Utility.getUrlParameter('lat') || Utility.getUrlParameter('lng') ||\n          Utility.getUrlParameter('programs')) {\n        // These parameters indicate an initial app state, so update the map\n        // and list to reflect that.\n        this.updateList().updateUrl();\n      } else {\n        // If there is no initial application state, open the filter drawer.\n        const $filterToggle =\n            $(this._el).find(`.${OfficeFilter.CssClass.MAIN_TOGGLE}`);\n        if (!$filterToggle.hasClass('active')) {\n          $filterToggle.trigger('click');\n        }\n      }\n    });\n\n    this._initialized = true;\n\n    return this;\n  }\n\n  /**\n   * Clears the map markers, map listing, and, optionally, resets\n   * this._locations and this._filteredLocations.\n   * @method\n   * @param {boolean} reset - True if resetting the entire set.\n   * @return {this} OfficeMap\n   */\n  clearLocations(reset) {\n    _.each(this._locations, (location) => {\n      location.marker.setMap(null);\n      location.active = false;\n    });\n\n    $(this._listEl).empty();\n\n    if (reset) {\n      this._locations = [];\n      this._filteredLocations = [];\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates this._locations based on a given set of parameters. Recursively\n   * makes requests to the API until all results are loaded.\n   * @method\n   * @return {jqXHR} - JSON response.\n   */\n  fetchLocations() {\n    return $.getJSON($(this._el).data('source')).then((data) => {\n      _.each(data.locations, (item) => {\n        const location = new OfficeLocation(item);\n        this._google.maps.event.addListener(location.marker, 'click', () => {\n          this.focusListOnMarker(location.marker);\n        });\n        this._locations.push(location);\n      });\n    });\n  }\n\n  /**\n   * Update the list of locations on the map.\n   * @method\n   * @return {this} OfficeMap\n   */\n  updateList() {\n    // If there are no qualified locations, show \"no results\".\n    if (this._filteredLocations.length === 0) {\n      $(this._el).find(OfficeMap.Selectors.MESSAGE_NO_RESULTS)\n        .removeClass('hidden')\n        .attr('aria-hidden', false);\n      $(this._listEl).empty();\n      $(this._paginationEl).empty();\n      return this;\n    }\n\n    // Underscore templates.\n    const locationTemplate = $('#map-location-template').html();\n    const paginationTemplate = $('#map-pagination-template').html();\n\n    // Determine the set of locations to retrieve based on count.\n    const currentCount = $(this._listEl).find('li').length;\n    const newCount = Utility.getUrlParameter('count') &&\n        parseInt(Utility.getUrlParameter('count'), 10) > currentCount &&\n        !(parseInt(Utility.getUrlParameter('count'), 10) < 25) ?\n        parseInt(Utility.getUrlParameter('count'), 10) : currentCount + 25;\n    const addedLocations = this._filteredLocations\n        .slice(currentCount, newCount);\n\n    // For the locations to be added, attach their marker to the map and\n    // set them to active.\n    _.each(addedLocations, (location) => {\n      location.marker.setMap(this._map);\n      location.active = true;\n    });\n\n    // Update the list.\n    $(this._el).find(OfficeMap.Selectors.MESSAGE_NO_RESULTS)\n      .addClass('hidden')\n      .attr('aria-hidden', true);\n    $(this._listEl).append(_.template(locationTemplate)({\n      locations: addedLocations,\n      localize: Utility.localize\n    }));\n\n    // Update the pagination controller.\n    $(this._paginationEl).html(_.template(paginationTemplate)({\n      displayedCount: $(this._listEl).find('li').length,\n      totalCount: this._filteredLocations.length\n    }));\n\n    // Re-zoom the map.\n    this.fitMapToPins();\n\n    return this;\n  }\n\n  /**\n   * Centers the map on the marker and highlights the marker with a bouncing\n   * animation.\n   * @param {this._google.maps.Marker} marker\n   * @return {this} OfficeMap\n   */\n  centerOnMarker(marker) {\n    if (!marker) {\n      return this;\n    }\n\n    this._map.panTo(marker.getPosition());\n\n    // Bounce the marker once the pan has completed.\n    // A single bounce animation is about 700ms, so the animation is set here\n    // to last for three bounces (2100ms).\n    this._google.maps.event.addListenerOnce(this._map, 'idle', () => {\n      marker.setAnimation(this._google.maps.Animation.BOUNCE);\n      _.delay(() => {\n        marker.setAnimation(null);\n      }, 2100);\n    });\n\n    return this;\n  }\n\n  /**\n   * Centers the map on the clicked marker and highlights the accompanying\n   * result list item, scrolling either the page or the result list container\n   * to the item as appropraite.\n   * @method\n   * @param {this._google.maps.Marker} marker\n   * @return {this} OfficeMap\n   */\n  focusListOnMarker(marker) {\n    if (!marker) {\n      return this;\n    }\n\n    // Center the map.\n    this.centerOnMarker(marker);\n\n    // Highlight the list item related to the marker.\n    const $highlightedItem = $(this._el)\n        .find(`.${OfficeMap.CssClass.LIST_LOCATION}`)\n        .removeClass(OfficeMap.CssClass.ACTIVE)\n        .filter(`[data-marker=\"${marker.id}\"]`)\n        .addClass(OfficeMap.CssClass.ACTIVE);\n    const $resultContainer = $(this._el)\n        .find(`.${OfficeMap.CssClass.CONTROLS}`);\n    // The result container will have `overflow: scroll` on large viewports.\n    // In this case we want to only scroll that control. If the result container\n    // does not have `overflow: scroll` then we want to scroll the window.\n    let $scrollTarget = $('html, body');\n    let scrollPos = $highlightedItem.offset().top;\n    // TODO(jjandoc): Is there a better conditional for this?\n    if ($resultContainer.css('overflow') === 'auto' ||\n        $resultContainer.css('overflow-y') === 'auto') {\n      $scrollTarget = $resultContainer;\n      scrollPos = $scrollTarget.scrollTop() + $highlightedItem.position().top;\n    }\n    $scrollTarget.animate({\n      scrollTop: `${scrollPos}px`\n    }, 'fast');\n\n    return this;\n  }\n  /**\n   * Updates the list of locations based on programs.\n   * @method\n   * @return {this} OfficeMap\n   */\n  filterLocations() {\n    this.clearLocations();\n    this._filteredLocations = [];\n    _.each(this._locations, (location) => {\n      if (!this._programs.length || location.hasProgram(this._programs)) {\n        this._filteredLocations.push(location);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Sort this._filteredLocations by distance of markers to a given point.\n   * @method\n   * @param {this._google.maps.LatLng} origin\n   * @return {this} OfficeMap\n   */\n  sortByDistance(origin = this._mapPosition) {\n    _.each(this._filteredLocations, (location) => {\n      location.distance =\n          this._google.maps.geometry.spherical.computeDistanceBetween(origin,\n              location.marker.position);\n    });\n    this._filteredLocations = _.sortBy(this._filteredLocations, 'distance');\n\n    return this;\n  }\n\n  /**\n   * Updates the query parameters in the URL.\n   * @method\n   * @return {this} OfficeMap\n   */\n  updateUrl() {\n    if ('replaceState' in window.history) {\n      const mapState = {\n        lat: this._mapPosition.lat(),\n        lng: this._mapPosition.lng()\n      };\n      if (this._programs.length) {\n        mapState.programs = this._programs.join(',');\n      }\n      const locationCount = _.filter(this._filteredLocations, (location) =>\n          location.active).length;\n      if (locationCount) {\n        mapState.count = locationCount;\n      }\n      window.history.replaceState(null, null, `?${$.param(mapState)}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the zoom level of the map to fit all active markers.\n   * @method\n   * @return {this} OfficeMap\n   */\n  fitMapToPins() {\n    const bounds = new this._google.maps.LatLngBounds();\n    _.each(this._filteredLocations, (location) => {\n      if (location.active) {\n        bounds.extend(location.marker.getPosition());\n      }\n    });\n    this._map.fitBounds(bounds);\n    return this;\n  }\n\n  /**\n   * Method for the loading state\n   * @param  {boolean} isLoading Wether or not the map is loading\n   * @return {this} OfficeMap\n   */\n  loading(isLoading) {\n    if (isLoading) {\n      $(this._el).find(OfficeMap.Selectors.MESSAGE_LOADING)\n        .removeClass('hidden')\n        .attr('aria-hidden', false);\n    } else {\n      $(this._el).find(OfficeMap.Selectors.MESSAGE_LOADING)\n        .addClass('hidden')\n        .attr('aria-hidden', true);\n    }\n    return this;\n  }\n\n  // results() {\n\n  // }\n\n}\n\n/**\n * CSS classes used by this component.\n * @enum {string}\n */\nOfficeMap.CssClass = {\n  ACTIVE: 'active bg-color-yellow-light',\n  CONTROLS: 'js-map-controls',\n  FILTER: 'js-map-filter',\n  LIST_LOCATION: 'js-map-location',\n  LOADING: 'loading',\n  MAP_BOX: 'js-map-mapbox',\n  MORE: 'js-map-more',\n  NO_RESULTS: 'no-results',\n  PAGINATION: 'js-map-pagination',\n  RESULT_CONTAINER: 'js-map-results-container',\n  RESULT_LIST: 'js-map-results',\n  SEARCH_BOX: 'js-map-searchbox'\n};\n\nOfficeMap.Selectors = {\n  MESSAGE_LOADING: '[data-js=\"message-loading\"]',\n  MESSAGE_NO_RESULTS: '[data-js=\"message-no-results\"]'\n};\n\nexport default OfficeMap;\n","'use strict';\n\n/**\n * Polyfill for Array.prototype.forEach()\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Polyfill\n */\nclass ForEach {\n  /**\n   * Class contructor\n   */\n  constructor() {\n    /* eslint-disable no-undef, no-extend-native, prefer-rest-params */\n    if (!Array.prototype.forEach) {\n      Array.prototype.forEach = function(callback) {\n        let T;\n        let k;\n\n        if (this == null) {\n          throw new TypeError('this is null or not defined');\n        }\n\n        let O = Object(this);\n        let len = O.length >>> 0;\n        if (typeof callback !== 'function') {\n          throw new TypeError(callback + ' is not a function');\n        }\n\n        if (arguments.length > 1) {\n          T = arguments[1];\n        }\n\n        k = 0;\n\n        while (k < len) {\n          let kValue;\n          if (k in O) {\n            kValue = O[k];\n            callback.call(T, kValue, k, O);\n          }\n          k++;\n        }\n      };\n    }\n    /* eslint-enable no-undef */\n  }\n}\n\nexport default ForEach;\n","'use strict';\n\n/**\n * Polyfill for Element.prototype.matches()\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n */\nclass Matches {\n  /**\n   * Class contructor\n   */\n  constructor() {\n    /* eslint-disable no-undef */\n    if (!Element.prototype.matches) {\n      Element.prototype.matches =\n        Element.prototype.matchesSelector ||\n        Element.prototype.mozMatchesSelector ||\n        Element.prototype.msMatchesSelector ||\n        Element.prototype.oMatchesSelector ||\n        Element.prototype.webkitMatchesSelector ||\n        function(s) {\n          let matches = (this.document || this.ownerDocument)\n            .querySelectorAll(s);\n          let i = matches.length;\n          // eslint-disable-next-line no-empty\n          while (--i >= 0 && matches.item(i) !== this) {}\n          return i > -1;\n        };\n    }\n    /* eslint-enable no-undef */\n  }\n}\n\nexport default Matches;\n","'use strict';\n\n/**\n * Polyfill for Element.prototype.remove()\n * https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove#Polyfill\n */\nclass Remove {\n  /**\n   * Class contructor\n   */\n  constructor() {\n    /* eslint-disable no-undef */\n    (function(arr) {\n      arr.forEach(function(item) {\n        if (item.hasOwnProperty('remove')) {\n          return;\n        }\n        Object.defineProperty(item, 'remove', {\n          configurable: true,\n          enumerable: true,\n          writable: true,\n          value: function remove() {\n            if (this.parentNode !== null)\n              this.parentNode.removeChild(this);\n          }\n        });\n      });\n    })([\n      Element.prototype,\n      CharacterData.prototype,\n      DocumentType.prototype\n    ]);\n    /* eslint-enable no-undef */\n  }\n}\n\nexport default Remove;\n","/* eslint-env browser */\n'use strict';\n\nimport _ from 'underscore';\n\n/**\n * This component is the object class for a \"household\" in the screener.\n * @class\n */\nclass ScreenerHousehold {\n  /**\n   * @param {?object} obj - initial attributes to set.\n   * @constructor\n   */\n  constructor(obj) {\n    /** @private {object} The attributes that are exposed to Drools. */\n    this._attrs = {\n      /** @type {string} */\n      zip: '',\n      /** @type {string} can be blank string or 'NYC' */\n      city: '',\n      /** @type {Number} must be an integer */\n      members: 1,\n      /** @type {Number} */\n      cashOnHand: 0,\n      /** @type {string} must be one of ScreenerHousehold.RENTAL_TYPE or\n        empty string */\n      livingRentalType: '',\n      /** @type {boolean} */\n      livingRenting: false,\n      /** @type {boolean} */\n      livingOwner: false,\n      /** @type {boolean} */\n      livingStayingWithFriend: false,\n      /** @type {boolean} */\n      livingHotel: false,\n      /** @type {boolean} */\n      livingShelter: false,\n      /** @type {boolean} */\n      livingPreferNotToSay: false\n    };\n    if (obj) {\n      this.set(obj);\n    }\n  }\n\n  /**\n   * If supplied param is an object, sets this._attrs values, matching keys.\n   * If supplied params are a string and a second value, the string matches\n   * the key and applies the second value.\n   * @method\n   * @param {object|string} param - Object of attributes, or a key for an\n   *   individual attribute\n   * @param {?string|number|boolean|array} value - Optional value to set.\n   * @return {this} ScreenerPerson\n   */\n  set(param, value) {\n    if (_.isObject(param)) {\n      for (let key in param) {\n        if (Object.prototype.hasOwnProperty.call(param, key)) {\n          this._setAttr(key, param[key]);\n        }\n      }\n    } else {\n      this._setAttr(param, value);\n    }\n    return this;\n  }\n\n  /**\n   * Sets an individual attribute, matching for type.\n   * @private\n   * @param {string} key\n   * @param {string|number|boolean|array} value\n   */\n  _setAttr(key, value) {\n    if (key in this._attrs && typeof this._attrs[key] === typeof value) {\n      if (key === 'city' && value !== 'NYC') {\n        this._attrs[key] = '';\n      } else if (key == 'livingRentalType' &&\n          ScreenerHousehold.RENTAL_TYPE.indexOf(value) <= -1) {\n        this._attrs[key] = '';\n      } else {\n        this._attrs[key] = value;\n      }\n    }\n  }\n\n  /**\n   * Returns the value of a given key in this._attrs.\n   * @method\n   * @param {string} key\n   * @return {string|number|boolean|array} value\n   */\n  get(key) {\n    const value = (key in this._attrs) ? this._attrs[key] : null;\n    return value;\n  }\n\n  /**\n   * Returns the value of this._attrs as an object.\n   * @method\n   * @return {object} this._attrs\n   */\n  toObject() {\n    return this._attrs;\n  }\n}\n\n/**\n * Valid rental types.\n * @type {Array<string>}\n */\nScreenerHousehold.RENTAL_TYPE = [\n  'NYCHA',\n  'MarketRate',\n  'RentControlled',\n  'RentRegulatedHotel',\n  'Section213',\n  'LimitedDividendDevelopment',\n  'MitchellLama',\n  'RedevelopmentCompany',\n  'HDFC',\n  'FamilyHome',\n  'Condo'\n];\n\n/**\n * Attributes for a household living condition, used to get living conditions\n * @type {Array}\n */\nScreenerHousehold.LIVING_ATTRS = [\n  'livingRenting',\n  'livingOwner',\n  'livingStayingWithFriend',\n  'livingHotel',\n  'livingShelter',\n  'livingPreferNotToSay'\n];\n\nexport default ScreenerHousehold;\n","/* eslint-env browser */\n'use strict';\n\nimport _ from 'underscore';\n\n/**\n * This component is the object class for screener individuals.\n * @class\n */\nclass ScreenerPerson {\n  /**\n   * @param {?object} obj - initial attributes to set.\n   * @constructor\n   */\n  constructor(obj) {\n    /** @private {object} The attributes that are exposed to Drools. */\n    this._attrs = {\n      /** @type {Number} must be an integer */\n      age: 0,\n      /** @type {boolean} is this person the applicant or not */\n      applicant: false,\n      /** @type {array<object>} */\n      incomes: [],\n      /** @type {array<object>} */\n      expenses: [],\n      /** @type {boolean} */\n      student: false,\n      /** @type {boolean} */\n      studentFulltime: false,\n      /** @type {boolean} */\n      pregnant: false,\n      /** @type {boolean} */\n      unemployed: false,\n      /** @type {boolean} */\n      unemployedWorkedLast18Months: false,\n      /** @type {boolean} */\n      blind: false,\n      /** @type {boolean} */\n      disabled: false,\n      /** @type {boolean} */\n      veteran: false,\n      /** @type {boolean} */\n      benefitsMedicaid: false,\n      /** @type {boolean} */\n      benefitsMedicaidDisability: false,\n      /** @type {boolean} */\n      headOfHousehold: false,\n      /** @type {string} */\n      headOfHouseholdRelation: '',\n      /** @type {boolean} */\n      livingOwnerOnDeed: false,\n      /** @type {boolean} */\n      livingRentalOnLease: false\n    };\n    if (obj) {\n      this.set(obj);\n    }\n  }\n\n  /**\n   * If supplied param is an object, sets this._attrs values, matching keys.\n   * If supplied params are a string and a second value, the string matches\n   * the key and applies the second value.\n   * @method\n   * @param {object|string} param - Object of attributes, or a key for an\n   *   individual attribute\n   * @param {?string|number|boolean|array} value - Optional value to set.\n   * @return {this} ScreenerPerson\n   */\n  set(param, value) {\n    if (_.isObject(param)) {\n      for (let key in param) {\n        if (Object.prototype.hasOwnProperty.call(param, key)) {\n          this._setAttr(key, param[key]);\n        }\n      }\n    } else {\n      this._setAttr(param, value);\n    }\n    return this;\n  }\n\n  /**\n   * Sets an individual attribute, matching for type.\n   * @private\n   * @param {string} key\n   * @param {string|number|boolean|array} value\n   */\n  _setAttr(key, value) {\n    if (key in this._attrs && typeof this._attrs[key] === typeof value) {\n      this._attrs[key] = value;\n    }\n  }\n\n  /**\n   * Returns the value of a given key in this._attrs.\n   * @method\n   * @param {string} key\n   * @return {string|number|boolean|array} value\n   */\n  get(key) {\n    const value = (key in this._attrs) ? this._attrs[key] : null;\n    return value;\n  }\n\n  /**\n   * Returns an object of just the condition key/value pairs.\n   * @method\n   * @return {object<boolean>} condition attributes\n   */\n  getConditions() {\n    const conditionKeys = [\n      'student',\n      'studentFulltime',\n      'pregnant',\n      'unemployed',\n      'unemployedWorkedLast18Months',\n      'blind',\n      'disabled',\n      'veteran'\n    ];\n    const obj = {};\n    _.each(conditionKeys, (key) => {\n      obj[key] = this.get(key);\n    });\n    return obj;\n  }\n\n  /**\n   * Returns an object of just the benefit key/value pairs.\n   * @method\n   * @return {object<boolean>} benefit attributes\n   */\n  getBenefits() {\n    const benefitKeys = [\n      'benefitsMedicaid',\n      'benefitsMedicaidDisability'\n    ];\n    const obj = {};\n    _.each(benefitKeys, (key) => {\n      obj[key] = this.get(key);\n    });\n    return obj;\n  }\n\n   /**\n    * Adds an income item to this._attrs.incomes.\n    * @method\n    * @param {number|string} amount\n    * @param {string} type\n    * @param {string} frequency\n    * @return {this} ScreenerPerson\n    */\n  addIncome(amount, type, frequency) {\n    const obj = {\n      amount: parseFloat(amount),\n      type: type,\n      frequency: frequency\n    };\n\n    if ((_.isNumber(obj.amount) && !_.isNaN(obj.amount)) &&\n        ScreenerPerson.INCOME.indexOf(obj.type) >= 0 &&\n        ScreenerPerson.FREQUENCY.indexOf(obj.frequency) >= 0) {\n      this._attrs.incomes.push(obj);\n    }\n    return this;\n  }\n\n  /**\n   * Adds an expense item to this._attrs.expenses.\n   * @method\n   * @param {number|string} amount\n   * @param {string} type\n   * @param {string} frequency\n   * @return {this} ScreenerPerson\n   */\n  addExpense(amount, type, frequency) {\n    const obj = {\n      amount: parseFloat(amount),\n      type: type,\n      frequency: frequency\n    };\n\n    if ((_.isNumber(obj.amount) && !_.isNaN(obj.amount)) &&\n        ScreenerPerson.EXPENSE.indexOf(obj.type) >= 0 &&\n        ScreenerPerson.FREQUENCY.indexOf(obj.frequency) >= 0) {\n      this._attrs.expenses.push(obj);\n    }\n    return this;\n  }\n\n  /**\n   * [addPayment description]\n   * @param {string} key  - expenses or incomes\n   * @param {string} type - type of expenses or income\n   * @return {this} ScreenerPerson\n   */\n  addPayment(key, type) {\n    const obj = {type: type, amount: '', frequency: ''};\n    let valid = false;\n\n    switch (key) {\n      case 'expenses':\n        valid = (ScreenerPerson.EXPENSE.indexOf(obj.type) >= 0) ? true : valid;\n        break;\n      case 'incomes':\n        valid = (ScreenerPerson.INCOME.indexOf(obj.type) >= 0) ? true : valid;\n        break;\n    }\n\n    if (valid) this._attrs[key].push(obj);\n\n    return this;\n  }\n\n  /**\n   * Returns the value of this._attrs as an object.\n   * @method\n   * @return {object} this._attrs\n   */\n  toObject() {\n    return this._attrs;\n  }\n}\n\nScreenerPerson.INCOME = [\n  'Wages',\n  'SelfEmployment',\n  'Unemployment',\n  'CashAssistance',\n  'ChildSupport',\n  'DisabilityMedicaid',\n  'SSI',\n  'SSDependent',\n  'SSDisability',\n  'SSSurvivor',\n  'SSRetirement',\n  'NYSDisability',\n  'Veteran',\n  'Pension',\n  'DeferredComp',\n  'WorkersComp',\n  'Alimony',\n  'Boarder',\n  'Gifts',\n  'Rental',\n  'Investment'\n];\n\nScreenerPerson.EXPENSE = [\n  'ChildCare',\n  'ChildSupport',\n  'DependentCare',\n  'Rent',\n  'Medical',\n  'Heating',\n  'Cooling',\n  'Mortgage',\n  'Utilities',\n  'Telephone',\n  'InsurancePremiums'\n];\n\nScreenerPerson.FREQUENCY = [\n  'weekly',\n  'biweekly',\n  'monthly',\n  'semimonthly',\n  'yearly'\n];\n\n/**\n * Attributes for retrieving person's condition\n * @type {Array}\n */\nScreenerPerson.CONDITION_ATTRS = [\n  'student',\n  'studentFulltime',\n  'pregnant',\n  'unemployed',\n  'unemployedWorkedLast18Months',\n  'blind',\n  'disabled',\n  'veteran'\n];\n\n/**\n * Attributes for retrieving a person's benefits\n * @type {Array}\n */\nScreenerPerson.BENEFIT_ATTRS = [\n  'benefitsMedicaid',\n  'benefitsMedicaidDisability'\n];\n\nexport default ScreenerPerson;\n","/* eslint-env browser */\n'use strict';\n\nimport $ from 'jquery';\nimport Cookies from 'js-cookie';\nimport ScreenerHousehold from 'modules/screener-household';\nimport ScreenerPerson from 'modules/screener-person';\nimport Utility from 'modules/utility';\nimport _ from 'underscore';\n\n/**\n * This component is the controller for the program screener. There's a lot\n * here but essentially how it works is that a hashchange listener is used to\n * progress the user through the screener steps. As they submit each step,\n * a number of validations occur and if everything checks out for that step,\n * the ScreenerPerson and ScreenerHousehold objects are update or created.\n * When the screener is submitted, these objects are compiled into the proper\n * formatting for the Drools rules engine and sent off to the Drools Proxy.\n * Assuming a successful response is received, we then redirect the user to\n * the screener results page, building a redirect URL based on the program\n * codes in the Droosl results, the categories they selected in step 1, the\n * current time, and a `guid` parameter provided by the Drools proxy. The\n * screener relies on Underscore templates to render any dynamic views, and\n * relies on the Utility.localize function to translate any strings within\n * those views to the current language.\n * @class\n */\nclass Screener {\n  /**\n   * @param {HTMLElement} el - The form element for the component.\n   * @constructor\n   */\n  constructor(el) {\n    /** @private {HTMLElement} The component element. */\n    this._el = el;\n\n    /** @private {jQuery} jQuery element array of screener steps. */\n    this._$steps = $(this._el).find(`.${Screener.CssClass.STEP}`);\n\n    /** @private {array<string>} array of selected category IDs */\n    this._categories = [];\n\n    /** @private {array<ScreenerPerson>} household members, max 8 */\n    this._people = [new ScreenerPerson({\n      headOfHousehold: true\n    })];\n\n    /** @private {ScreenerHousehold} household */\n    this._household = new ScreenerHousehold();\n\n    /** @private {boolean} Whether this component has been initialized. */\n    this._initialized = false;\n\n    /** @private {boolean} Whether the google reCAPTCHA widget is required. */\n    this._recaptchaRequired = false;\n\n    /** @private {boolean} Whether the google reCAPTCHA widget has passed. */\n    this._recaptchaVerified = false;\n\n    /** @private {string} the base string for the screener title. */\n    this._baseTitle = $('title').text();\n  }\n\n  /**\n   * If this component has not yet been initialized, attaches event listeners.\n   * @method\n   * @return {this} OfficeMap\n   */\n  init() {\n    if (this._initialized) {\n      return this;\n    }\n\n    window.addEventListener('hashchange', (e) => {\n      const hash = window.location.hash;\n      const $section = $(hash);\n      if ($section.length && $section.hasClass(Screener.CssClass.STEP)) {\n        this._goToStep($section[0]);\n        $(window).scrollTop(0);\n      }\n    });\n\n    $(this._el).on('change', 'input[type=\"checkbox\"]', (e) => {\n      this._toggleCheckbox(e.currentTarget);\n    }).on('change', `.${Screener.CssClass.TOGGLE}`, (e) => {\n      this._handleToggler(e.currentTarget);\n    }).on('change', `.${Screener.CssClass.ADD_SECTION}`, (e) => {\n      this._addMatrixSection(e.currentTarget);\n    }).on('change', `.${Screener.CssClass.MATRIX_SELECT}`, (e) => {\n      this._toggleMatrix(e.currentTarget);\n    }).on('click', `.${Screener.CssClass.VALIDATE_STEP}`, (e) => {\n      const $step = $(e.currentTarget).closest(`.${Screener.CssClass.STEP}`);\n      return this._validateStep($step);\n    }).on('click', `.${Screener.CssClass.SUBMIT}`, (e) => {\n      if (!this._recaptchaRequired) {\n        this._submit($(e.currentTarget).data('action'));\n      } else {\n        $(e.currentTarget).closest(`.${Screener.CssClass.STEP}`)\n          .find(`.${Screener.CssClass.ERROR_MSG}`).remove();\n        if (this._recaptchaVerified) {\n          this._submit($(e.currentTarget).data('action'));\n        } else {\n          this._showError($('#screener-recaptcha')[0],\n              Screener.ErrorMessage.REQUIRED);\n        }\n      }\n    }).on('blur', '[data-type=\"integer\"]', (e) => {\n      this._validateIntegerField(e.currentTarget);\n    }).on('blur', '[data-type=\"float\"]', (e) => {\n      this._validateFloatField(e.currentTarget);\n    }).on('blur', '[data-type=\"zip\"]', (e) => {\n      this._validateZipField(e.currentTarget);\n    }).on('blur', '[data-type=\"age\"]', (e) => {\n      this._validateIntegerField(e.currentTarget);\n    }).on('keyup', '[data-type=\"float\"]', (e) => {\n      this._limitFloatFieldLength(e.currentTarget);\n    }).on('keydown', 'input[type=\"number\"]', (e) => {\n      // Number inputs still allow certain characters outside of 0-9.\n      if (e.keyCode === 69 || // 'e' key, used for scientific notation\n          e.keyCode === 187 || // '=' key (for the '+' sign)\n          e.keyCode === 188 || // ',' key\n          e.keyCode === 189) { // '-' key\n        e.preventDefault();\n      }\n    }).on('click', `.${Screener.CssClass.REMOVE_PERSON}`, (e) => {\n      this._removePerson(parseInt($(e.currentTarget).data('person'), 10))\n          ._renderRecap();\n    }).on('click', `.${Screener.CssClass.EDIT_PERSON}`, (e) => {\n      this._editPerson(parseInt($(e.currentTarget).data('person'), 10));\n    }).on('keyup', 'input[maxlength]', (e) => {\n      this._enforceMaxLength(e.currentTarget);\n    }).on('submit', (e) => {\n      e.preventDefault();\n      this._$steps.filter(`.${Screener.CssClass.ACTIVE}`)\n        .find(`.${Screener.CssClass.VALIDATE_STEP},` +\n        `.${Screener.CssClass.SUBMIT}`).trigger('click');\n    });\n\n    // Determine whether or not to initialize ReCAPTCHA. This should be\n    // initialized only on every 10th view which is determined via an\n    // incrementing cookie.\n    let viewCount = Cookies.get('screenerViews') ?\n        parseInt(Cookies.get('screenerViews'), 10) : 1;\n    if (viewCount >= 10) {\n      this._initRecaptcha();\n      viewCount = 0;\n    }\n    // `2/1440` sets the cookie to expire after two minutes.\n    Cookies.set('screenerViews', ++viewCount, {\n      expires: (2/1440),\n      path: Screener.CookiePath\n    });\n\n    if (Utility.getUrlParameter('debug') === '1') {\n      if (window.location.hash) {\n        this._goToStep($(window.location.hash)[0]);\n      }\n    } else {\n      window.location.hash = this._$steps.eq(0).attr('id');\n      this._goToStep(this._$steps[0]);\n    }\n\n    this._scenarioAnalysis();\n\n    return this;\n  }\n\n  /**\n   * View Tracking for Webtrends and Google Analytics\n   */\n  _scenarioAnalysis() {\n    let key = '';\n    let data = [];\n\n    $(window).on('hashchange load', function() {\n      let hash = window.location.hash;\n      let step = $(hash);\n      key = step.data('trackKey');\n      data = step.data('trackData');\n      Utility.trackView('Eligibility', key, data);\n      if (hash === '#step-8') data = [];\n    });\n\n    $('#step-8').on('change', 'label', (event) => {\n      data = $(event.currentTarget).data('trackData');\n    });\n\n    $('[href=\"#step-9\"]').on('click', function() {\n      if (typeof data === 'undefined') {\n        data = $('#step-8-hoh').data('trackData');\n      }\n      Utility.trackView('Eligibility', key, data);\n    });\n  }\n\n  /**\n   * Asynchronously loads the Google recaptcha script and sets callbacks for\n   * load, success, and expiration.\n   * @private\n   * @return {this} Screener\n   */\n  _initRecaptcha() {\n    const $script = $(document.createElement('script'));\n    $script.attr('src',\n        'https://www.google.com/recaptcha/api.js' +\n        '?onload=screenerCallback&render=explicit').prop({\n      async: true,\n      defer: true\n    });\n\n    window.screenerCallback = () => {\n      window.grecaptcha.render(document.getElementById('screener-recaptcha'), {\n        'sitekey': Utility.CONFIG.GRECAPTCHA_SITE_KEY,\n        'callback': 'screenerRecaptcha',\n        'expired-callback': 'screenerRecaptchaReset'\n      });\n      $('#screener-recaptcha-container').removeClass(Screener.CssClass.HIDDEN);\n      this._recaptchaRequired = true;\n    };\n\n    window.screenerRecaptcha = () => {\n      this._recaptchaVerified = true;\n      this._removeError(document.getElementById('screener-recaptcha'));\n    };\n\n    window.screenerRecaptchaReset = () => {\n      this._recaptchaVerified = false;\n    };\n\n    this._recaptchaRequired = true;\n    $('head').append($script);\n    return this;\n  }\n\n  /**\n   * Adds and removes active classes to a checkbox. Also appropriate toggles\n   * any \"none of these\" type checkboxes.\n   * @param {HTMLElement} el - checkbox input\n   * @return {this} Screener\n   */\n  _toggleCheckbox(el) {\n    const $checkbox = $(el);\n    const $group = $checkbox.closest(`.${Screener.CssClass.CHECKBOX_GROUP}`);\n    if ($checkbox.prop('checked')) {\n      if ($checkbox.hasClass(Screener.CssClass.CLEAR_GROUP)) {\n        $group.find('input[type=\"checkbox\"]').not(el).prop('checked', false)\n            .trigger('change');\n      } else {\n        $group.find(`.${Screener.CssClass.CLEAR_GROUP}`).prop('checked', false)\n            .trigger('change');\n      }\n    } else {\n      if ($group.find('input[type=\"checkbox\"]:checked').length === 0) {\n        $group.find(`.${Screener.CssClass.CLEAR_GROUP}`)\n            .prop('checked', true).trigger('change');\n      }\n    }\n    return this;\n  }\n\n  /**\n   * For a given input, if it has the \"toggles\" data attribute, show or hide\n   * another element selected by the toggles values based on the value of the\n   * input. If the input has a \"shows\" or \"hides\" data attribute, show or hide\n   * relevant element accordingly.\n   * @private\n   * @param {HTMLElement} el - Input/select element.\n   * @return {this} Screener\n   */\n  _handleToggler(el) {\n    const $el = $(el);\n    if ($el.data('toggles')) {\n      const $target = $($el.data('toggles'));\n      if (\n          ($el.prop('checked') && Boolean(parseInt($el.val(), 10))) ||\n          ($el.is('select') && $el.val())\n      ) {\n        $target.removeClass(Screener.CssClass.HIDDEN);\n      } else {\n        $target.addClass(Screener.CssClass.HIDDEN);\n      }\n    }\n    if ($el.data('shows')) {\n      $($el.data('shows')).removeClass(Screener.CssClass.HIDDEN);\n    }\n    if ($el.data('hides')) {\n      $($el.data('hides')).addClass(Screener.CssClass.HIDDEN);\n    }\n    return this;\n  }\n\n  /**\n   * For a given element with a maxlength attribute, enforce the maxlength rule.\n   * This is necessary because input[type=\"number\"] elements ignrore the\n   * attribute natively.\n   * element.\n   * @private\n   * @param {HTMLElement} el\n   * @return {this} Screener\n   */\n  _enforceMaxLength(el) {\n    const $input = $(el);\n    const maxlength = parseInt($input.attr('maxlength'), 10);\n    const val = $input.val();\n    if (val.length > maxlength) {\n      $input.val(val.slice(0, maxlength));\n    }\n    return this;\n  }\n\n  /**\n   * For a repeatable matrix, like incomes or expenses, this adds\n   * the next section based on data attributes from a triggering element.\n   * @private\n   * @param {HTMLElement} el\n   * @return {this} Screener\n   */\n  _addMatrixSection(el) {\n    const $el = $(el);\n    const $target = $($el.data('renders'));\n    const template = $(`#screener-${$el.data('matrix')}-template`).html();\n    const renderedTemplate = _.template(template)({\n      personIndex: parseInt($el.data('personIndex'), 10) || 0,\n      matrixIndex: parseInt($el.data('matrixIndex'), 10) || 0\n    });\n    const $renderTarget = $el.data('renderTarget') ?\n        $($el.data('renderTarget')) :\n        $el.closest(`.${Screener.CssClass.MATRIX}`);\n    if ($target.length) {\n      $target.removeClass(Screener.CssClass.HIDDEN);\n    } else if (!$el.data('renderTarget') ||\n        !$renderTarget.find(`.${Screener.CssClass.MATRIX_ITEM}`).length) {\n      $renderTarget.append(renderedTemplate);\n    }\n    return this;\n  }\n\n  /**\n   * For a select element in a repeating matrix, if a value exists for the\n   * selected option, update the labels within the matrix item based on the\n   * select element's value. Otherwise, remove it.\n   * @private\n   * @param {HTMLElement} el\n   * @return {this} Screener\n   */\n  _toggleMatrix(el) {\n    const $el = $(el);\n    const $matrixItem = $el.closest(`.${Screener.CssClass.MATRIX_ITEM}`);\n    if ($el.val()) {\n      $matrixItem.find(Screener.Selectors.TRANSACTION_LABEL)\n          .text($el.find('option:selected').text());\n    } else if (!$matrixItem.is(':last-of-type')) {\n      $matrixItem.remove();\n    }\n    return this;\n  }\n\n  /**\n   * Adds the active class to the provided section. Removes it from all other\n   * sections.\n   * @param {HTMLElement} section - section to activate.\n   * @return {this} Screener\n   */\n  _goToStep(section) {\n    this._$steps\n        .removeClass(Screener.CssClass.SCREENER_STEP_ACTIVE)\n        .addClass(Screener.CssClass.SCREENER_STEP_HIDDEN)\n        .attr('aria-hidden', 'true').find(':input, a').attr('tabindex', '-1')\n        .end().filter(section)\n        .removeClass(Screener.CssClass.SCREENER_STEP_HIDDEN)\n        .addClass(Screener.CssClass.SCREENER_STEP_ACTIVE)\n        .removeAttr('aria-hidden').find(':input, a').removeAttr('tabindex');\n\n    if ($(section).attr('id') === 'step-9') {\n      // add in family members here\n      const members = [];\n      _.each(this._people.slice(0,\n          this._household.get('members')), (person, i) => {\n        const member = {\n          age: person.get('age'),\n          isHoh: person.get('headOfHousehold'),\n          relation: Utility.localize(person.get('headOfHouseholdRelation'))\n        };\n        if (person.get('headOfHousehold')) {\n          if (i === 0) {\n            member.relation = Utility.localize('Self');\n          } else {\n            member.relation = Utility.localize('HeadOfHousehold');\n          }\n        }\n        members.push(member);\n      });\n      const summaryTemplate = $('#screener-member-summary-template').html();\n      const renderedSummaryTemplate = _.template(summaryTemplate)({\n        members: members\n      });\n      $('#screener-household-summary').html(renderedSummaryTemplate);\n\n      // Render member form.\n      let personIndex = null;\n      if ($(section).data('personIndex')) {\n        personIndex = parseInt($(section).data('personIndex'), 10);\n      } else {\n        personIndex = this._people.length;\n        $(section).data('personIndex', personIndex);\n      }\n      const formTemplate = $('#screener-member-template').html();\n      const templateData = {\n        personIndex: personIndex,\n        person: new ScreenerPerson().toObject(),\n        localize: Utility.localize\n      };\n\n      if (this._people[personIndex]) {\n        templateData.person = this._people[personIndex].toObject();\n      }\n\n      const renderedFormTemplate = _.template(formTemplate)(templateData);\n      $('#screener-household-member').html(renderedFormTemplate);\n    }\n\n    if ($(section).attr('id') === 'step-10') {\n      // add in family members here\n      const template = $('#screener-member-option-template').html();\n      const people = [];\n      _.each(this._people, (person, i) => {\n        const obj = {\n          age: person.get('age'),\n          owner: person.get('livingOwnerOnDeed'),\n          leasee: person.get('livingRentalOnLease')\n        };\n        if (i === 0) {\n          obj.relation = Utility.localize('Self');\n        } else if (person.get('headOfHousehold')) {\n          obj.relation = Utility.localize('HeadOfHousehold');\n        } else {\n          obj.relation =\n              Utility.localize(person.get('headOfHouseholdRelation'));\n        }\n        people.push(obj);\n      });\n\n      const ownerTemplate = _.template(template)({\n        attribute: 'livingOwnerOnDeed',\n        people: people\n      });\n      $('#screener-possible-owners').html(ownerTemplate);\n\n      const leaseeTemplate = _.template(template)({\n        attribute: 'livingRentalOnLease',\n        people: people\n      });\n      $('#screener-possible-leasees').html(leaseeTemplate);\n    }\n\n    if ($(section).attr('id') === 'recap') {\n      this._renderRecap();\n    }\n\n    let stepTitle = $(section).find('[data-js=\"step-title\"]').text();\n    $('title').text(`${stepTitle} - ${this._baseTitle}`);\n\n    return this;\n  }\n\n  /**\n   * Validate and process data for each section.\n   * @param {jQuery} $step - step to validate\n   * @return {boolean} whether the step is valid\n   */\n  _validateStep($step) {\n    const stepId = $step.attr('id');\n    $step.find(`.${Screener.CssClass.ERROR}`)\n        .removeClass(Screener.CssClass.ERROR).end()\n        .find(`.${Screener.CssClass.ERROR_MSG}`).remove();\n\n    $step.find(':input:visible').filter('[required]').each((i, el) => {\n      this._validateRequiredField(el);\n    }).end().filter('[data-type=\"integer\"]').each((i, el) => {\n      this._validateIntegerField(el);\n    }).end().filter('[data-type=\"float\"]').each((i, el) => {\n      this._validateFloatField(el);\n    }).end().filter('[name=\"Household.zip\"]').each((i, el) => {\n      this._validateZipField(el);\n    });\n\n    const $errors = $step.find(`.${Screener.CssClass.ERROR}:visible`);\n    if ($errors.length) {\n      const $firstError = $errors.first()\n        .closest(Screener.Selectors.QUESTION);\n\n      $firstError.find(':input').first().focus();\n      $(window).scrollTop($firstError.offset().top);\n\n      return false;\n    }\n\n    let stepValid = true;\n\n    switch (stepId) {\n      case 'step-1': {\n        // Add program categories.\n        const categories = [];\n        $step.find('input[name=\"category\"]:checked').each((i, el) => {\n          categories.push($(el).val());\n        });\n        this._categories = categories;\n        break;\n      }\n      case 'step-2': {\n        // Nothing to process here.\n        break;\n      }\n      case 'step-3': {\n        // Set submitter age and household.\n        this._people[0].set('age',\n            parseInt($step.find('input[name=\"Person[0].age\"]').val(), 10));\n        this._household.set('city', 'NYC')\n            .set('zip', $step.find('input[name=\"Household.zip\"]').val());\n        break;\n      }\n      case 'step-4': {\n        // Set all checked attributes. Unset any that are not checked.\n        $step.find(`.${Screener.CssClass.CHECKBOX_GROUP}`).find(':input')\n            .each((i, el) => {\n              if ($(el).val() && $(el).attr('name')) {\n                const key = $(el).attr('name').split('.')[1];\n                if ($(el).is(':visible') && $(el).is(':checked')) {\n                  this._people[0].set(key, Screener.getTypedVal(el));\n                } else {\n                  this._people[0].set(key, false);\n                }\n              }\n            });\n        // Set the attribute according to the radio button value.\n        $step.find(`.${Screener.CssClass.RADIO_GROUP}`)\n            .find(':input:checked').each((i, el) => {\n              if ($(el).val() && $(el).attr('name')) {\n                const key = $(el).attr('name').split('.')[1];\n                if ($(el).is(':visible')) {\n                  if ($(el).is(':checked')) {\n                    this._people[0].set(key, Screener.getTypedVal(el));\n                  }\n                } else {\n                  this._people[0].set(key, false);\n                }\n              }\n            });\n        break;\n      }\n      case 'step-5':\n      case 'step-6': {\n        // For step 5, add incomes. For step 6, add expenses.\n        const key = stepId === 'step-5' ? 'incomes' : 'expenses';\n        const person = this._people[0];\n        person.set(key, []);\n        $step.find('[name$=\"amount\"]').filter(':visible').each((i, el) => {\n          const itemIndex = $(el).attr('name').split('[').pop().split(']')[0];\n          const amount = Screener.getTypedVal(el);\n          const type = Screener.getTypedVal(\n              $step.find(`[name=\"Person[0].${key}[${itemIndex}].type\"]`)[0]);\n          const frequency = Screener.getTypedVal($step\n              .find(`[name=\"Person[0].${key}[${itemIndex}].frequency\"]`)[0]);\n          if (amount && type && frequency) {\n            if (key === 'incomes') {\n              person.addIncome(amount, type, frequency);\n            } else {\n              person.addExpense(amount, type, frequency);\n            }\n          }\n        });\n        break;\n      }\n      case 'step-7': {\n        const $memberInput =\n            $step.find('input[name=\"Household.members\"]');\n        const memberCount = Screener.getTypedVal($memberInput[0]);\n\n        // Verify that the inputted value is at least one and not greater than\n        // the maximum household size.\n        if (memberCount < 1 ||\n            memberCount > Utility.CONFIG.SCREENER_MAX_HOUSEHOLD) {\n          this._showError($memberInput[0], Screener.ErrorMessage.HOUSEHOLD);\n          $(window).scrollTop(0);\n          stepValid = false;\n        } else {\n          this._household.set('members', memberCount);\n        }\n        // If there is only one member, ensure that they are the head of the\n        // household and proceed to the final step, returning `false` to\n        // prevent the default hash change.\n        if (memberCount === 1) {\n          this._people[0].set({\n            headOfHousehold: true,\n            headOfHouseholdRelation: ''\n          });\n          window.location.hash = '#step-10';\n          return false;\n        }\n        break;\n      }\n      case 'step-8':\n      case 'step-9': {\n        const personIndex = stepId === 'step-9' ? $step.data('personIndex') : 1;\n        const member = this._people[personIndex] || new ScreenerPerson();\n        // If this is step 8 set up the Head of the Household Relationship\n        // for the submitter.\n        if (stepId === 'step-8') {\n          const $hohInput =\n              $step.find('input[name=\"Person[0].headOfHousehold\"]:checked');\n          // If the current user is the HoH, update their status and break.\n          if (Screener.getTypedVal($hohInput[0])) {\n            this._people[0].set({\n              headOfHousehold: true,\n              headOfHouseholdRelation: ''\n            });\n            break;\n          } else {\n            member.set('headOfHousehold', true);\n            this._people[0].set({\n              headOfHousehold: false,\n              headOfHouseholdRelation: $step\n                  .find('select[name=\"Person[0].headOfHouseholdRelation\"]')\n                  .val()\n            });\n          }\n        } else {\n          // Set member's relations to HOH.\n          member.set({\n            headOfHousehold: false,\n            headOfHouseholdRelation: $step.find(\n              `select[name=\"Person[${personIndex}].headOfHouseholdRelation\"]`)\n              .val()\n            });\n        }\n\n        member.set('age', Screener.getTypedVal($step\n            .find(`input[name=\"Person[${personIndex}].age\"]`)[0]));\n\n        // Set member attributes and benefits (checkbox groups)\n        $step.find(`.${Screener.CssClass.CHECKBOX_GROUP}`)\n            .find('input') // get all checkboxes...\n            .filter(`[name^=\"Person[${personIndex}]\"]`)\n            .each((i, el) => {\n              const key = $(el).attr('name').split('.')[1];\n               // ...and set them to their prop value\n              member.set(key, $(el).prop('checked'));\n            });\n\n        // Set member attrs for radio button groups\n        $step.find(`.${Screener.CssClass.RADIO_GROUP}`)\n            .find('input:checked') // only get checked radios...\n            .filter(`[name^=\"Person[${personIndex}]\"]`)\n            .each((i, el) => {\n              const key = $(el).attr('name').split('.')[1];\n              // ...and set them to their typed value\n              member.set(key, Screener.getTypedVal(el));\n            });\n\n        // Add income and expenses.\n        member.set({\n          incomes: [],\n          expenses: []\n        });\n        _.each(['incomes', 'expenses'], (key) => {\n          $step.find('[name$=\"amount\"]').filter(':visible')\n              .filter(`[name*=\"${key}\"]`).each((i, el) => {\n            const itemIndex = $(el).attr('name').split('[').pop().split(']')[0];\n            const amount = Screener.getTypedVal(el);\n            const type = Screener.getTypedVal($step.find(\n                `[name=\"Person[${personIndex}].${key}[${itemIndex}]` +\n                `.type\"]`)[0]);\n            const frequency = Screener.getTypedVal($step.find(\n                `[name=\"Person[${personIndex}].${key}[${itemIndex}]` +\n                `.frequency\"]`)[0]);\n            if (amount && type && frequency) {\n              if (key === 'incomes') {\n                member.addIncome(amount, type, frequency);\n              } else {\n                member.addExpense(amount, type, frequency);\n              }\n            }\n          });\n        });\n\n        this._people[personIndex] = member;\n\n        if (stepId === 'step-8') {\n          // If adding a HoH meets the household size, skip ahead to step 10.\n          if (this._people.length >= this._household.get('members')) {\n            window.location.hash = '#step-10';\n            return false;\n          }\n        } else {\n          // If we need to add more non-HoH household members, repeat this step.\n          if (this._people.length < this._household.get('members')) {\n            $step.data('personIndex', personIndex + 1);\n            this._goToStep($step[0]);\n            $(window).scrollTop(0);\n            return false;\n          }\n        }\n        break;\n      }\n      case 'step-10': {\n        // Big hack fix here. For some reason, the previous break statement\n        // just two lines up doesn't actually break out of the switch\n        // (tested in Chrome) and will fire this case. So we are doing an\n        // additional check to make sure we are only handling the apprpirate\n        // case in  question.\n        if (stepId !== 'step-10') {\n          break;\n        }\n        // End big hack fix.\n\n        // Set the type of the household.\n        $step.find('input[name^=\"Household\"]').each((i, el) => {\n          if ($(el).val()) {\n            const key = $(el).attr('name').split('.')[1];\n            if ($(el).prop('checked')) {\n              this._household.set(key, Screener.getTypedVal(el));\n            } else {\n              this._household.set(key, false);\n            }\n          }\n        });\n\n        // Set or unset the household members who are on the lease or deed.\n        _.each(['livingOwnerOnDeed', 'livingRentalOnLease'], (type) => {\n          const $inputs = $step.find(`input[name$=\"${type}\"]:visible`);\n          if ($inputs.length) {\n            if ($inputs.filter(':checked').length) {\n              $inputs.each((i, el) => {\n                const personIndex =\n                    parseInt($(el).attr('name').split(']')[0].split('[')[1],\n                    10);\n                const person = this._people[personIndex];\n                if (person) {\n                  person.set(type, $(el).prop('checked'));\n                }\n              });\n            } else {\n              this._showError($inputs[0], Screener.ErrorMessage.REQUIRED);\n              // If the screener step is not yet invalid, scroll to the first\n              // error.\n              if (stepValid) {\n                $(window).scrollTop(0);\n              }\n              stepValid = false;\n            }\n          } else {\n            _.each(this._people, (person) => {\n              person.set(type, false);\n            });\n          }\n        });\n\n        // Set the rental type.\n        const $rentalType =\n            $step.find('select[name=\"Household.livingRentalType\"]');\n        if ($rentalType.is(':visible')) {\n          this._household.set('livingRentalType', $rentalType.val());\n        } else {\n          this._household.set('livingRentalType', '');\n        }\n\n        this._household.set('cashOnHand', Screener.getTypedVal($step\n            .find('input[name=\"Household.cashOnHand\"]')));\n\n        break;\n      }\n\n      default: {\n        stepValid = false;\n        break;\n      }\n    }\n\n    return stepValid;\n  }\n\n  /**\n   * Removes error messages on a given input.\n   * @param {HTMLELement} el - Input element.\n   * @return {this} Screener\n   */\n  _removeError(el) {\n    $(el).closest(Screener.Selectors.QUESTION_CONTAINER)\n        .removeClass(Screener.CssClass.ERROR)\n        .find(`.${Screener.CssClass.ERROR_MSG}`).remove();\n    return this;\n  }\n\n  /**\n   * Displays an error message by taking an input element, finding its\n   * container, adding an error class to it, and then prepending an error\n   * message to the container.\n   * @param {HTMLELement} el - Input element in error.\n   * @param {string} msg - Error message to display.\n   * @return {this} Screener\n   */\n  _showError(el, msg) {\n    const $error = $(document.createElement('div'));\n    $error.attr('aria-live', 'polite');\n    $error.addClass(Screener.CssClass.ERROR_MSG).text(Utility.localize(msg));\n    $(el).closest(Screener.Selectors.QUESTION_CONTAINER)\n        .addClass(Screener.CssClass.ERROR).prepend($error);\n    return this;\n  }\n\n  /**\n   * For a given input, checks for whether it is checked or has a value. If it\n   * does not, displays an error message and binds an event listener that\n   * that reruns validation on change.\n   * @param {HTMLELement} el - Input element to validate.\n   * @return {this} Screener\n   */\n  _validateRequiredField(el) {\n    const $input = $(el);\n    this._removeError(el);\n    if ((($input.attr('type') === 'checkbox' ||\n        $input.attr('type') === 'radio') && !$input.prop('checked')) ||\n        (($input.attr('type') !== 'checkbox' ||\n        $input.attr('type') !== 'radio') && !$input.val())) {\n      // if ($input.attr('data-type')) {\n      //   this._showError(el,\n      //     Screener.ErrorMessage[$input.attr('data-type').toUpperCase()]\n      //   );\n      // } else {\n      this._showError(el, Screener.ErrorMessage.REQUIRED);\n      // }\n      $input.one('change keyup', () => {\n        this._validateRequiredField(el);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * For a given input, if the input has a value and can be coerced to a\n   * positive integer then enforce that. Otherwise, show an error message.\n   * @param {HTMLELement} el - Input element to validate.\n   * @return {this} Screener\n   */\n  _validateIntegerField(el) {\n    const $input = $(el);\n    const val = $input.val();\n    this._removeError(el);\n\n    // If there is a value for the element, make sure that it is rounded to\n    // an integer and not negative.\n    if (val && !_.isNaN(parseInt(val, 10)) && _.isNumber(parseInt(val, 10))) {\n      let parsed = Math.abs(parseInt(val, 10));\n      $input.val(parsed);\n    } else if (val) {\n      // Otherwise, show an error message as long as a value was entered.\n      this._showError(el, Screener.ErrorMessage.INTEGER);\n      $input.one('keyup', () => {\n        this._validateIntegerField(el);\n      });\n    } else if ($input.prop('required')) {\n      this._validateRequiredField(el);\n    }\n\n    return this;\n  }\n\n  /**\n   * For a given input, if the input has a value and can be coerced to a\n   * float with two decimal points then enforce that. Otherwise, show an error\n   * message.\n   * @param {HTMLELement} el - Input element to validate.\n   * @return {this} Screener\n   */\n  _validateFloatField(el) {\n    const $input = $(el);\n    const val = $input.val();\n    this._removeError(el);\n\n    // If there is a value for the element, make sure that it is rounded to\n    // an integer and not negative.\n    if (val && !_.isNaN(parseFloat(val)) && _.isNumber(parseFloat(val))) {\n      let sanitizedVal = val.replace(/[eE\\+\\-]+/g, '');\n      $input.val(Utility.toDollarAmount(sanitizedVal));\n    } else if (val) {\n      // Otherwise, show an error message as long as a value was entered.\n      this._showError(el, Screener.ErrorMessage.FLOAT);\n      $input.one('change', () => {\n        this._validateFloatField(el);\n      });\n    } else if ($input.prop('required')) {\n      this._validateRequiredField(el);\n    }\n\n    return this;\n  }\n\n  /**\n   * For a given dollar float input, product requirements dictate we should\n   * limit values to 6 digits before the decimal point and 2 after.\n   * @param {HTMLELement} el - Input element to validate.\n   * @return {this} Screener\n   */\n  _limitFloatFieldLength(el) {\n    const $input = $(el);\n    const val = $input.val();\n    const components = val.split('.');\n    let valAltered = false;\n    _.each(components, (component, i) => {\n      const maxlength = i === 0 ? 6 : 2;\n      if (component.length > maxlength) {\n        components[i] = component.slice(0, maxlength);\n        valAltered = true;\n      }\n    });\n    if (valAltered) {\n      $input.val(components.join('.'));\n    }\n    return this;\n  }\n\n  /**\n   * Checks to see if the input's value is a valid NYC zip code.\n   * @param {HTMLELement} el - Input element to validate.\n   * @return {this} Screener\n   */\n  _validateZipField(el) {\n    const $input = $(el);\n    const val = $input.val();\n    this._removeError(el);\n\n    if (val) {\n      const formattedVal = val.substring(0, 5);\n      if (Screener.NYC_ZIPS.indexOf(formattedVal) >= 0) {\n        $input.val(formattedVal);\n      } else {\n        this._showError(el, Screener.ErrorMessage.ZIP);\n        $input.one('keyup', () => {\n          this._validateZipField(el);\n        });\n      }\n    } else if ($input.prop('required')) {\n      this._validateRequiredField(el);\n    }\n\n    return this;\n  }\n\n  /**\n   * Assembles data for the recap view and renders the recap template.\n   * @private\n   * @return {this} Screener\n   */\n  _renderRecap() {\n    const templateData = {\n      categories: [],\n      household: {\n        assets: `$${this._household.get('cashOnHand')}`,\n        owners: [],\n        rentalType: '',\n        renters: [],\n        types: [],\n        zip: this._household.get('zip')\n      },\n      members: []\n    };\n\n    // Add programs.\n    _.each(this._categories, (category) => {\n      const obj = {\n        slug: category,\n        label: Utility.localize(category)\n      };\n      templateData.categories.push(obj);\n    });\n\n    const housingTypes = [\n      'Renting',\n      'Owner',\n      'StayingWithFriend',\n      'Hotel',\n      'Shelter',\n      'PreferNotToSay'\n    ];\n\n    // Add housing type.\n    _.each(housingTypes, (type) => {\n      if (this._household.get(`living${type}`)) {\n        const obj = {\n          slug: type,\n          label: Utility.localize(`living${type}`)\n        };\n\n        templateData.household.types.push(obj);\n      }\n\n      if (type === 'Renting') {\n        templateData.household.rentalType =\n            Utility.localize(this._household.get('livingRentalType'));\n      }\n    });\n\n    // Add household member data.\n    _.each(this._people.slice(0, this._household.get('members')),\n        (person, i) => {\n      const member = {\n        age: person.get('age'),\n        benefits: [],\n        conditions: [],\n        expenses: [],\n        incomes: [],\n        isHoh: person.get('headOfHousehold'),\n        relation: Utility.localize(person.get('headOfHouseholdRelation'))\n      };\n\n      if (person.get('headOfHousehold')) {\n        if (i === 0) {\n          member.relation = Utility.localize('Self');\n        } else {\n          member.relation = Utility.localize('HeadOfHousehold');\n        }\n      }\n\n      _.each(person.getBenefits(), (value, key) => {\n        if (value) {\n          member.benefits.push(Utility.localize(key));\n        }\n      });\n\n      _.each(person.getConditions(), (value, key) => {\n        if (value) {\n          member.conditions.push(Utility.localize(key));\n        }\n      });\n\n      _.each(['incomes', 'expenses'], (type) => {\n        _.each(person.get(type), (item) => {\n          const obj = {\n            amount: `$${item.amount}`,\n            type: Utility.localize(item.type),\n            frequency: Utility.localize(item.frequency)\n          };\n          member[type].push(obj);\n        });\n      });\n\n      _.each(['livingOwnerOnDeed', 'livingRentalOnLease'], (type) => {\n        if (person.get(type)) {\n          const obj = {};\n          if (person.get('headOfHousehold')) {\n            obj.slug = i === 0 ? 'Self' : 'HeadOfHousehold';\n          } else {\n            obj.slug = person.get('headOfHouseholdRelation');\n          }\n          obj.label = Utility.localize(obj.slug);\n          if (type === 'livingOwnerOnDeed') {\n            templateData.household.owners.push(obj);\n          } else {\n            templateData.household.renters.push(obj);\n          }\n        }\n      });\n\n      templateData.members.push(member);\n    });\n\n    const template = $('#screener-recap-template').html();\n    const renderedTemplate = _.template(template)(templateData);\n    $('#recap-body').html(renderedTemplate);\n    return this;\n  }\n\n  /**\n   * Removes a user at index `i` from this._people.\n   * @private\n   * @param {Number} i - index of user.\n   * @return {this} Screener\n   */\n  _removePerson(i) {\n    this._people.splice(i, 1);\n    this._household.set('members', this._people.length);\n    $(this._el).find('input[name=\"Household.members\"]')\n        .val(this._people.length);\n    return this;\n  }\n\n  /**\n   * Navigates the user to the edit screen for the person at index `i`\n   * in this._people. If `i` is 0, then the user goes to step 3. If it is 1\n   * and that person is Head of the Household, go to step 8. Otherwise, set\n   * the proper data attribute of step 9 and navigate there.\n   * @private\n   * @param {Number} i - index of user.\n   * @return {this} Screener\n   */\n  _editPerson(i) {\n    if (i === 0) {\n      window.location.hash = '#step-3';\n    } else if (i === 1 && this._people[i].get('headOfHousehold')) {\n      window.location.hash = '#step-8';\n    } else {\n      $('#step-9').data('personIndex', i);\n      window.location.hash = '#step-9';\n    }\n    return this;\n  }\n\n  /**\n   * Returns the JSON object for Drools submission.\n   * @private\n   * @return {object} drools JSON\n   */\n  _getDroolsJSON() {\n    const droolsJSON = {\n      lookup: 'KieStatelessSession',\n      commands: []\n    };\n    // Insert Household data.\n    droolsJSON.commands.push({\n      insert: {\n        object: {\n          'accessnyc.request.Household': this._household.toObject()\n        }\n      }\n    });\n    // Insert Person data.\n    _.each(this._people.slice(0, this._household.get('members')),\n        (person) => {\n      if (person) {\n        droolsJSON.commands.push({\n          insert: {\n            object: {\n              'accessnyc.request.Person': person.toObject()\n            }\n          }\n        });\n      }\n    });\n    // Additional Drools commands.\n    droolsJSON.commands.push({\n      'fire-all-rules': {\n        'out-identifier': 'rulesFiredCountOut'\n      }\n    });\n    droolsJSON.commands.push({\n      query: {\n        'name': 'findEligibility',\n        'arguments': [],\n        'out-identifier': 'eligibility'\n      }\n    });\n\n    // This Drools command outputs a large number of debugging variables that\n    // are not necessary for production.\n    if (Utility.getUrlParameter('debug') === '1') {\n      droolsJSON.commands.push({\n        'get-objects': {\n          'out-identifier': 'getObjects'\n        }\n      });\n    }\n\n    return droolsJSON;\n  }\n\n  /**\n   * Submits the JSON payload to Drools.\n   * @private\n   * @param {string} postUrl - AJAX URL destination.\n   * @return {jqXHR}\n   */\n  _submit(postUrl) {\n    /* eslint-disable no-console, no-debugger */\n    if (Utility.getUrlParameter('debug') === '1') {\n      console.dir(this);\n      console.log(this._getDroolsJSON());\n      console.log(JSON.stringify(this._getDroolsJSON()));\n      debugger;\n    }\n    /* eslint-enable no-console, no-debugger */\n\n    return $.ajax({\n      url: postUrl,\n      type: 'post',\n      data: {\n        action: 'drools',\n        data: this._getDroolsJSON()\n      }\n    }).done((data) => {\n      /* eslint-disable no-console, no-debugger */\n      if (Utility.getUrlParameter('debug') === '1') {\n        console.log(data);\n        console.log(JSON.stringify(data));\n        debugger;\n      }\n      /* eslint-enable no-console, no-debugger */\n\n      if (data.type !== 'SUCCESS') {\n        // TODO(jjandoc): Add error handler.\n        /* eslint-disable no-console, no-debugger */\n        if (Utility.getUrlParameter('debug') === '1') {\n          console.error(data);\n          debugger;\n        }\n        /* eslint-enable no-console, no-debugger */\n      }\n      const programs = _.chain(Utility.findValues(data, 'code'))\n          .filter((item) => _.isString(item)).uniq().value();\n      const params = {};\n      if (this._categories.length) {\n        params.categories = this._categories.join(',');\n      }\n      if (programs.length) {\n        params.programs = programs.join(',');\n      }\n      if ('GUID' in data) {\n        params.guid = data.GUID;\n      }\n      params.date = Math.floor(Date.now() / 1000);\n      // For security, reset the form before redirecting so that results are\n      // not visible when someone hits back on their browser.\n      this._el.reset();\n      window.location = `./results?${$.param(params)}`;\n    }).fail(function(error) {\n      // TODO(jjandoc): Display error messaging here.\n    });\n  }\n}\n\n/**\n * Returns the value of a supplied input in the type defined by a data-type\n * attribute on that input.\n * @param {HTMLElement} input\n * @return {boolean|Number|string} typed value\n */\nScreener.getTypedVal = function(input) {\n  const $input = $(input);\n  const val = $input.val();\n  let finalVal = $input.val();\n  switch ($input.data('type')) {\n    case Screener.InputType.BOOLEAN: {\n      finalVal = Boolean(parseInt(val, 10));\n      break;\n    }\n    case Screener.InputType.FLOAT: {\n      finalVal = (_.isNumber(parseFloat(val)) && !_.isNaN(parseFloat(val))) ?\n          parseFloat(val) : 0;\n      break;\n    }\n    case Screener.InputType.INTEGER: {\n      finalVal = (_.isNumber(parseInt(val, 10)) &&\n          !_.isNaN(parseInt(val, 10))) ?\n          parseInt($input.val(), 10) : 0;\n      break;\n    }\n  }\n  return finalVal;\n};\n\n/**\n * CSS classes used by this component.\n * @enum {string}\n */\nScreener.CssClass = {\n  ACTIVE: 'active',\n  ADD_SECTION: 'js-add-section',\n  CHECKBOX_GROUP: 'js-screener-checkbox-group',\n  CLEAR_GROUP: 'js-clear-group',\n  EDIT_PERSON: 'js-edit-person',\n  ERROR: 'error',\n  ERROR_MSG: 'error-message',\n  FORM: 'js-screener-form',\n  HIDDEN: 'hidden',\n  MATRIX: 'js-screener-matrix',\n  MATRIX_ITEM: 'js-matrix-item',\n  MATRIX_SELECT: 'js-matrix-select',\n  RADIO_GROUP: 'js-screener-radio-group',\n  REMOVE_PERSON: 'js-remove-person',\n  TOGGLE: 'js-screener-toggle',\n  SCREENER_STEP_ACTIVE: 'active animated fadeIn',\n  SCREENER_STEP_HIDDEN: 'hidden:overflow',\n  STEP: 'js-screener-step',\n  SUBMIT: 'js-screener-submit',\n  VALIDATE_STEP: 'js-screener-validate-step'\n};\n\n/**\n * Selectors for elements\n * @type {Object}\n */\nScreener.Selectors = {\n  QUESTION: '.c-question',\n  QUESTION_CONTAINER: '.c-question__container',\n  TRANSACTION_LABEL: '[data-js=\"transaction-label\"]'\n};\n\n/**\n * Localization labels of error messages.\n * @enum {string}\n */\nScreener.ErrorMessage = {\n  FLOAT: 'ERROR_FLOAT',\n  HOUSEHOLD: 'ERROR_HOUSEHOLD',\n  INTEGER: 'ERROR_INTEGER',\n  REQUIRED: 'ERROR_REQUIRED',\n  ZIP: 'ERROR_ZIP',\n  AGE: 'ERROR_AGE'\n};\n\n/**\n * data-type attributes used by this component.\n * @enum {string}\n */\nScreener.InputType = {\n  BOOLEAN: 'boolean',\n  FLOAT: 'float',\n  INTEGER: 'integer'\n};\n\n/**\n * Valid zip codes in New York City. Source:\n * https://data.cityofnewyork.us/City-Government/Zip-code-breakdowns/6bic-qvek\n * @type {array<String>}\n */\nScreener.NYC_ZIPS = ['10451', '10452', '10453', '10454', '10455', '10456',\n    '10457', '10458', '10459', '10460', '10461', '10462', '10463',\n    '10464', '10465', '10466', '10467', '10468', '10469', '10470',\n    '10471', '10472', '10473', '10474', '10475', '10499', '11201',\n    '11202', '11203', '11204', '11205', '11206', '11207', '11208',\n    '11209', '11210', '11211', '11212', '11213', '11214', '11215',\n    '11216', '11217', '11218', '11219', '11220', '11221', '11222',\n    '11223', '11224', '11225', '11226', '11228', '11229', '11230',\n    '11231', '11232', '11233', '11234', '11235', '11236', '11237',\n    '11238', '11239', '11240', '11241', '11242', '11243', '11244',\n    '11245', '11247', '11248', '11249', '11251', '11252', '11254',\n    '11255', '11256', '10001', '10002', '10003', '10004', '10005',\n    '10006', '10007', '10008', '10009', '10010', '10011', '10012',\n    '10013', '10014', '10015', '10016', '10017', '10018', '10019',\n    '10020', '10021', '10022', '10023', '10024', '10025', '10026',\n    '10027', '10028', '10029', '10030', '10031', '10032', '10033',\n    '10034', '10035', '10036', '10037', '10038', '10039', '10040',\n    '10041', '10043', '10044', '10045', '10046', '10047', '10048',\n    '10055', '10060', '10065', '10069', '10072', '10075', '10079',\n    '10080', '10081', '10082', '10087', '10090', '10094', '10095',\n    '10096', '10098', '10099', '10101', '10102', '10103', '10104',\n    '10105', '10106', '10107', '10108', '10109', '10110', '10111',\n    '10112', '10113', '10114', '10115', '10116', '10117', '10118',\n    '10119', '10120', '10121', '10122', '10123', '10124', '10125',\n    '10126', '10128', '10129', '10130', '10131', '10132', '10133',\n    '10138', '10149', '10150', '10151', '10152', '10153', '10154',\n    '10155', '10156', '10157', '10158', '10159', '10160', '10161',\n    '10162', '10163', '10164', '10165', '10166', '10167', '10168',\n    '10169', '10170', '10171', '10172', '10173', '10174', '10175',\n    '10176', '10177', '10178', '10179', '10184', '10185', '10196',\n    '10197', '10199', '10203', '10211', '10212', '10213', '10242',\n    '10249', '10256', '10257', '10258', '10259', '10260', '10261',\n    '10265', '10268', '10269', '10270', '10271', '10272', '10273',\n    '10274', '10275', '10276', '10277', '10278', '10279', '10280',\n    '10281', '10282', '10285', '10286', '11001', '11004', '11005',\n    '11040', '11096', '11101', '11102', '11103', '11104', '11105',\n    '11106', '11109', '11120', '11351', '11352', '11354', '11355',\n    '11356', '11357', '11358', '11359', '11360', '11361', '11362',\n    '11363', '11364', '11365', '11366', '11367', '11368', '11369',\n    '11370', '11371', '11372', '11373', '11374', '11375', '11377',\n    '11378', '11379', '11380', '11381', '11385', '11386', '11390',\n    '11405', '11411', '11412', '11413', '11414', '11415', '11416',\n    '11417', '11418', '11419', '11420', '11421', '11422', '11423',\n    '11424', '11425', '11426', '11427', '11428', '11429', '11430',\n    '11431', '11432', '11433', '11434', '11435', '11436', '11439',\n    '11451', '11499', '11690', '11691', '11692', '11693', '11694',\n    '11695', '11697', '10292', '10301', '10302', '10303', '10304',\n    '10305', '10306', '10307', '10308', '10309', '10310', '10311',\n    '10312', '10313', '10314', '10097', '10514', '10543', '10553',\n    '10573', '10701', '10705', '10911', '10965', '10977', '11021',\n    '11050', '11111', '11112', '11471', '11510', '11548', '11566',\n    '11577', '11580', '11598', '11629', '11731', '11798', '11968',\n    '12423', '12428', '12435', '12458', '12466', '12473', '12528',\n    '12701', '12733', '12734', '12737', '12750', '12751', '12754',\n    '12758', '12759', '12763', '12764', '12768', '12779', '12783',\n    '12786', '12788', '12789', '13731', '16091', '20459'];\n\n/**\n * The cookie path for the screener cookies\n */\nScreener.CookiePath = 'eligibility';\n\nexport default Screener;\n","/* eslint-env browser */\n'use strict';\n\nimport $ from 'jquery';\nimport Utility from 'modules/utility';\n\n/**\n * This component handles validation and submission for share by email and\n * share by SMS forms.\n * @class\n */\nclass ShareForm {\n  /**\n   * @param {HTMLElement} el - The html form element for the component.\n   * @param {object}      config - The configuration for the share form.\n   * @constructor\n   */\n  constructor(el) {\n    /** @private {HTMLElement} The component element. */\n    this._el = el;\n\n    /** @private {boolean} Whether this form is valid. */\n    this._isValid = false;\n\n    /** @private {boolean} Whether the form is currently submitting. */\n    this._isBusy = false;\n\n    /** @private {boolean} Whether the form is disabled. */\n    this._isDisabled = false;\n\n    /** @private {boolean} Whether this component has been initialized. */\n    this._initialized = false;\n  }\n\n  /**\n   * If this component has not yet been initialized, attaches event listeners.\n   * @method\n   * @return {this} ShareForm\n   */\n  init() {\n    if (this._initialized) {\n      return this;\n    }\n\n    // Mask phone numbers\n    $('input[type=\"tel\"]').each((i, el) => {\n      Utility.maskPhone(el);\n    });\n\n    $(this._el).on('submit', (e) => {\n      e.preventDefault();\n      this._validate();\n      if (this._isValid && !this._isBusy && !this._isDisabled) {\n        this._submit();\n      }\n    });\n\n    this._initialized = true;\n    return this;\n  }\n\n  /**\n   * Runs validation rules and sets validity of component.\n   * @method\n   * @return {this} ShareForm\n   */\n  _validate() {\n    let validity = true;\n    const $email = $(this._el).find('input[type=\"email\"]');\n    const $tel = $(this._el).find('input[type=\"tel\"]');\n\n    // Clear any existing error messages.\n    $(this._el).find(`.${ShareForm.CssClass.ERROR_MSG}`).remove();\n\n    if ($email.length) {\n      validity = this._validateRequired($email[0]) &&\n          this._validateEmail($email[0]);\n    }\n\n    if ($tel.length) {\n      validity = this._validateRequired($tel[0]) &&\n          this._validatePhoneNumber($tel[0]);\n    }\n\n    this._isValid = validity;\n    if (this._isValid) {\n      $(this._el).removeClass(ShareForm.CssClass.ERROR);\n    }\n    return this;\n  }\n\n  /**\n   * For a given input, checks to see if its value is a valid email. If not,\n   * displays an error message and sets an error class on the element.\n   * @param {HTMLElement} input\n   * @return {boolean}\n   */\n  _validateEmail(input) {\n    if (!$(input).val()) {\n      return false;\n    }\n    if (!Utility.isValidEmail($(input).val())) {\n      this._showError(ShareForm.Message.EMAIL);\n      $(input).one('keyup', (e) => {\n        this._validate();\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * For a given input, checks to see if its value is a valid Phone Number.\n   * If not, displays an error message and sets an error class on the element.\n   * @param {HTMLElement} input - The html form element for the component.\n   * @return {boolean} - Valid Phone Number.\n   */\n  _validatePhoneNumber(input) {\n    let valid = Utility.validatePhoneNumber(input.value);\n    if (valid) return true;\n    this._showError(ShareForm.Message.PHONE);\n    return false;\n  }\n\n  /**\n   * For a given input, checks to see if it has a value. If not, displays an\n   * error message and sets an error class on the element.\n   * @method\n   * @param {HTMLElement} input\n   * @return {boolean}\n   */\n  _validateRequired(input) {\n    if ($(input).val()) {\n      return true;\n    } else {\n      this._showError(ShareForm.Message.REQUIRED);\n      $(input).one('keyup', (e) => {\n        this._validate();\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Displays an error message by appending a div to the form.\n   * @param {string} msg - Error message to display.\n   * @return {this} ShareForm\n   */\n  _showError(msg) {\n    const $error = $(document.createElement('div'));\n    $error.addClass(ShareForm.CssClass.ERROR_MSG).text(Utility.localize(msg));\n    $(this._el).addClass(ShareForm.CssClass.ERROR).append($error);\n    return this;\n  }\n\n  /**\n   * Adds a \"success\" class.\n   * @return {this} ShareForm\n   */\n  _showSuccess() {\n    $(this._el).addClass(ShareForm.CssClass.SUCCESS);\n    return this;\n  }\n\n  /**\n   * Submits the form.\n   * @return {jqXHR} deferred response object\n   */\n  _submit() {\n    this._isBusy = true;\n\n    const payload = $(this._el).serialize();\n\n    let $tel = this._el.querySelector('input[type=\"tel\"]'); // get phone number\n    let $submit = this._el.querySelector('button[type=\"submit\"]');\n    let $spinner = this._el.querySelector(`.${ShareForm.CssClass.SPINNER}`);\n    let $inputs = $(this._el).find('input');\n    let type = 'email';\n\n    if ($tel) {\n      $tel.value = $tel.cleave.getRawValue(); // sanitize phone number\n      type = 'text';\n    }\n\n    $inputs.prop('disabled', true); // disable inputs\n\n    if ($spinner) {\n      $submit.setAttribute('style', 'display: none'); // hide submit button\n      $spinner.setAttribute('style', ''); // show spinner\n    }\n\n    return $.post($(this._el).attr('action'), payload).done((response) => {\n      if (response.success) {\n        this._showSuccess();\n        this._isDisabled = true;\n        $(this._el).one('keyup', 'input', () => {\n          $(this._el).removeClass(ShareForm.CssClass.SUCCESS);\n          this._isDisabled = false;\n        });\n        this._track(type); // track successful message\n      } else {\n        let messageId = (response.error === 21211) ?\n          ShareForm.Message.INVALID : ShareForm.Message.SERVER;\n        this._showError(messageId);\n        /* eslint-disable no-console, no-debugger */\n        if (Utility.debug()) console.dir(response);\n        /* eslint-enable no-console, no-debugger */\n      }\n    }).fail((response) => {\n      this._showError(ShareForm.Message.SERVER);\n      /* eslint-disable no-console, no-debugger */\n      if (Utility.debug()) console.dir(response);\n      /* eslint-enable no-console, no-debugger */\n    }).always(() => {\n      $inputs.prop('disabled', false); // enable inputs\n      if ($tel) $tel.cleave.setRawValue($tel.value); // reformat phone number\n      if ($spinner) {\n        $submit.setAttribute('style', ''); // show submit button\n        $spinner.setAttribute('style', 'display: none'); // hide spinner\n      }\n      this._isBusy = false;\n      // Just to see if it's working\n      if (Utility.debug()) this._track(type);\n    });\n  }\n\n  /**\n   * Tracking functionality for the share form. Can use context set in the\n   * configuration of the share form but functions without it.\n   * @param  {string} type - The share type, ex. 'Email' or 'Text'\n   */\n  _track(type) {\n    let key = type.charAt(0).toUpperCase() + type.slice(1);\n\n    Utility.track(`${key}`, [\n      {'DCS.dcsuri': `share/${type}`}\n    ]);\n  }\n}\n\n/**\n * [ShowDisclaimer description]\n * @param {[type]} event [description]\n */\nShareForm.ShowDisclaimer = function(event) {\n  /* eslint no-undef: \"off\" */\n  const variables = require('../variables.json');\n  let $cnt = $(`.${ShareForm.CssClass.NEEDS_DISCLAIMER}.active`).length;\n  let $el = $('#js-disclaimer');\n  let $hidden = ($cnt > 0) ? 'removeClass' : 'addClass';\n  let $animate = ($cnt > 0) ? 'addClass' : 'removeClass';\n  event.preventDefault();\n  $el[$hidden]('hidden');\n  $el[$animate]('animated fadeInUp');\n  $el.attr('aria-hidden', ($cnt === 0));\n  // Scroll-to functionality for mobile\n  if (\n    window.scrollTo &&\n    $cnt != 0 &&\n    window.innerWidth < variables['screen-desktop']\n  ) {\n    let $target = $(event.target);\n    window.scrollTo(0, $target.offset().top - $target.data('scrollOffset'));\n  }\n};\n\n/**\n * CSS classes used by this component.\n * @enum {string}\n */\nShareForm.CssClass = {\n  ERROR: 'error',\n  ERROR_MSG: 'error-message',\n  FORM: 'js-share-form',\n  HIDDEN: 'hidden',\n  NEEDS_DISCLAIMER: 'js-needs-disclaimer',\n  SUBMIT_BTN: 'btn-submit',\n  SUCCESS: 'success',\n  SPINNER: 'js-spinner'\n};\n\n/**\n * Localization labels of form messages.\n * @enum {string}\n */\nShareForm.Message = {\n  EMAIL: 'ERROR_EMAIL',\n  INVALID: 'ERROR_INVALID',\n  PHONE: 'ERROR_PHONE',\n  REQUIRED: 'ERROR_REQUIRED',\n  SERVER: 'ERROR_SERVER'\n};\n\nexport default ShareForm;\n","/* eslint-env browser */\n'use strict';\n\nimport $ from 'jquery';\nimport Utility from 'modules/utility';\nimport _ from 'underscore';\n\n/**\n * This component takes an html element and creates a static map image using\n * the Google static map API. Unless width and height data attributes are\n * present, the image is sized to fit the html element passed, and a window\n * resize handler is used to replace the image whenever\n * the element's dimensions change.\n * @class\n */\nclass StaticMap {\n  /**\n   * @param {HTMLElement} el - The html element for the component.\n   * @constructor\n   */\n  constructor(el) {\n    /** @private {HTMLElement} The component element. */\n    this._el = el;\n\n    /** @private {string} Marker position. */\n    this._marker = $(el).data('marker') ||\n        `${Utility.CONFIG.DEFAULT_LAT},${Utility.CONFIG.DEFAULT_LNG}`;\n\n    this._markerImg = $(el).data('govtOffice') ?\n        Utility.CONFIG.URL_PIN_BLUE : Utility.CONFIG.URL_PIN_GREEN;\n\n    /** @private {?number} Fixed element width. */\n    this._fixedWidth = $(el).data('width') ?\n        parseInt($(this._el).data('width'), 10) : null;\n\n    /** @private {?number} Fixed element height. */\n    this._fixedHeight = $(el).data('height') ?\n        parseInt($(this._el).data('height'), 10) : null;\n\n    /** @private {number} Element width. */\n    this._width = this._fixedWidth || 0;\n\n    /** @private {number} Element height. */\n    this._height = this._fixedHeight || 0;\n\n    /** @private {?string} URL to which image links. */\n    this._link = $(el).data('link') || null;\n\n    /** @type {string} The alt description for the map image */\n    this._alt = $(el).data('alt') || null;\n\n    /** @private {boolean} Whether this component has been initialized. */\n    this._initialized = false;\n\n    /** @type {String} The name of the click event to track on element */\n    this._trackKey = 'Get Directions';\n\n    /** @type {Collections} The data to track */\n    this._trackData = [{'DCS.dcsuri': 'get-directions'}];\n  }\n\n  /**\n   * If this component has not yet been initialized, attaches event listeners.\n   * @method\n   * @return {this} OfficeMap\n   */\n  init() {\n    if (this._initialized) {\n      return this;\n    }\n\n    $(window).on('resize', _.debounce(() => {\n      const newSize = this.getContainerSize();\n      if (newSize.height !== this._height || newSize.width !== this._width) {\n        this._height = newSize.height;\n        this._width = newSize.width;\n        this.renderImage();\n      }\n    }, 300));\n\n    const size = this.getContainerSize();\n    this._height = size.height;\n    this._width = size.width;\n\n    this.renderImage();\n\n    return this;\n  }\n\n  /**\n   * Returns an object with width/height integer values.\n   * @method\n   * @return {object}\n   */\n  getContainerSize() {\n    const dimensions = {};\n\n    $(this._el).find('img').hide();\n\n    dimensions.width = this._fixedWidth || parseInt($(this._el).width(), 10);\n    dimensions.height = this._fixedHeight || parseInt($(this._el).height(), 10);\n\n    $(this._el).find('img').show();\n\n    return dimensions;\n  }\n\n  /**\n   * Empties the container element and replaces its contents with a new\n   * Google static map image.\n   * @method\n   * @return {this} StaticMap\n   */\n  renderImage() {\n    const img = new Image();\n    const parameters = {\n      center: this._marker,\n      zoom: 15,\n      size: `${this._width}x${this._height}`,\n      scale: 2,\n      markers: `anchor:16,40|icon:https://access.nyc.gov` +\n        `${this._markerImg}|shadow:false|${this._marker}`,\n      key: Utility.CONFIG.GOOGLE_STATIC_API\n    };\n\n    img.onload = () => {\n      $(this._el).empty;\n      const $img = this._link ?\n        $(`<a href=\"${this._link}\"></a>`)\n          .append(img) : $(img);\n      $img.attr('target', '_blank');\n      $img.attr('itemprop', 'hasMap');\n      $img.addClass('block');\n\n      $img.on('click', (event) => {\n        Utility.track(this._trackKey, this._trackData);\n      });\n\n      $(this._el).html($img);\n    };\n\n    img.src = `https://maps.googleapis.com/maps/api/staticmap?` +\n      `${$.param(parameters)}`;\n\n    $(img).addClass('block animated fadeIn');\n    $(img).attr('alt', this._alt);\n\n    return this;\n  }\n}\n\nexport default StaticMap;\n","/* eslint-env browser */\n'use strict';\n\nimport $ from 'jquery';\nimport Cookies from 'js-cookie';\n\n/**\n * This controls the text sizer module at the top of page. A text-size-X class\n * is added to the html root element. X is an integer to indicate the scale of\n * text adjustment with 0 being neutral.\n * @class\n */\nclass TextSizer {\n  /**\n   * @param {HTMLElement} el - The html element for the component.\n   * @constructor\n   */\n  constructor(el) {\n    /** @private {HTMLElement} The component element. */\n    this._el = el;\n\n    /** @private {Number} The relative scale of text adjustment. */\n    this._textSize = 0;\n\n    /** @private {boolean} Whether the textSizer is displayed. */\n    this._active = false;\n\n    /** @private {boolean} Whether the map has been initialized. */\n    this._initialized = false;\n  }\n\n  /**\n   * Attaches event listeners to controller. Checks for textSize cookie and\n   * sets the text size class appropriately.\n   * @return {this} TextSizer\n   */\n  init() {\n    if (this._initialized) {\n      return this;\n    }\n\n    $(this._el).on('click', `.${TextSizer.CssClass.TOGGLE}`, (e) => {\n      e.preventDefault();\n      this.toggle();\n    }).on('click', `.${TextSizer.CssClass.SMALLER}`, (e) => {\n      e.preventDefault();\n      const newSize = this._textSize - 1;\n      if (newSize >= TextSizer.Size.MIN) {\n        this._adjustSize(newSize);\n      }\n    }).on('click', `.${TextSizer.CssClass.LARGER}`, (e) => {\n      e.preventDefault();\n      const newSize = this._textSize + 1;\n      if (newSize <= TextSizer.Size.MAX) {\n        this._adjustSize(newSize);\n      }\n    });\n\n    // If there is a text size cookie, set the textSize variable to the setting.\n    // If not, textSize initial setting remains at zero and we toggle on the\n    // text sizer/language controls and add a cookie.\n    if (Cookies.get('textSize')) {\n      const size = parseInt(Cookies.get('textSize'), 10);\n      this._textSize = size;\n      this._adjustSize(size);\n    } else {\n      $('html').addClass(`text-size-${this._textSize}`);\n      this.show();\n      this._setCookie();\n    }\n\n    this._initialized = true;\n\n    return this;\n  }\n\n  /**\n   * Show or hide the component based on this._active value.\n   * @return {this} TextSizer\n   */\n  toggle() {\n    if (this._active) {\n      this.hide();\n    } else {\n      this.show();\n    }\n    return this;\n  }\n\n  /**\n   * Shows the text sizer controls.\n   * @return {this} TextSizer\n   */\n  show() {\n    this._active = true;\n    $(this._el).find(`.${TextSizer.CssClass.OPTIONS}`)\n        .removeClass(TextSizer.CssClass.HIDDEN).end()\n        .find(`.${TextSizer.CssClass.TOGGLE}`)\n        .addClass(TextSizer.CssClass.HIDDEN);\n    return this;\n  }\n\n  /**\n   * Hides the text sizer controls.\n   * @return {this} TextSizer\n   */\n  hide() {\n    this._active = false;\n    $(this._el).find(`.${TextSizer.CssClass.OPTIONS}`)\n        .addClass(TextSizer.CssClass.HIDDEN).end()\n        .find(`.${TextSizer.CssClass.TOGGLE}`)\n        .removeClass(TextSizer.CssClass.HIDDEN);\n    return this;\n  }\n\n  /**\n   * Sets the `textSize` cookie to store the value of this._textSize. Expires\n   * in 1 hour (1/24 of a day).\n   * @return {this} TextSizer\n   */\n  _setCookie() {\n    Cookies.set('textSize', this._textSize, {expires: (1/24)});\n    return this;\n  }\n\n  /**\n   * Sets the text-size-X class on the html root element. Updates the cookie\n   * if necessary.\n   * @param {Number} size - new size to set.\n   * @return {this} TextSizer\n   */\n  _adjustSize(size) {\n    const originalSize = this._textSize;\n\n    if (size !== originalSize) {\n      this._textSize = size;\n      this._setCookie();\n      $('html').removeClass(`text-size-${originalSize}`);\n    }\n\n    $('html').addClass(`text-size-${size}`);\n\n    this._checkForMinMax();\n\n    return this;\n  }\n\n  /**\n   * Checks the current text size against the min and max. If the limits are\n   * reached, disable the controls for going smaller/larger as appropriate.\n   * @return {this} TextSizer\n   */\n  _checkForMinMax() {\n    if (this._textSize <= TextSizer.Size.MIN) {\n      this._textSize = TextSizer.Size.MIN;\n      $(this._el).find(`.${TextSizer.CssClass.SMALLER}`)\n          .attr('disabled', 'disabled');\n    } else {\n      $(this._el).find(`.${TextSizer.CssClass.SMALLER}`).removeAttr('disabled');\n    }\n    if (this._textSize >= TextSizer.Size.MAX) {\n      this._textSize = TextSizer.Size.MAX;\n      $(this._el).find(`.${TextSizer.CssClass.LARGER}`)\n          .attr('disabled', 'disabled');\n    } else {\n      $(this._el).find(`.${TextSizer.CssClass.LARGER}`).removeAttr('disabled');\n    }\n    return this;\n  }\n}\n\nTextSizer.Size = {\n  MAX: 3,\n  MIN: -3\n};\n\nTextSizer.CssClass = {\n  CONTROLLER: 'js-text-controller',\n  HIDDEN: 'hidden',\n  LARGER: 'js-text-larger',\n  OPTIONS: 'js-text-controller-options',\n  SMALLER: 'js-text-smaller',\n  TOGGLE: 'js-text-controller-toggle'\n};\n\nexport default TextSizer;\n","/* eslint-env browser */\n\n'use strict';\n\nimport $ from 'jquery';\nimport _ from 'underscore';\n\n/**\n * Creates a tooltip. The constructor is passed an HTML element that serves as\n * the trigger to show or hide the tooltip. The tooltip should have an\n * `aria-describedby` attribute, the value of which is the ID of the tooltip\n * content to show or hide.\n */\nclass Tooltip {\n  /**\n   * @param {HTMLElement} el - The trigger element for the component.\n   * @constructor\n   */\n  constructor(el) {\n    /** @private {HTMLElment} The triggering HTML element. */\n    this._trigger = el;\n\n    /** @private {HTMLElement} The tooltip element. */\n    this._tooltip = document.getElementById($(el).attr('aria-describedby'));\n\n    /** @private {boolean} Whether the tooltip is visible. */\n    this._active = false;\n  }\n\n  /**\n   * Sets event listeners, decorates the tooltip element, and appends the\n   * tooltip to the body to avoid positioning issues.\n   * @method\n   * @return {this} Tooltip\n   */\n  init() {\n    $(this._tooltip).addClass(`${Tooltip.CssClass.TOOLTIP}\n        ${Tooltip.CssClass.HIDDEN}`).attr({\n          'aria-hidden': true,\n          'role': 'tooltip'\n        }).on('click', (e) => {\n          // Stop click propagation so clicking on the tip doesn't trigger a\n          // click on body, which would close the tooltip.\n          e.stopPropagation();\n        }).detach().appendTo('body');\n    $(this._trigger).on('click', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.toggle();\n    });\n    Tooltip.AllTips.push(this);\n    return this;\n  }\n\n  /**\n   * Displays the tooltip. Sets a one-time listener on the body to close the\n   * tooltip when a click event bubbles up to it.\n   * @method\n   * @return {this} Tooltip\n   */\n  show() {\n    Tooltip.hideAll();\n    $(this._tooltip).removeClass(Tooltip.CssClass.HIDDEN)\n        .attr('aria-hidden', false);\n    $('body').one('click.tooltip', () => {\n      this.hide();\n    });\n    $(window).on('resize.tooltip', _.debounce(() => {\n      this.reposition();\n    }, 200));\n    this.reposition();\n    this._active = true;\n    return this;\n  }\n\n  /**\n   * Hides the tooltip and removes the click event listener on the body.\n   * @method\n   * @return {this} Tooltip\n   */\n  hide() {\n    $(this._tooltip).addClass(Tooltip.CssClass.HIDDEN)\n        .attr('aria-hidden', true);\n    $('body').off('click.tooltip');\n    this._active = false;\n    return this;\n  }\n\n  /**\n   * Toggles the state of the tooltip.\n   * @method\n   * @return {this} Tooltip\n   */\n  toggle() {\n    if (this._active) {\n      this.hide();\n    } else {\n      this.show();\n    }\n    return this;\n  }\n\n  /**\n   * Positions the tooltip beneath the triggering element.\n   * @method\n   * @return {this} Tooltip\n   */\n  reposition() {\n    const positioning = {\n      'left': 'auto',\n      'position': 'absolute',\n      'right': 'auto',\n      'top': 'auto',\n      'width': ''\n    };\n    // TODO(jjandoc): For RTL languages, we should make the default right\n    // alignment. Right now, the default is left alignment.\n    // const isRTL = $('html').attr('dir') === 'rtl';\n\n    // Reset positioning.\n    $(this._tooltip).css(positioning);\n\n    const triggerOffset = $(this._trigger).offset();\n    const tooltipWidth = $(this._tooltip).outerWidth();\n    const viewportWidth = $(window).innerWidth();\n    const gutter = 15; // Minimum distance from screen edge.\n\n    const topPos = triggerOffset.top + $(this._trigger).outerHeight();\n    let leftPos = 'auto';\n    let rightPos = 'auto';\n\n    // Determine left or right alignment.\n    // If the tooltip is wider than the screen minus gutters, then position\n    // the tooltip to extend to the gutters.\n    if (tooltipWidth >= viewportWidth - (2 * gutter)) {\n      leftPos = `${gutter}px`;\n      rightPos = `${gutter}px`;\n      positioning.width = 'auto';\n    } else if (triggerOffset.left + tooltipWidth + gutter > viewportWidth) {\n    // If the tooltip, when left aligned with the trigger, would cause the\n    // tip to go offscreen (determined by taking the trigger left offset and\n    // adding the tooltip width and the left gutter) then align the tooltip\n    // to the right side of the trigger element.\n      leftPos = 'auto';\n      rightPos = viewportWidth -\n          (triggerOffset.left + $(this._trigger).outerWidth()) + 'px';\n    } else {\n    // Align the tooltip to the left of the trigger element.\n      leftPos = `${triggerOffset.left}px`;\n      rightPos = 'auto';\n    }\n\n    // Set styling positions, reversing left and right if this is an RTL\n    // language.\n    positioning.left = leftPos;\n    positioning.right = rightPos;\n    positioning.top = topPos;\n    $(this._tooltip).css(positioning);\n\n    return this;\n  }\n}\n\n/**\n * Array of all the instantiated tooltips.\n * @type {Array<Tooltip>}\n */\nTooltip.AllTips = [];\n\n/**\n * Hide all Tooltips.\n * @public\n */\nTooltip.hideAll = function() {\n  _.each(Tooltip.AllTips, (tip) => {\n    tip.hide();\n  });\n};\n\n/**\n * CSS classes used by this component.\n * @enum {string}\n */\nTooltip.CssClass = {\n  HIDDEN: 'hidden',\n  TOOLTIP: 'tooltip-bubble',\n  TRIGGER: 'js-tooltip-trigger'\n};\n\nexport default Tooltip;\n","/* eslint-env browser */\n'use strict';\n\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport Cleave from 'cleave.js/dist/cleave.min';\nimport 'cleave.js/dist/addons/cleave-phone.us';\n\n/**\n * Collection of utility functions.\n */\nconst Utility = {};\n\n/**\n * Get SVG sprite file. See: https://css-tricks.com/ajaxing-svg-sprite/\n * @param  {object} data from get\n */\nUtility.svgSprites = function(data) {\n  const svgDiv = document.createElement('div');\n  svgDiv.innerHTML = new XMLSerializer()\n    .serializeToString(data.documentElement);\n  svgDiv.setAttribute('aria-hidden', true);\n  svgDiv.setAttribute('style', 'display:none;');\n  $(svgDiv).prependTo('body');\n};\n\n/**\n * Simple toggle that add/removes \"active\" and \"hidden\" classes, as well as\n * applying appropriate aria-hidden value to a specified target.\n *\n * Usage;\n *\n * import Utility from Utility;\n *\n * document.querySelector('[data-js*=\"toggle\"]')\n *   .addEventlistener('click', Utility.simpleToggle);\n *\n * <a data-js=\"toggle\" href=\"#target\">Toggle</a>\n *\n * Optional params;\n * data-loc=\"hash\"           Changes the window location hash to #hash.\n * data-hide=\"#selector\"     Queries the selector and toggles them to hidden\n *                           state when the target element is toggled.\n * data-reverse=\"#selector\"  Element to reverse the toggling state.\n *\n * @param  {event} event the onclick event\n */\nUtility.simpleToggle = function(event) {\n  let el = event.currentTarget;\n  event.preventDefault();\n  const $target = $(el).attr('href') ?\n      $($(el).attr('href')) : $($(el).data('target'));\n\n  $(el).toggleClass('active');\n  $target.toggleClass('active hidden')\n      .prop('aria-hidden', $target.hasClass('hidden'));\n\n  // function to hide all elements\n  if ($(el).data('hide')) {\n    $($(el).data('hide')).not($target)\n      .addClass('hidden')\n      .removeClass('active')\n      .prop('aria-hidden', true);\n  }\n\n  // Change the window hash if param set\n  if ($(el).data('loc')) {\n    window.location.hash = $(el).data('loc');\n  }\n\n  // Add the toggle event to the toggle reversal element\n  if ($(el).data('reverse')) {\n    $($(el).data('reverse')).on('click', (event) => {\n      event.preventDefault();\n      $(el).toggleClass('active');\n      $target.toggleClass('active hidden')\n        .prop('aria-hidden', $target.hasClass('hidden'));\n      $($(el).data('reverse')).off('click');\n    });\n  }\n};\n\n/**\n * Boolean for debug mode\n * @return {boolean} wether or not the front-end is in debug mode.\n */\nUtility.debug = () => (Utility.getUrlParameter('debug') === '1');\n\n/**\n * Returns the value of a given key in a URL query string. If no URL query\n * string is provided, the current URL location is used.\n * @param {string} name - Key name.\n * @param {?string} queryString - Optional query string to check.\n * @return {?string} Query parameter value.\n */\nUtility.getUrlParameter = (name, queryString) => {\n  const query = queryString || window.location.search;\n  const param = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  const regex = new RegExp('[\\\\?&]' + param + '=([^&#]*)');\n  const results = regex.exec(query);\n  return results === null ? '' :\n      decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\n\n/**\n * Takes an object and deeply traverses it, returning an array of values for\n * matched properties identified by the key string.\n * @param {object} object to traverse.\n * @param {string} targetProp name to search for.\n * @return {array} property values.\n */\nUtility.findValues = (object, targetProp) => {\n  const results = [];\n\n  /**\n   * Recursive function for iterating over object keys.\n   */\n  (function traverseObject(obj) {\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (key === targetProp) {\n          results.push(obj[key]);\n        }\n        if (typeof(obj[key]) === 'object') {\n          traverseObject(obj[key]);\n        }\n      }\n    }\n  })(object);\n\n  return results;\n};\n\n/**\n * Takes a string or number value and converts it to a dollar amount\n * as a string with two decimal points of percision.\n * @param {string|number} val - value to convert.\n * @return {string} stringified number to two decimal places.\n */\nUtility.toDollarAmount = (val) =>\n    (Math.abs(Math.round(parseFloat(val) * 100) / 100)).toFixed(2);\n\n/**\n * For translating strings, there is a global LOCALIZED_STRINGS array that\n * is defined on the HTML template level so that those strings are exposed to\n * WPML translation. The LOCALIZED_STRINGS array is composed of objects with a\n * `slug` key whose value is some constant, and a `label` value which is the\n * translated equivalent. This function takes a slug name and returns the\n * label.\n * @param {string} slugName\n * @return {string} localized value\n */\nUtility.localize = function(slugName) {\n  let text = slugName || '';\n  const localizedStrings = window.LOCALIZED_STRINGS || [];\n  const match = _.findWhere(localizedStrings, {\n    slug: slugName\n  });\n  if (match) {\n    text = match.label;\n  }\n  return text;\n};\n\n/**\n * Takes a a string and returns whether or not the string is a valid email\n * by using native browser validation if available. Otherwise, does a simple\n * Regex test.\n * @param {string} email\n * @return {boolean}\n */\nUtility.isValidEmail = function(email) {\n  const input = document.createElement('input');\n  input.type = 'email';\n  input.value = email;\n\n  return typeof input.checkValidity === 'function' ?\n      input.checkValidity() : /\\S+@\\S+\\.\\S+/.test(email);\n};\n\n/**\n * For a given number, checks to see if its value is a valid Phone Number.\n * If not, displays an error message and sets an error class on the element.\n * @param {string} number The html form element for the component.\n * @return {boolean}      Valid Phone Number.\n */\nUtility.validatePhoneNumber = function(number) {\n  let num = Utility.parsePhoneNumber(number); // parse the number\n  num = (num) ? num.join('') : 0; // if num is null, there are no numbers\n  if (num.length === 10) {\n    return true; // assume it is phone number\n  }\n  return false;\n};\n\n/**\n * Get just the phone number of a given value\n * @param  {string} value The string to get numbers from\n * @return {array}        An array with matched blocks\n */\nUtility.parsePhoneNumber = function(value) {\n  return value.match(/\\d+/g); // get only digits\n};\n\n/**\n * Mask phone number and properly format it\n * @param  {HTMLElement} input the \"tel\" input to mask\n * @return {constructor}       the input mask 000-000-0000\n */\nUtility.maskPhone = function(input) {\n  let cleave = new Cleave(input, {\n    phone: true,\n    phoneRegionCode: 'us',\n    delimiter: '-'\n  });\n  input.cleave = cleave;\n  return input;\n};\n\n/**\n * Mask dollar inputs\n * @param  {HTMLElement} input the \"float\" input to mask\n * @return {constructor}       the input mask 0.00\n */\nUtility.maskDollarFloat = function(input) {\n  let cleave = new Cleave(input, {\n    delimiter: '',\n    numeral: true,\n    numeralPositiveOnly: true\n  });\n  input.cleave = cleave;\n  return input;\n};\n\n/**\n * Convert a camel case string into all caps with underscored spaces.\n * @param  {string} str the string to change, ex. myString\n * @return {string}     the converted string, ex. MY_STRING\n */\nUtility.camelToUpper = function(str) {\n  return str.replace(/([A-Z])/g, function($1) {\n    return '_' + $1;\n  }).toUpperCase();\n};\n\n/**\n * Tracking function wrapper\n * @param  {string}     key  The key or event of the data\n * @param  {collection} data The data to track\n * @return {object}          The final data object\n */\nUtility.track = function(key, data) {\n  // Set the path name based on the location if 'DCS.dcsuri' exists\n  let dcsuri = _.pluck(data, 'DCS.dcsuri')[0];\n\n  const d = (dcsuri) ? _.map(data, function(value) {\n      if (value.hasOwnProperty('DCS.dcsuri')) {\n        return {'DCS.dcsuri': `${window.location.pathname}${dcsuri}`};\n      } return value;\n    }) : data;\n\n  /* eslint-disable no-undef */\n  /** Webtrends */\n  if (typeof Webtrends !== 'undefined')\n    Utility.webtrends(key, d);\n  /** Google Analytics */\n  if (typeof gtag !== 'undefined')\n    Utility.gtagClick(key, d);\n  /* eslint-enable no-undef */\n\n  return d;\n};\n\n/**\n * Data bus for tracking views in Webtrends and Google Analytics\n * @param  {string}     app  The name of the Single Page Application to track\n * @param  {string}     key  The key or event of the data\n * @param  {collection} data The data to track\n */\nUtility.trackView = function(app, key, data) {\n  /* eslint-disable no-undef */\n  /** Webtrends */\n  if (typeof Webtrends !== 'undefined')\n    Utility.webtrends(key, data);\n  /** Google Analytics */\n  if (typeof gtag !== 'undefined')\n    Utility.gtagView(app, key, data);\n  /* eslint-enable no-undef */\n};\n\n/**\n * Push Events to Webtrends\n * @param  {string}     key  The key or event of the data\n * @param  {collection} data The data to track\n */\nUtility.webtrends = function(key, data) {\n  /* eslint-disable no-undef, no-console, no-debugger */\n  if (typeof Webtrends === 'undefined') return;\n  let prefix = {};\n  prefix['WT.ti'] = key;\n  data.unshift(prefix);\n  // format data for Webtrends\n  data = {\n    argsa: _.flatten(_.map(data, function(value) {\n      return _.pairs(value);\n    }))\n  };\n  Webtrends.multiTrack(data);\n  if (Utility.debug())\n    console.dir([`webtrends: multiTrack`, data]);\n  /* eslint-disable no-undef, no-console, no-debugger */\n};\n\n/**\n * Push Click Events to Google Analytics\n * @param  {string}     key  The key or event of the data\n * @param  {collection} data The data to track\n */\nUtility.gtagClick = function(key, data) {\n  let uri = _.find(data, (value) => (value.hasOwnProperty('DCS.dcsuri')));\n  if (typeof uri === 'undefined') {\n    /* eslint-disable no-console, no-debugger */\n    if (Utility.debug()) {\n      console.warn([\n        'Click tracking for Webtrends and Google Analytics requires setting',\n        'the DCS.dcsuri parameter: {\"DCS.dcsuri\": \"category/action\"}'\n      ].join(' '));\n    }\n    /* eslint-enable no-console, no-debugger */\n    return;\n  }\n  let event = {\n    'event_category': key\n  };\n  /* eslint-disable no-undef */\n  gtag('event', uri['DCS.dcsuri'], event);\n  /* eslint-enable no-undef */\n  /* eslint-disable no-console, no-debugger */\n  if (Utility.debug())\n    console.dir([`gtag: event, ${uri['DCS.dcsuri']}`, event]);\n  /* eslint-enable no-console, no-debugger */\n};\n\n/**\n * Push Screen View Events to Google Analytics\n * @param  {string}     app  The name of the application\n * @param  {string}     key  The key or event of the data\n * @param  {collection} data The data to track\n */\nUtility.gtagView = function(app, key, data) {\n  let view = {\n    app_name: app,\n    screen_name: key\n  };\n  /* eslint-disable no-undef */\n  gtag('event', 'screen_view', view);\n  /* eslint-enable no-undef */\n  /* eslint-disable no-console, no-debugger */\n  if (Utility.debug())\n    console.dir([`gtag: event, screen_view`, view]);\n  /* eslint-enable no-console, no-debugger */\n};\n\n/**\n * Warnings to show for the environment\n */\nUtility.warnings = function() {\n  /* eslint-disable no-console, no-debugger */\n  if (typeof Webtrends === 'undefined' && Utility.debug())\n    console.warn(Utility.CONFIG.MSG_WT_NONCONFIG);\n\n  /** Google Analytics */\n  if (typeof gtag === 'undefined' && Utility.debug())\n    console.warn(Utility.CONFIG.MSG_GA_NONCONFIG);\n\n  /** Rollbar */\n  if (typeof Rollbar === 'undefined' && Utility.debug())\n    console.warn(Utility.CONFIG.MSG_ROLLBAR_NONCONFIG);\n  /* eslint-enable no-console, no-debugger */\n};\n\n/**\n * Set a timer based on user interaction\n * @param  {number}   time     The timing of the timeout\n * @param  {Function} callback The timer callback function\n */\nUtility.sessionTimeout = function(time, callback) {\n  const key = Utility.CONFIG.IDLE_SESSION_TIMEOUT_KEY;\n  if (Utility.getUrlParameter('timeout') && Utility.debug()) {\n    time = parseInt(Utility.getUrlParameter('timeout'));\n  } else if (Utility.debug()) {\n    return;\n  }\n\n  window[key] = {\n    int: 0\n  };\n\n  window[key].reset = function() {\n    if (window[key].timeout)\n      clearTimeout(window[key].timeout);\n    window[key].timeout = setTimeout(() => {\n        callback(window[key]);\n      }, time);\n    window[key].int++;\n  };\n\n  window.addEventListener('mousemove', window[key].reset);\n  window.addEventListener('mousedown', window[key].reset);\n  window.addEventListener('touchstart', window[key].reset);\n  window.addEventListener('keypress', window[key].reset);\n  window.addEventListener('scroll', window[key].reset);\n  window.addEventListener('click', window[key].reset);\n};\n\n/**\n * Sends the configuration object to Rollbar, the most important config is\n * the code_version which maps to the source maps version.\n * @param  {object} window The initial window object.\n * @return {object}        The configured Rollbar method.\n */\nUtility.configErrorTracking = function(window) {\n  if (typeof Rollbar === 'undefined') return false;\n\n  let scripts = document.getElementsByTagName('script');\n  let source = scripts[scripts.length - 1].src;\n  let path = source.split('/');\n  let basename = path[path.length - 1];\n  let hash = basename.split('.')[1];\n\n  let config = {\n    payload: {\n      client: {\n        javascript: {\n          // This is will be true by default if you have enabled\n          // this in settings.\n          source_map_enabled: true,\n          // This is transformed via envify in the scripts task.\n          code_version: hash,\n          // Optionally guess which frames the error was thrown from\n          // when the browser does not provide line and column numbers.\n          guess_uncaught_frames: true\n        }\n      }\n    }\n  };\n\n  $(window).on('load', () => {\n    let rollbarConfigure = Rollbar.configure(config);\n    let msg = `Configured Rollbar with ${hash}`;\n\n    if (Utility.debug()) {\n      console.dir({\n        init: msg,\n        settings: rollbarConfigure\n      }); // eslint-disable-line no-console\n      Rollbar.debug(msg); // eslint-disable-line no-undef\n    }\n  });\n};\n\n/**\n * Add \"noopener\" to relationship if it doesn't exist\n * @param  {number} i  Index of element\n * @param  {object} el DOM element\n */\nUtility.noopener = function(i, el) {\n  let rel = $(el).attr('rel');\n  rel = (typeof rel === 'undefined') ? '' : `${rel} `;\n  if (rel.indexOf('noopener') === -1) {\n    $(el).attr('rel', `${rel}noopener`);\n  }\n};\n\n/**\n * Site constants.\n * @enum {string}\n */\nUtility.CONFIG = {\n  DEFAULT_LAT: 40.7128,\n  DEFAULT_LNG: -74.0059,\n  GOOGLE_API: 'AIzaSyBSjc_JN_p0-_VKyBvjCFqVAmAIWt7ClZc',\n  GOOGLE_STATIC_API: 'AIzaSyCt0E7DX_YPFcUnlMP6WHv2zqAwyZE4qIw',\n  GRECAPTCHA_SITE_KEY: '6Lf0tTgUAAAAACnS4fRKqbLll_oFxFzeaVfbQxyX',\n  SCREENER_MAX_HOUSEHOLD: 8,\n  URL_PIN_BLUE: '/wp-content/themes/access/assets/img/map-pin-blue.png',\n  URL_PIN_BLUE_2X: '/wp-content/themes/access/assets/img/map-pin-blue-2x.png',\n  URL_PIN_GREEN: '/wp-content/themes/access/assets/img/map-pin-green.png',\n  URL_PIN_GREEN_2X: '/wp-content/themes/access/assets/img/map-pin-green-2x.png',\n  MSG_WT_NONCONFIG: 'Webtrends is not configured for this environment',\n  MSG_GA_NONCONFIG: 'Google Analytics is not configured for this environment',\n  MSG_ROLLBAR_NONCONFIG: 'Rollbar is not configured for this environment',\n  IDLE_SESSION_TIMEOUT_KEY: 'IDLE_SESSION_TIMEOUT'\n};\n\nexport default Utility;\n","module.exports={\n  \"screen-desktop\": 960,\n  \"screen-tablet\": 768,\n  \"screen-mobile\": 480,\n  \"screen-sm-mobile\": 400\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}